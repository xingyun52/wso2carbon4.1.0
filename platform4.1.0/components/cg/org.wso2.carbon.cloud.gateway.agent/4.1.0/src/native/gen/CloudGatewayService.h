/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CloudGatewayService_H
#define CloudGatewayService_H

#include <stdint.h>
#include <TProcessor.h>
#include "cg_types.h"

namespace cg {

class CloudGatewayServiceIf {
 public:
  virtual ~CloudGatewayServiceIf() {}
  virtual void login(std::string& _return, const std::string& userName, const std::string& password, const std::string& queueName) = 0;
  virtual void exchange(std::vector<Message> & _return, const std::vector<Message> & src, const int32_t size, const std::string& token) = 0;
};

class CloudGatewayServiceIfFactory {
 public:
  typedef CloudGatewayServiceIf Handler;

  virtual ~CloudGatewayServiceIfFactory() {}

  virtual CloudGatewayServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CloudGatewayServiceIf* /* handler */) = 0;
};

class CloudGatewayServiceIfSingletonFactory : virtual public CloudGatewayServiceIfFactory {
 public:
  CloudGatewayServiceIfSingletonFactory(const boost::shared_ptr<CloudGatewayServiceIf>& iface) : iface_(iface) {}
  virtual ~CloudGatewayServiceIfSingletonFactory() {}

  virtual CloudGatewayServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CloudGatewayServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CloudGatewayServiceIf> iface_;
};

class CloudGatewayServiceNull : virtual public CloudGatewayServiceIf {
 public:
  virtual ~CloudGatewayServiceNull() {}
  void login(std::string& /* _return */, const std::string& /* userName */, const std::string& /* password */, const std::string& /* queueName */) {
    return;
  }
  void exchange(std::vector<Message> & /* _return */, const std::vector<Message> & /* src */, const int32_t /* size */, const std::string& /* token */) {
    return;
  }
};

typedef struct _CloudGatewayService_login_args__isset {
  _CloudGatewayService_login_args__isset() : userName(false), password(false), queueName(false) {}
  bool userName;
  bool password;
  bool queueName;
} _CloudGatewayService_login_args__isset;

class CloudGatewayService_login_args {
 public:

  CloudGatewayService_login_args() : userName(""), password(""), queueName("") {
  }

  virtual ~CloudGatewayService_login_args() throw() {}

  std::string userName;
  std::string password;
  std::string queueName;

  _CloudGatewayService_login_args__isset __isset;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_queueName(const std::string& val) {
    queueName = val;
  }

  bool operator == (const CloudGatewayService_login_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const CloudGatewayService_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CloudGatewayService_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CloudGatewayService_login_pargs {
 public:


  virtual ~CloudGatewayService_login_pargs() throw() {}

  const std::string* userName;
  const std::string* password;
  const std::string* queueName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CloudGatewayService_login_result__isset {
  _CloudGatewayService_login_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _CloudGatewayService_login_result__isset;

class CloudGatewayService_login_result {
 public:

  CloudGatewayService_login_result() : success("") {
  }

  virtual ~CloudGatewayService_login_result() throw() {}

  std::string success;
  NotAuthorizedException e;

  _CloudGatewayService_login_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_e(const NotAuthorizedException& val) {
    e = val;
  }

  bool operator == (const CloudGatewayService_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CloudGatewayService_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CloudGatewayService_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CloudGatewayService_login_presult__isset {
  _CloudGatewayService_login_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _CloudGatewayService_login_presult__isset;

class CloudGatewayService_login_presult {
 public:


  virtual ~CloudGatewayService_login_presult() throw() {}

  std::string* success;
  NotAuthorizedException e;

  _CloudGatewayService_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CloudGatewayService_exchange_args__isset {
  _CloudGatewayService_exchange_args__isset() : src(false), size(false), token(false) {}
  bool src;
  bool size;
  bool token;
} _CloudGatewayService_exchange_args__isset;

class CloudGatewayService_exchange_args {
 public:

  CloudGatewayService_exchange_args() : size(0), token("") {
  }

  virtual ~CloudGatewayService_exchange_args() throw() {}

  std::vector<Message>  src;
  int32_t size;
  std::string token;

  _CloudGatewayService_exchange_args__isset __isset;

  void __set_src(const std::vector<Message> & val) {
    src = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const CloudGatewayService_exchange_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const CloudGatewayService_exchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CloudGatewayService_exchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CloudGatewayService_exchange_pargs {
 public:


  virtual ~CloudGatewayService_exchange_pargs() throw() {}

  const std::vector<Message> * src;
  const int32_t* size;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CloudGatewayService_exchange_result__isset {
  _CloudGatewayService_exchange_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _CloudGatewayService_exchange_result__isset;

class CloudGatewayService_exchange_result {
 public:

  CloudGatewayService_exchange_result() {
  }

  virtual ~CloudGatewayService_exchange_result() throw() {}

  std::vector<Message>  success;
  NotAuthorizedException e;

  _CloudGatewayService_exchange_result__isset __isset;

  void __set_success(const std::vector<Message> & val) {
    success = val;
  }

  void __set_e(const NotAuthorizedException& val) {
    e = val;
  }

  bool operator == (const CloudGatewayService_exchange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CloudGatewayService_exchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CloudGatewayService_exchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CloudGatewayService_exchange_presult__isset {
  _CloudGatewayService_exchange_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _CloudGatewayService_exchange_presult__isset;

class CloudGatewayService_exchange_presult {
 public:


  virtual ~CloudGatewayService_exchange_presult() throw() {}

  std::vector<Message> * success;
  NotAuthorizedException e;

  _CloudGatewayService_exchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CloudGatewayServiceClient : virtual public CloudGatewayServiceIf {
 public:
  CloudGatewayServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CloudGatewayServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(std::string& _return, const std::string& userName, const std::string& password, const std::string& queueName);
  void send_login(const std::string& userName, const std::string& password, const std::string& queueName);
  void recv_login(std::string& _return);
  void exchange(std::vector<Message> & _return, const std::vector<Message> & src, const int32_t size, const std::string& token);
  void send_exchange(const std::vector<Message> & src, const int32_t size, const std::string& token);
  void recv_exchange(std::vector<Message> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CloudGatewayServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<CloudGatewayServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (CloudGatewayServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_login(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exchange(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CloudGatewayServiceProcessor(boost::shared_ptr<CloudGatewayServiceIf> iface) :
    iface_(iface) {
    processMap_["login"] = &CloudGatewayServiceProcessor::process_login;
    processMap_["exchange"] = &CloudGatewayServiceProcessor::process_exchange;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~CloudGatewayServiceProcessor() {}
};

class CloudGatewayServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CloudGatewayServiceProcessorFactory(const ::boost::shared_ptr< CloudGatewayServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CloudGatewayServiceIfFactory > handlerFactory_;
};

class CloudGatewayServiceMultiface : virtual public CloudGatewayServiceIf {
 public:
  CloudGatewayServiceMultiface(std::vector<boost::shared_ptr<CloudGatewayServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CloudGatewayServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CloudGatewayServiceIf> > ifaces_;
  CloudGatewayServiceMultiface() {}
  void add(boost::shared_ptr<CloudGatewayServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(std::string& _return, const std::string& userName, const std::string& password, const std::string& queueName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->login(_return, userName, password, queueName);
        return;
      } else {
        ifaces_[i]->login(_return, userName, password, queueName);
      }
    }
  }

  void exchange(std::vector<Message> & _return, const std::vector<Message> & src, const int32_t size, const std::string& token) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->exchange(_return, src, size, token);
        return;
      } else {
        ifaces_[i]->exchange(_return, src, size, token);
      }
    }
  }

};

} // namespace

#endif
