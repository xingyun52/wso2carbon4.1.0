/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cg_types.h"

namespace cg {

const char* Message::ascii_fingerprint = "B5678FB3B8E903AC8C11F28055BAB975";
const uint8_t Message::binary_fingerprint[16] = {0xB5,0x67,0x8F,0xB3,0xB8,0xE9,0x03,0xAC,0x8C,0x11,0xF2,0x80,0x55,0xBA,0xB9,0x75};

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentType);
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->soapAction);
          this->__isset.soapAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->epoch);
          this->__isset.epoch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->transportHeaders.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->transportHeaders[_key5];
              xfer += iprot->readString(_val6);
            }
            iprot->readMapEnd();
          }
          this->__isset.transportHeaders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestURI);
          this->__isset.requestURI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDoingREST);
          this->__isset.isDoingREST = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->httpMethod);
          this->__isset.httpMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDoingMTOM);
          this->__isset.isDoingMTOM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDoingSwA);
          this->__isset.isDoingSwA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Message");
  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->contentType);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("soapAction", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->soapAction);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("epoch", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->epoch);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transportHeaders", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->transportHeaders.size()));
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->transportHeaders.begin(); _iter7 != this->transportHeaders.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("requestURI", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->requestURI);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDoingREST", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isDoingREST);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("httpMethod", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->httpMethod);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDoingMTOM", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->isDoingMTOM);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDoingSwA", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->isDoingSwA);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NotAuthorizedException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t NotAuthorizedException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t NotAuthorizedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotAuthorizedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotAuthorizedException");
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
