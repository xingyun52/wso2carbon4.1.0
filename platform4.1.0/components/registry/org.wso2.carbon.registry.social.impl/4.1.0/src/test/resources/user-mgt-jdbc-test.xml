<!--
 ~ Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<UserManager>
	<Realm class="org.wso2.carbon.user.core.temp.jdbc.JDBCRealm">
		<Configuration>
			<Property name="url">jdbc:h2:target/databasetest/CARBON_TEST</Property>
			<!-- Property name="userName">wso2carbon</Property>
			<Property name="password">wso2carbon</Property-->
			<Property name="driverName">org.h2.Driver</Property>
			<Property name="maxActive">50</Property>
			<Property name="maxWait">60000</Property>
			<Property name="minIdle">5</Property>
			<AdminRole>admin</AdminRole>
			<AdminUser>
				<UserName>admin</UserName>
				<Password>admin</Password>
			</AdminUser>
			<SystemUserName>system</SystemUserName>
		</Configuration>
		<UserStoreManager
			class="org.wso2.carbon.user.core.temp.jdbc.JDBCUserStoreManager">
			<Property name="GetPasswordSQL">SELECT UM_USER_PASSWORD FROM UM_USER WHERE UM_USER_NAME=?</Property>
			<Property name="GetRoleListSQL">SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID</Property>
			<Property name="UserFilterSQL">SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ORDER BY UM_USER_NAME</Property>
			<Property name="UserRoleSQL">SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID</Property>
			<Property name="IsRoleExistingSQL">SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?</Property>
			<Property name="IsUserExistingSQL">SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?</Property>
			<Property name="GetUserPropertyForProfileSQL">SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=?</Property>
			<Property name="GetUserPropertiesForProfileSQL">SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_PROFILE_ID=?</Property>
			<Property name="GetProfileNamesSQL">SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE</Property>
			<Property name="GetUserProfileNamesSQL">SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID IN (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?)</Property>
			<Property name="AddUserSQL">INSERT INTO UM_USER (UM_USER_NAME, UM_USER_PASSWORD) VALUES (?, ?)</Property>
			<Property name="AddUserPermission">INSERT INTO UM_USER_PERMISSION (UM_PERMISSION_ID, UM_USER_ID) VALUES (?, (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?)</Property>
			<Property name="AddRoleSQL">INSERT INTO UM_ROLE (UM_ROLE_NAME) VALUES (?)</Property>
			<Property name="AddRolePermissionSQL">INSERT INTO UM_ROLE_PERMISSION (UM_PERMISSION_ID, UM_ROLE_ID) VALUES (?, (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?))</Property>
			<Property name="AddUserToRoleSQL">INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?))</Property>
            <Property name="RemoveUserFromRoleSQL">DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?)</Property>
            <Property name="AddRoleToUserSQL">INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?))</Property>
            <Property name="RemoveRoleFromUserSQL">DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?)</Property>
		    <Property name="DeleteRoleSQL">DELETE FROM UM_ROLE WHERE UM_ROLE_NAME = ?</Property>
		    <Property name="OnDeleteRoleRemoveUserRoleMappingSQL">DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=?)</Property>
		    <Property name="OnDeleteRoleRemovePermissionsSQL">DELETE FROM UM_ROLE_PERMISSION WHERE UM_ROLE_NAME=?</Property>
            <Property name="OnDeleteUserRemoveUserRoleMappingSQL">DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?)</Property>
		    <Property name="OnDeleteUserRemoveUserAttributeSQL">DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?)</Property>
            <Property name="OnDeleteUserRemovePermissionsSQL">DELETE FROM UM_USER_PERMISSION WHERE UM_USER_NAME=?</Property>
            <Property name="DeleteUserSQL">DELETE FROM UM_USER WHERE UM_USER_NAME = ?</Property>
			<Property name="UpdateUserPasswordSQL">UPDATE UM_USER SET UM_USER_PASSWORD= ? WHERE UM_USER_NAME= ?</Property>
			<Property name="AddUserPropertySQL">INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?), ?, ?, ?)</Property>
			<Property name="UpdateUserPropertySQL">UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=?</Property>
			<Property name="DeleteUserPropertySQL">DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=?</Property>
            <Property name="PasswordDigest">MD5</Property>
		</UserStoreManager>
		<AuthorizationManager
			class="org.wso2.carbon.user.core.temp.authorization.JDBCAuthorizationManager"></AuthorizationManager>
	</Realm>
	<SystemPermission>
        <Permission>login</Permission>
        <Permission>manage-configuration</Permission>
        <Permission>manage-security</Permission>
        <Permission>upload-services</Permission>
        <Permission>manage-services</Permission>
        <Permission>manage-lc-configuration</Permission>
        <Permission>manage-mediation</Permission>
        <Permission>monitor-system</Permission>
            <Permission>delegate-identity</Permission>
    </SystemPermission>
</UserManager>
