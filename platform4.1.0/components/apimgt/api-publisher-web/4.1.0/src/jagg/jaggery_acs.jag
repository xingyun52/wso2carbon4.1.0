<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
        (function() {
                include("jagg.jag");
                var site = require("/site/conf/site.json");
                var log = new Log();
                var samlResponse = request.getParameter("SAMLResponse");
                var sessionId = session.getId();
                var samlRequest =request.getParameter("SAMLRequest");
            // create a sso relying party js object
                var security =require("sso");
                var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
                var isLogoutResponse = false;
                var isLogoutRequest =false;

            // if saml response is not a log out response
                if(samlResponse!=null){
                    isLogoutResponse =ssoRelyingParty.isLogoutResponse(samlResponse);
                    if(!Boolean(isLogoutResponse)) {
                    // relay state value should be a valid value, this value is mapped with request uri.
                        var relayState = request.getParameter("RelayState");
                        var requestedURI =  ssoRelyingParty.getRelayStateProperty(relayState);
                        if(  requestedURI==null){
                            log.error("Relaystate value is invalid.");
                            response.sendRedirect("../error.jag");
                            return;
                        }

                        // validating the signature
                        var isSignatureValid =ssoRelyingParty.validateSignature(samlResponse);
                        if(!Boolean(isSignatureValid)){
                            log.error("SAML response signature is verification failed.");
                            response.sendRedirect("../error.jag");
                            return;
                        }

			ssoRelyingParty.setSessionAuthenticated(sessionId,samlResponse);
			jagg.setUser({username:ssoRelyingParty.getLoggedInUser(sessionId), cookie:null});
            		session.put("showLogin", "false");
            		session.put("LOGGED_IN_USER",ssoRelyingParty.getLoggedInUser(sessionId));
			
			var api = jagg.module("api");
            		var isCreatePermitted=api.hasCreatePermission();
            		var isPublishPermitted=api.hasPublishPermission();
			jagg.setCreatePermitted(isCreatePermitted);
            		jagg.setPublishPermitted(isPublishPermitted);                       
                        response.sendRedirect(requestedURI);	
                    }else{
                        // if the saml response is log out request from IDP, we log out from web app.
                        ssoRelyingParty.invalidateSessionBySessionId(sessionId);
                        jagg.setUser(null);
                        response.sendRedirect("../");
                        return;
                    }

                }

                // if saml request is a log out request, then invalidate session.
                if(samlRequest!=null){
                    isLogoutRequest =ssoRelyingParty.isLogoutRequest(samlRequest);
                    if(Boolean(isLogoutRequest))  {
                        ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                        jagg.setUser(null);
                    }
                }



                }());
  %>
</body>
</html>
