<%
include("/jagg/jagg.jag");

(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag")
    allProviders = "__all_providers__";
    if (jagg.getUser() == null) {
        print({
                  error:true,
                  message:'timeout'
              });
    } else {
    if (action === "getProviderAPIServiceTime") {
        mod = jagg.module("statistics");
        var provider;
        var currentLocation = request.getParameter("currentLocation");
        var mode = request.getParameter("mode");
        if (currentLocation != null && currentLocation.indexOf("all-statistics") >= 0) {
            result = mod.getProviderAPIServiceTime(allProviders);
        } else if (mode != null && mode == "browse") {
            provider = request.getParameter("provider");
            result = mod.getProviderAPIServiceTime(provider);
        } else {
            provider = jagg.getUser().username;
            result = mod.getProviderAPIServiceTime(provider);
        }
        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);
    } else if (action === "getProviderAPIUsage") {
        mod = jagg.module("statistics");
        var provider = jagg.getUser().username;
        var currentLocation = request.getParameter("currentLocation");
        if (currentLocation.indexOf("all-statistics") >= 0) {
            result = mod.getProviderAPIUsage(allProviders);
        } else {
            result = mod.getProviderAPIUsage(provider);
        }
        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);

    } else if (action === "getProviderAPIVersionUserLastAccess") {
        mod = jagg.module("statistics");
        var currentLocation = request.getParameter("currentLocation");
        var mode = request.getParameter("mode");
        var provider;
        if (currentLocation != null && currentLocation.indexOf("all-statistics") >= 0) {
            result = mod.getProviderAPIVersionUserLastAccess(allProviders);
        } else if (mode != null && mode == "browse") {
            provider = request.getParameter("provider");
            result = mod.getProviderAPIVersionUserLastAccess(provider);
        } else {
            provider = jagg.getUser().username;
            result = mod.getProviderAPIVersionUserLastAccess(provider);
        }
        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);

    } else if (action === "getSubscriberCountByAPIs") {
        mod = jagg.module("statistics");
        var provider = jagg.getUser().username;
        var currentLocation = request.getParameter("currentLocation");
        if (currentLocation.indexOf("all-statistics") >= 0) {
            result = mod.getSubscriberCountByAPIs(allProviders);
        } else {
            result = mod.getSubscriberCountByAPIs(provider);
        }
        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);

    } else if (action === "getAPIUsageByResourcePath") {
        mod = jagg.module("statistics");
        var provider = jagg.getUser().username;
        var currentLocation = request.getParameter("currentLocation");
        if (currentLocation.indexOf("all-statistics") >= 0) {
            result = mod.getAPIUsageByResourcePath(allProviders);
        } else {
            result = mod.getAPIUsageByResourcePath(provider);
        }

        if (result.error == "true") {
            obj = {
                error:result.error,
                message:msg.error.backendError(action)
            };
        } else {
            obj = {
                error:false,
                usage:result.usage
            }
        }
        print(obj);

    } else if (action === "getAPIResponseFaultCount") {
             mod = jagg.module("statistics");
             var provider = jagg.getUser().username;
             var currentLocation = request.getParameter("currentLocation");
             if (currentLocation.indexOf("all-statistics") >= 0) {
                 result = mod.getAPIResponseFaultCount(allProviders);
             } else {
                 result = mod.getAPIResponseFaultCount(provider);
             }

             if (result.error == "true") {
                 obj = {
                     error:result.error,
                     message:msg.error.backendError(action)
                 };
             } else {
                 obj = {
                    error:false,
                     usage:result.usage
                 }
             }
             print(obj);
    } else if (action === "getAPIFaultyAnalyzeByTime") {
             mod = jagg.module("statistics");
             var provider = jagg.getUser().username;
             var currentLocation = request.getParameter("currentLocation");
             if (currentLocation.indexOf("all-statistics") >= 0) {
                 result = mod.getAPIFaultyAnalyzeByTime(allProviders);
             } else {
                 result = mod.getAPIFaultyAnalyzeByTime(provider);
             }

             if (result.error == "true") {
                 obj = {
                     error:result.error,
                     message:msg.error.backendError(action)
                 };
             } else {
                 obj = {
                    error:false,
                     usage:result.usage
                 }
             }
             print(obj);
    }
    else {
        print({
                  error:true,
                  message:msg.error.invalidAction(action)
              });
    }
    }
}());
%>