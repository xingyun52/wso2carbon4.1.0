/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.carbon.apimgt.gateway.handlers.security.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class APIKeyValidationService {

  public interface Iface {

    public APIKeyValidationInfoDTO validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.validateKey_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public APIKeyValidationInfoDTO validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      send_validateKey(context, version, accessToken, sessionId, requiredAuthenticationLevel);
      return recv_validateKey();
    }

    public void send_validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel) throws org.apache.thrift.TException
    {
      validateKey_args args = new validateKey_args();
      args.setContext(context);
      args.setVersion(version);
      args.setAccessToken(accessToken);
      args.setSessionId(sessionId);
      args.setRequiredAuthenticationLevel(requiredAuthenticationLevel);
      sendBase("validateKey", args);
    }

    public APIKeyValidationInfoDTO recv_validateKey() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      validateKey_result result = new validateKey_result();
      receiveBase(result, "validateKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.apiKeyMgtException != null) {
        throw result.apiKeyMgtException;
      }
      if (result.apiMgtException != null) {
        throw result.apiMgtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateKey failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, org.apache.thrift.async.AsyncMethodCallback<validateKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateKey_call method_call = new validateKey_call(context, version, accessToken, sessionId, requiredAuthenticationLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String context;
      private String version;
      private String accessToken;
      private String sessionId;
      private String requiredAuthenticationLevel;
      public validateKey_call(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, org.apache.thrift.async.AsyncMethodCallback<validateKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.version = version;
        this.accessToken = accessToken;
        this.sessionId = sessionId;
        this.requiredAuthenticationLevel = requiredAuthenticationLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateKey_args args = new validateKey_args();
        args.setContext(context);
        args.setVersion(version);
        args.setAccessToken(accessToken);
        args.setSessionId(sessionId);
        args.setRequiredAuthenticationLevel(requiredAuthenticationLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public APIKeyValidationInfoDTO getResult() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateKey();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("validateKey", new validateKey());
      return processMap;
    }

    private static class validateKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateKey_args> {
      public validateKey() {
        super("validateKey");
      }

      protected validateKey_args getEmptyArgsInstance() {
        return new validateKey_args();
      }

      protected validateKey_result getResult(I iface, validateKey_args args) throws org.apache.thrift.TException {
        validateKey_result result = new validateKey_result();
        try {
          result.success = iface.validateKey(args.context, args.version, args.accessToken, args.sessionId, args.requiredAuthenticationLevel);
        } catch (APIKeyMgtException apiKeyMgtException) {
          result.apiKeyMgtException = apiKeyMgtException;
        } catch (APIManagementException apiMgtException) {
          result.apiMgtException = apiMgtException;
        }
        return result;
      }
    }

  }

  public static class validateKey_args implements org.apache.thrift.TBase<validateKey_args, validateKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateKey_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REQUIRED_AUTHENTICATION_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredAuthenticationLevel", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String context; // required
    public String version; // required
    public String accessToken; // required
    public String sessionId; // required
    public String requiredAuthenticationLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      VERSION((short)2, "version"),
      ACCESS_TOKEN((short)3, "accessToken"),
      SESSION_ID((short)4, "sessionId"),
      REQUIRED_AUTHENTICATION_LEVEL((short)5, "requiredAuthenticationLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // VERSION
            return VERSION;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 4: // SESSION_ID
            return SESSION_ID;
          case 5: // REQUIRED_AUTHENTICATION_LEVEL
            return REQUIRED_AUTHENTICATION_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUIRED_AUTHENTICATION_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("requiredAuthenticationLevel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateKey_args.class, metaDataMap);
    }

    public validateKey_args() {
    }

    public validateKey_args(
      String context,
      String version,
      String accessToken,
      String sessionId,
      String requiredAuthenticationLevel)
    {
      this();
      this.context = context;
      this.version = version;
      this.accessToken = accessToken;
      this.sessionId = sessionId;
      this.requiredAuthenticationLevel = requiredAuthenticationLevel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateKey_args(validateKey_args other) {
      if (other.isSetContext()) {
        this.context = other.context;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetRequiredAuthenticationLevel()) {
        this.requiredAuthenticationLevel = other.requiredAuthenticationLevel;
      }
    }

    public validateKey_args deepCopy() {
      return new validateKey_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.version = null;
      this.accessToken = null;
      this.sessionId = null;
      this.requiredAuthenticationLevel = null;
    }

    public String getContext() {
      return this.context;
    }

    public validateKey_args setContext(String context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public String getVersion() {
      return this.version;
    }

    public validateKey_args setVersion(String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public validateKey_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public validateKey_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getRequiredAuthenticationLevel() {
      return this.requiredAuthenticationLevel;
    }

    public validateKey_args setRequiredAuthenticationLevel(String requiredAuthenticationLevel) {
      this.requiredAuthenticationLevel = requiredAuthenticationLevel;
      return this;
    }

    public void unsetRequiredAuthenticationLevel() {
      this.requiredAuthenticationLevel = null;
    }

    /** Returns true if field requiredAuthenticationLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetRequiredAuthenticationLevel() {
      return this.requiredAuthenticationLevel != null;
    }

    public void setRequiredAuthenticationLevelIsSet(boolean value) {
      if (!value) {
        this.requiredAuthenticationLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case REQUIRED_AUTHENTICATION_LEVEL:
        if (value == null) {
          unsetRequiredAuthenticationLevel();
        } else {
          setRequiredAuthenticationLevel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case VERSION:
        return getVersion();

      case ACCESS_TOKEN:
        return getAccessToken();

      case SESSION_ID:
        return getSessionId();

      case REQUIRED_AUTHENTICATION_LEVEL:
        return getRequiredAuthenticationLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case VERSION:
        return isSetVersion();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case SESSION_ID:
        return isSetSessionId();
      case REQUIRED_AUTHENTICATION_LEVEL:
        return isSetRequiredAuthenticationLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateKey_args)
        return this.equals((validateKey_args)that);
      return false;
    }

    public boolean equals(validateKey_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_requiredAuthenticationLevel = true && this.isSetRequiredAuthenticationLevel();
      boolean that_present_requiredAuthenticationLevel = true && that.isSetRequiredAuthenticationLevel();
      if (this_present_requiredAuthenticationLevel || that_present_requiredAuthenticationLevel) {
        if (!(this_present_requiredAuthenticationLevel && that_present_requiredAuthenticationLevel))
          return false;
        if (!this.requiredAuthenticationLevel.equals(that.requiredAuthenticationLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateKey_args typedOther = (validateKey_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequiredAuthenticationLevel()).compareTo(typedOther.isSetRequiredAuthenticationLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequiredAuthenticationLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredAuthenticationLevel, typedOther.requiredAuthenticationLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONTEXT
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.context = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VERSION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.version = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.accessToken = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SESSION_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // REQUIRED_AUTHENTICATION_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.requiredAuthenticationLevel = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.context != null) {
        oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
        oprot.writeString(this.context);
        oprot.writeFieldEnd();
      }
      if (this.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(this.version);
        oprot.writeFieldEnd();
      }
      if (this.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.accessToken);
        oprot.writeFieldEnd();
      }
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.requiredAuthenticationLevel != null) {
        oprot.writeFieldBegin(REQUIRED_AUTHENTICATION_LEVEL_FIELD_DESC);
        oprot.writeString(this.requiredAuthenticationLevel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateKey_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requiredAuthenticationLevel:");
      if (this.requiredAuthenticationLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredAuthenticationLevel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (context == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'context' was not present! Struct: " + toString());
      }
      if (version == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (sessionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
      }
      if (requiredAuthenticationLevel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredAuthenticationLevel' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class validateKey_result implements org.apache.thrift.TBase<validateKey_result, validateKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField API_KEY_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKeyMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField API_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public APIKeyValidationInfoDTO success; // required
    public APIKeyMgtException apiKeyMgtException; // required
    public APIManagementException apiMgtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      API_KEY_MGT_EXCEPTION((short)1, "apiKeyMgtException"),
      API_MGT_EXCEPTION((short)2, "apiMgtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // API_KEY_MGT_EXCEPTION
            return API_KEY_MGT_EXCEPTION;
          case 2: // API_MGT_EXCEPTION
            return API_MGT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIKeyValidationInfoDTO.class)));
      tmpMap.put(_Fields.API_KEY_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiKeyMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.API_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateKey_result.class, metaDataMap);
    }

    public validateKey_result() {
    }

    public validateKey_result(
      APIKeyValidationInfoDTO success,
      APIKeyMgtException apiKeyMgtException,
      APIManagementException apiMgtException)
    {
      this();
      this.success = success;
      this.apiKeyMgtException = apiKeyMgtException;
      this.apiMgtException = apiMgtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateKey_result(validateKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new APIKeyValidationInfoDTO(other.success);
      }
      if (other.isSetApiKeyMgtException()) {
        this.apiKeyMgtException = new APIKeyMgtException(other.apiKeyMgtException);
      }
      if (other.isSetApiMgtException()) {
        this.apiMgtException = new APIManagementException(other.apiMgtException);
      }
    }

    public validateKey_result deepCopy() {
      return new validateKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.apiKeyMgtException = null;
      this.apiMgtException = null;
    }

    public APIKeyValidationInfoDTO getSuccess() {
      return this.success;
    }

    public validateKey_result setSuccess(APIKeyValidationInfoDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public APIKeyMgtException getApiKeyMgtException() {
      return this.apiKeyMgtException;
    }

    public validateKey_result setApiKeyMgtException(APIKeyMgtException apiKeyMgtException) {
      this.apiKeyMgtException = apiKeyMgtException;
      return this;
    }

    public void unsetApiKeyMgtException() {
      this.apiKeyMgtException = null;
    }

    /** Returns true if field apiKeyMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKeyMgtException() {
      return this.apiKeyMgtException != null;
    }

    public void setApiKeyMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiKeyMgtException = null;
      }
    }

    public APIManagementException getApiMgtException() {
      return this.apiMgtException;
    }

    public validateKey_result setApiMgtException(APIManagementException apiMgtException) {
      this.apiMgtException = apiMgtException;
      return this;
    }

    public void unsetApiMgtException() {
      this.apiMgtException = null;
    }

    /** Returns true if field apiMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiMgtException() {
      return this.apiMgtException != null;
    }

    public void setApiMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiMgtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((APIKeyValidationInfoDTO)value);
        }
        break;

      case API_KEY_MGT_EXCEPTION:
        if (value == null) {
          unsetApiKeyMgtException();
        } else {
          setApiKeyMgtException((APIKeyMgtException)value);
        }
        break;

      case API_MGT_EXCEPTION:
        if (value == null) {
          unsetApiMgtException();
        } else {
          setApiMgtException((APIManagementException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case API_KEY_MGT_EXCEPTION:
        return getApiKeyMgtException();

      case API_MGT_EXCEPTION:
        return getApiMgtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case API_KEY_MGT_EXCEPTION:
        return isSetApiKeyMgtException();
      case API_MGT_EXCEPTION:
        return isSetApiMgtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateKey_result)
        return this.equals((validateKey_result)that);
      return false;
    }

    public boolean equals(validateKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyMgtException = true && this.isSetApiKeyMgtException();
      boolean that_present_apiKeyMgtException = true && that.isSetApiKeyMgtException();
      if (this_present_apiKeyMgtException || that_present_apiKeyMgtException) {
        if (!(this_present_apiKeyMgtException && that_present_apiKeyMgtException))
          return false;
        if (!this.apiKeyMgtException.equals(that.apiKeyMgtException))
          return false;
      }

      boolean this_present_apiMgtException = true && this.isSetApiMgtException();
      boolean that_present_apiMgtException = true && that.isSetApiMgtException();
      if (this_present_apiMgtException || that_present_apiMgtException) {
        if (!(this_present_apiMgtException && that_present_apiMgtException))
          return false;
        if (!this.apiMgtException.equals(that.apiMgtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateKey_result typedOther = (validateKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiKeyMgtException()).compareTo(typedOther.isSetApiKeyMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKeyMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKeyMgtException, typedOther.apiKeyMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiMgtException()).compareTo(typedOther.isSetApiMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiMgtException, typedOther.apiMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new APIKeyValidationInfoDTO();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // API_KEY_MGT_EXCEPTION
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.apiKeyMgtException = new APIKeyMgtException();
              this.apiKeyMgtException.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // API_MGT_EXCEPTION
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.apiMgtException = new APIManagementException();
              this.apiMgtException.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetApiKeyMgtException()) {
        oprot.writeFieldBegin(API_KEY_MGT_EXCEPTION_FIELD_DESC);
        this.apiKeyMgtException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetApiMgtException()) {
        oprot.writeFieldBegin(API_MGT_EXCEPTION_FIELD_DESC);
        this.apiMgtException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiKeyMgtException:");
      if (this.apiKeyMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKeyMgtException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiMgtException:");
      if (this.apiMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiMgtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
