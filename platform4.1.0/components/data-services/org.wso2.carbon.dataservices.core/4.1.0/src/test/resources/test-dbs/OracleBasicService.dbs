<data name="OracleBasicService">
	<config>
		<property name="org.wso2.ws.dataservice.driver">oracle.jdbc.driver.OracleDriver</property>
		<property name="org.wso2.ws.dataservice.protocol">jdbc:oracle:thin:@localhost:1521/xe</property>
		<property name="org.wso2.ws.dataservice.user">datauser</property>
		<property name="org.wso2.ws.dataservice.password">wso2</property>
		<property name="org.wso2.ws.dataservice.minpoolsize">2</property>
		<property name="org.wso2.ws.dataservice.maxpoolsize">100</property>

	</config>

	<!-- Query and Operation for a plain SELECT with given fields test -->
	<query id="select_query_given_fields">
		<sql>SELECT customerNumber, customerName, contactLastName, phone, city
			FROM Customers</sql>
		<result element="Customers" rowName="Customer">
			<element name="customerNumber" column="customerNumber"
				xsdType="integer" />
			<element name="customerName" column="customerName" xsdType="string" />
			<element name="contactLastName" column="contactLastName"
				xsdType="string" />
			<element name="phone" column="phone" xsdType="string" />
			<element name="city" column="city" xsdType="string" />
		</result>
	</query>

	<operation name="select_op_given_fields">
		<call-query href="select_query_given_fields">
		</call-query>
	</operation>

	<resource path="customers1" method="GET">
		<call-query href="select_query_given_fields" />
	</resource>

	<!-- Query and Operation for a plain SELECT with all fields test -->
	<query id="select_query_all_fields">
		<sql>SELECT * FROM Products</sql>

		<result element="Products" rowName="Product">
			<element name="productCode" column="productCode" xsdType="string" />
			<element name="productName" column="productName" xsdType="string" />
			<element name="quantityInStock" column="quantityInStock"
				xsdType="integer" />
			<element name="buyPrice" column="buyPrice" xsdType="double" />
		</result>
	</query>

	<operation name="select_op_all_fields">
		<call-query href="select_query_all_fields">
		</call-query>
	</operation>

	<resource path="customers2" method="POST">
		<call-query href="select_query_given_fields" />
	</resource>

	<!-- Query and Operation for a SELECT COUNT -->
	<query id="select_query_count">
		<sql>SELECT COUNT(*) as orderDetailsCount FROM OrderDetails</sql>

		<result element="Orders" rowName="OrderDetails">
			<element name="orderDetailsCount" column="orderDetailsCount"
				xsdType="integer" />
		</result>
	</query>

	<operation name="select_op_count">
		<call-query href="select_query_count">
		</call-query>
	</operation>

	<!-- Query and Operation for a SELECT with attributes test -->
	<query id="select_attributes_query">
		<sql>SELECT customerNumber, checkNumber, paymentDate, amount FROM
			Payments</sql>

		<result element="Payments" rowName="Payment">
			<attribute name="customerNumber" column="customerNumber"
				xsdType="integer" />
			<attribute name="paymentDate" column="paymentDate" xsdType="dateTime" />
			<attribute name="amount" column="amount" xsdType="double" />
			<element name="checkNumber" column="checkNumber" xsdType="string" />
		</result>
	</query>

	<operation name="select_attributes_for_date_time_op">
		<call-query href="select_attributes_query">
		</call-query>
	</operation>

	<query id="basic_merge_query1" useConfig="default">
		<sql>SELECT customerNumber, customerName, contactLastName, phone, city
			FROM Customers WHERE rownum BETWEEN 1 AND 2</sql>
		<result element="Customers" rowName="Customer">
			<element name="customerNumber" column="customerNumber"
				xsdType="integer" />
			<element name="customerName" column="customerName" xsdType="string" />
			<element name="contactLastName" column="contactLastName"
				xsdType="string" />
			<element name="phone" column="phone" xsdType="string" />
			<element name="city" column="city" xsdType="string" />
		</result>
	</query>
	<query id="basic_merge_query2" useConfig="default">
		<sql>SELECT customerNumber, customerName, contactLastName, phone, city
			FROM (select rownum r,customerNumber, customerName, contactLastName,
			phone, city FROM Customers ) WHERE r BETWEEN 4 AND 6</sql>
		<result element="Customers" rowName="Customer">
			<element name="customerNumber" column="customerNumber"
				xsdType="integer" />
			<element name="customerName" column="customerName" xsdType="string" />
			<element name="contactLastName" column="contactLastName"
				xsdType="string" />
			<element name="phone" column="phone" xsdType="string" />
			<element name="city" column="city" xsdType="string" />
		</result>
	</query>

	<operation name="basic_merge_op">
		<call-query-group>
			<call-query href="basic_merge_query1">
			</call-query>
			<call-query href="basic_merge_query2">
			</call-query>
		</call-query-group>
	</operation>

	<!-- Array types -->
	<query id="testArrayTypes" useConfig="default">
		<sql>select customerNumber,customerName,contactLastName,phone,city
			from Customers where country = ? and state IN (?) and creditLimit > ?
			and city IN (?) and contactFirstName = ?</sql>

		<param name="country" sqlType="STRING" ordinal="1" paramType="SCALAR" />
		<param name="state" sqlType="STRING" ordinal="2" paramType="ARRAY" />
		<param name="creditLimit" sqlType="INTEGER" ordinal="3"
			paramType="SCALAR" />
		<param name="city" sqlType="STRING" ordinal="4" paramType="ARRAY" />
		<param name="contactFirstName" sqlType="STRING" ordinal="5"
			paramType="SCALAR" />

		<result element="Customers" rowName="Customer"
			useColumnNumbers="true">
			<element name="customerNumber" column="1" xsdType="integer" />
			<element name="customerName" column="2" xsdType="string" />
			<element name="contactLastName" column="3" xsdType="string" />
			<element name="phone" column="4" xsdType="string" />
			<element name="city" column="5" xsdType="string" />
		</result>
	</query>

	<operation name="basic_array_type_op">
		<call-query href="testArrayTypes">
			<with-param name="country" query-param="country" />
			<with-param name="state" query-param="state" />
			<with-param name="creditLimit" query-param="creditLimit" />
			<with-param name="city" query-param="city" />
			<with-param name="contactFirstName" query-param="contactFirstName" />
		</call-query>
	</operation>


</data>

