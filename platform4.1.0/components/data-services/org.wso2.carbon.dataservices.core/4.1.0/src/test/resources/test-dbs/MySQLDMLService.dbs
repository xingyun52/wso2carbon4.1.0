<data name="MySQLDMLService">
   <config>
      <property name="org.wso2.ws.dataservice.driver">com.mysql.jdbc.Driver</property>
      <property name="org.wso2.ws.dataservice.protocol"><![CDATA[jdbc:mysql://localhost:3306/DSTestDB?autoReconnect=true&noAccessToProcedureBodies=true]]></property>
      <property name="org.wso2.ws.dataservice.user">datauser</property>
      <property name="org.wso2.ws.dataservice.password">wso2</property>
      <property name="org.wso2.ws.dataservice.minpoolsize">2</property>
      <property name="org.wso2.ws.dataservice.maxpoolsize">100</property>
   </config>

  <!-- Query and Operation for INSERT test -->
   <query id="insert_data_query">
      <sql>INSERT INTO Customers (customerNumber,customerName,contactLastName,phone,city) values(?,?,?,?,?)</sql>
      <param name="customerNumber" sqlType="INTEGER" />
      <param name="customerName" sqlType="STRING" />
      <param name="contactLastName" sqlType="STRING" />
      <param name="phone" sqlType="STRING" />
      <param name="city" sqlType="STRING" />          
   </query>

   <operation name="insert_data_op">
      <call-query href="insert_data_query">
        <with-param name="customerNumber" query-param="customerNumber" />
        <with-param name="customerName" query-param="customerName" />
        <with-param name="contactLastName" query-param="contactLastName" />
        <with-param name="phone" query-param="phone" />
        <with-param name="city" query-param="city" />                              
      </call-query>
   </operation>
   
   <!-- Query and Operation for UPDATE test with no result nested query -->
   <query id="update_data_nested_query">
      <sql>SELECT * FROM Customers WHERE customerNumber=?</sql>
      <param name="customerNumber" sqlType="INTEGER" />
      <result element="Customers" rowName="Customer">
        <element name="phone" column="phone" />
        <call-query href="update_data_query">
          <with-param name="customerName" column="customerName" />
          <with-param name="contactLastName" column="contactLastName" />
          <with-param name="phone" column="phone" />
          <with-param name="city" column="city" />
        </call-query>
      </result>
   </query>
   
   <query id="update_data_nested_stored_proc_query">
      <sql>CALL getCustomerCreditLimitWithId(?)</sql>
      <param name="customerNumber" sqlType="INTEGER" />
      <result element="Customers" rowName="Customer">
        <element name="phone" column="phone" />
        <call-query href="update_data_query">
          <with-param name="customerName" column="customerName" />
          <with-param name="contactLastName" column="contactLastName" />
          <with-param name="phone" column="phone" />
          <with-param name="city" column="city" />
        </call-query>
      </result>
   </query>
   
   <query id="update_data_query">
      <sql>UPDATE Customers SET customerName=?,contactLastName=?,phone=?,city=? WHERE customerNumber=450001</sql>
      <param name="customerName" sqlType="STRING" />
      <param name="contactLastName" sqlType="STRING" />
      <param name="phone" sqlType="STRING" />
      <param name="city" sqlType="STRING" />
   </query>

   <operation name="update_data_op">
      <call-query href="update_data_nested_query">
        <with-param name="customerNumber" query-param="customerNumber" />
      </call-query>
   </operation>
   
   <operation name="update_stored_proc_data_op">
      <call-query href="update_data_nested_stored_proc_query">
        <with-param name="customerNumber" query-param="customerNumber" />
      </call-query>
   </operation>
   
   <!-- Query and Operation for DELETE test -->
   <query id="delete_data_query">
      <sql>DELETE FROM Customers WHERE customerNumber=?</sql>
      <param name="customerNumber" sqlType="INTEGER" />      
   </query>

   <operation name="delete_data_op">
      <call-query href="delete_data_query">
        <with-param name="customerNumber" query-param="customerNumber" />
      </call-query>
   </operation>
   
   <!-- Query and Operation for SELECT with a given id test -->
   <query id="select_data_query">
      <sql>SELECT * FROM Customers WHERE customerNumber=?</sql>
      <param name="customerNumber" sqlType="INTEGER" />
      <result element="Customers" rowName="Customer">
         <element name="customerNumber" column="customerNumber" />
         <element name="customerName" column="customerName" />
         <element name="contactLastName" column="contactLastName" />
         <element name="phone" column="phone" />
         <element name="city" column="city" />
      </result>
   </query>

   <operation name="select_data_op">
      <call-query href="select_data_query">
        <with-param name="customerNumber" query-param="customerNumber" />
      </call-query>
   </operation>
   
   <!-- Query and Operation for a SELECT COUNT with a given id -->
   <query id="select_count_id_query">
      <sql>SELECT COUNT(*) as customerCount FROM Customers WHERE customerNumber=?</sql>
      <param name="customerNumber" sqlType="INTEGER" />
      <result element="Customers" rowName="CustomerDetails">
         <element name="customerCount" column="customerCount" />
      </result>
   </query>

   <operation name="select_count_id_op">
      <call-query href="select_count_id_query">
        <with-param name="customerNumber" query-param="customerNumber" />
      </call-query>
   </operation>
   
   <!-- Query and Operation for insert operation with validation -->
   
   <query id="insert_data_val_query">
      <sql>INSERT INTO Customers (customerNumber,customerName,contactLastName,phone,city) values(?,?,?,?,?)</sql>
      <param name="customerNumber" sqlType="INTEGER">
         <validateLongRange minimum="450001" maximum="450001" />
      </param>
      <param name="customerName" sqlType="STRING">
         <validateLength minimum="5" />
      </param>
      <param name="contactLastName" sqlType="STRING">
         <validateLength maximum="20" />
         <validateCustom class="org.wso2.carbon.dataservices.core.test.util.OddLengthValidator" />
      </param>
      <param name="phone" sqlType="STRING">
         <validatePattern pattern="^\([1-9]\d{2}\)\s?\d{3}\-\d{4}$" />
      </param>
      <param name="city" sqlType="STRING" />          
   </query>

   <operation name="insert_data_val_op">
      <call-query href="insert_data_val_query">
        <with-param name="customerNumber" query-param="customerNumber" />
        <with-param name="customerName" query-param="customerName" />
        <with-param name="contactLastName" query-param="contactLastName" />
        <with-param name="phone" query-param="phone" />
        <with-param name="city" query-param="city" />                              
      </call-query>
   </operation>
   
</data>
