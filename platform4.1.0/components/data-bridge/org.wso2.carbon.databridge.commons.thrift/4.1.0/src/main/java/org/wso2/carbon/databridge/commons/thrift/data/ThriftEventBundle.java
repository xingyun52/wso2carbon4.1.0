/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.carbon.databridge.commons.thrift.data;

import java.util.*;

public class ThriftEventBundle implements org.apache.thrift.TBase<ThriftEventBundle, ThriftEventBundle._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftEventBundle");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("eventNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INT_ATTRIBUTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intAttributeList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_ATTRIBUTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("longAttributeList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_ATTRIBUTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleAttributeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BOOL_ATTRIBUTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("boolAttributeList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_ATTRIBUTE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAttributeList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ARBITRARY_DATA_MAP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("arbitraryDataMapMap", org.apache.thrift.protocol.TType.MAP, (short)8);

  public String sessionId; // required
  public int eventNum; // required
  public List<Integer> intAttributeList; // required
  public List<Long> longAttributeList; // required
  public List<Double> doubleAttributeList; // required
  public List<Boolean> boolAttributeList; // required
  public List<String> stringAttributeList; // required
  public Map<Integer,Map<String,String>> arbitraryDataMapMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    EVENT_NUM((short)2, "eventNum"),
    INT_ATTRIBUTE_LIST((short)3, "intAttributeList"),
    LONG_ATTRIBUTE_LIST((short)4, "longAttributeList"),
    DOUBLE_ATTRIBUTE_LIST((short)5, "doubleAttributeList"),
    BOOL_ATTRIBUTE_LIST((short)6, "boolAttributeList"),
    STRING_ATTRIBUTE_LIST((short)7, "stringAttributeList"),
    ARBITRARY_DATA_MAP_MAP((short)8, "arbitraryDataMapMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // EVENT_NUM
          return EVENT_NUM;
        case 3: // INT_ATTRIBUTE_LIST
          return INT_ATTRIBUTE_LIST;
        case 4: // LONG_ATTRIBUTE_LIST
          return LONG_ATTRIBUTE_LIST;
        case 5: // DOUBLE_ATTRIBUTE_LIST
          return DOUBLE_ATTRIBUTE_LIST;
        case 6: // BOOL_ATTRIBUTE_LIST
          return BOOL_ATTRIBUTE_LIST;
        case 7: // STRING_ATTRIBUTE_LIST
          return STRING_ATTRIBUTE_LIST;
        case 8: // ARBITRARY_DATA_MAP_MAP
          return ARBITRARY_DATA_MAP_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_NUM, new org.apache.thrift.meta_data.FieldMetaData("eventNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_ATTRIBUTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("intAttributeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_ATTRIBUTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("longAttributeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_ATTRIBUTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("doubleAttributeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BOOL_ATTRIBUTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("boolAttributeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.STRING_ATTRIBUTE_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringAttributeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ARBITRARY_DATA_MAP_MAP, new org.apache.thrift.meta_data.FieldMetaData("arbitraryDataMapMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftEventBundle.class, metaDataMap);
  }

  public ThriftEventBundle() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftEventBundle(ThriftEventBundle other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    this.eventNum = other.eventNum;
    if (other.isSetIntAttributeList()) {
      List<Integer> __this__intAttributeList = new ArrayList<Integer>();
      for (Integer other_element : other.intAttributeList) {
        __this__intAttributeList.add(other_element);
      }
      this.intAttributeList = __this__intAttributeList;
    }
    if (other.isSetLongAttributeList()) {
      List<Long> __this__longAttributeList = new ArrayList<Long>();
      for (Long other_element : other.longAttributeList) {
        __this__longAttributeList.add(other_element);
      }
      this.longAttributeList = __this__longAttributeList;
    }
    if (other.isSetDoubleAttributeList()) {
      List<Double> __this__doubleAttributeList = new ArrayList<Double>();
      for (Double other_element : other.doubleAttributeList) {
        __this__doubleAttributeList.add(other_element);
      }
      this.doubleAttributeList = __this__doubleAttributeList;
    }
    if (other.isSetBoolAttributeList()) {
      List<Boolean> __this__boolAttributeList = new ArrayList<Boolean>();
      for (Boolean other_element : other.boolAttributeList) {
        __this__boolAttributeList.add(other_element);
      }
      this.boolAttributeList = __this__boolAttributeList;
    }
    if (other.isSetStringAttributeList()) {
      List<String> __this__stringAttributeList = new ArrayList<String>();
      for (String other_element : other.stringAttributeList) {
        __this__stringAttributeList.add(other_element);
      }
      this.stringAttributeList = __this__stringAttributeList;
    }
    if (other.isSetArbitraryDataMapMap()) {
      Map<Integer,Map<String,String>> __this__arbitraryDataMapMap = new HashMap<Integer,Map<String,String>>();
      for (Map.Entry<Integer, Map<String,String>> other_element : other.arbitraryDataMapMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Map<String,String> other_element_value = other_element.getValue();

        Integer __this__arbitraryDataMapMap_copy_key = other_element_key;

        Map<String,String> __this__arbitraryDataMapMap_copy_value = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          String other_element_value_element_value = other_element_value_element.getValue();

          String __this__arbitraryDataMapMap_copy_value_copy_key = other_element_value_element_key;

          String __this__arbitraryDataMapMap_copy_value_copy_value = other_element_value_element_value;

          __this__arbitraryDataMapMap_copy_value.put(__this__arbitraryDataMapMap_copy_value_copy_key, __this__arbitraryDataMapMap_copy_value_copy_value);
        }

        __this__arbitraryDataMapMap.put(__this__arbitraryDataMapMap_copy_key, __this__arbitraryDataMapMap_copy_value);
      }
      this.arbitraryDataMapMap = __this__arbitraryDataMapMap;
    }
  }

  public ThriftEventBundle deepCopy() {
    return new ThriftEventBundle(this);
  }

  @Override
  public void clear() {
    this.sessionId = null;
    setEventNumIsSet(false);
    this.eventNum = 0;
    this.intAttributeList = null;
    this.longAttributeList = null;
    this.doubleAttributeList = null;
    this.boolAttributeList = null;
    this.stringAttributeList = null;
    this.arbitraryDataMapMap = null;
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public ThriftEventBundle setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public int getEventNum() {
    return this.eventNum;
  }

  public ThriftEventBundle setEventNum(int eventNum) {
    this.eventNum = eventNum;
    setEventNumIsSet(true);
    return this;
  }

  public void unsetEventNum() {
    __isset_bit_vector.clear(__EVENTNUM_ISSET_ID);
  }

  /** Returns true if field eventNum is set (has been assigned a value) and false otherwise */
  public boolean isSetEventNum() {
    return __isset_bit_vector.get(__EVENTNUM_ISSET_ID);
  }

  public void setEventNumIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTNUM_ISSET_ID, value);
  }

  public int getIntAttributeListSize() {
    return (this.intAttributeList == null) ? 0 : this.intAttributeList.size();
  }

  public java.util.Iterator<Integer> getIntAttributeListIterator() {
    return (this.intAttributeList == null) ? null : this.intAttributeList.iterator();
  }

  public void addToIntAttributeList(int elem) {
    if (this.intAttributeList == null) {
      this.intAttributeList = new ArrayList<Integer>();
    }
    this.intAttributeList.add(elem);
  }

  public List<Integer> getIntAttributeList() {
    return this.intAttributeList;
  }

  public ThriftEventBundle setIntAttributeList(List<Integer> intAttributeList) {
    this.intAttributeList = intAttributeList;
    return this;
  }

  public void unsetIntAttributeList() {
    this.intAttributeList = null;
  }

  /** Returns true if field intAttributeList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntAttributeList() {
    return this.intAttributeList != null;
  }

  public void setIntAttributeListIsSet(boolean value) {
    if (!value) {
      this.intAttributeList = null;
    }
  }

  public int getLongAttributeListSize() {
    return (this.longAttributeList == null) ? 0 : this.longAttributeList.size();
  }

  public java.util.Iterator<Long> getLongAttributeListIterator() {
    return (this.longAttributeList == null) ? null : this.longAttributeList.iterator();
  }

  public void addToLongAttributeList(long elem) {
    if (this.longAttributeList == null) {
      this.longAttributeList = new ArrayList<Long>();
    }
    this.longAttributeList.add(elem);
  }

  public List<Long> getLongAttributeList() {
    return this.longAttributeList;
  }

  public ThriftEventBundle setLongAttributeList(List<Long> longAttributeList) {
    this.longAttributeList = longAttributeList;
    return this;
  }

  public void unsetLongAttributeList() {
    this.longAttributeList = null;
  }

  /** Returns true if field longAttributeList is set (has been assigned a value) and false otherwise */
  public boolean isSetLongAttributeList() {
    return this.longAttributeList != null;
  }

  public void setLongAttributeListIsSet(boolean value) {
    if (!value) {
      this.longAttributeList = null;
    }
  }

  public int getDoubleAttributeListSize() {
    return (this.doubleAttributeList == null) ? 0 : this.doubleAttributeList.size();
  }

  public java.util.Iterator<Double> getDoubleAttributeListIterator() {
    return (this.doubleAttributeList == null) ? null : this.doubleAttributeList.iterator();
  }

  public void addToDoubleAttributeList(double elem) {
    if (this.doubleAttributeList == null) {
      this.doubleAttributeList = new ArrayList<Double>();
    }
    this.doubleAttributeList.add(elem);
  }

  public List<Double> getDoubleAttributeList() {
    return this.doubleAttributeList;
  }

  public ThriftEventBundle setDoubleAttributeList(List<Double> doubleAttributeList) {
    this.doubleAttributeList = doubleAttributeList;
    return this;
  }

  public void unsetDoubleAttributeList() {
    this.doubleAttributeList = null;
  }

  /** Returns true if field doubleAttributeList is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleAttributeList() {
    return this.doubleAttributeList != null;
  }

  public void setDoubleAttributeListIsSet(boolean value) {
    if (!value) {
      this.doubleAttributeList = null;
    }
  }

  public int getBoolAttributeListSize() {
    return (this.boolAttributeList == null) ? 0 : this.boolAttributeList.size();
  }

  public java.util.Iterator<Boolean> getBoolAttributeListIterator() {
    return (this.boolAttributeList == null) ? null : this.boolAttributeList.iterator();
  }

  public void addToBoolAttributeList(boolean elem) {
    if (this.boolAttributeList == null) {
      this.boolAttributeList = new ArrayList<Boolean>();
    }
    this.boolAttributeList.add(elem);
  }

  public List<Boolean> getBoolAttributeList() {
    return this.boolAttributeList;
  }

  public ThriftEventBundle setBoolAttributeList(List<Boolean> boolAttributeList) {
    this.boolAttributeList = boolAttributeList;
    return this;
  }

  public void unsetBoolAttributeList() {
    this.boolAttributeList = null;
  }

  /** Returns true if field boolAttributeList is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolAttributeList() {
    return this.boolAttributeList != null;
  }

  public void setBoolAttributeListIsSet(boolean value) {
    if (!value) {
      this.boolAttributeList = null;
    }
  }

  public int getStringAttributeListSize() {
    return (this.stringAttributeList == null) ? 0 : this.stringAttributeList.size();
  }

  public java.util.Iterator<String> getStringAttributeListIterator() {
    return (this.stringAttributeList == null) ? null : this.stringAttributeList.iterator();
  }

  public void addToStringAttributeList(String elem) {
    if (this.stringAttributeList == null) {
      this.stringAttributeList = new ArrayList<String>();
    }
    this.stringAttributeList.add(elem);
  }

  public List<String> getStringAttributeList() {
    return this.stringAttributeList;
  }

  public ThriftEventBundle setStringAttributeList(List<String> stringAttributeList) {
    this.stringAttributeList = stringAttributeList;
    return this;
  }

  public void unsetStringAttributeList() {
    this.stringAttributeList = null;
  }

  /** Returns true if field stringAttributeList is set (has been assigned a value) and false otherwise */
  public boolean isSetStringAttributeList() {
    return this.stringAttributeList != null;
  }

  public void setStringAttributeListIsSet(boolean value) {
    if (!value) {
      this.stringAttributeList = null;
    }
  }

  public int getArbitraryDataMapMapSize() {
    return (this.arbitraryDataMapMap == null) ? 0 : this.arbitraryDataMapMap.size();
  }

  public void putToArbitraryDataMapMap(int key, Map<String,String> val) {
    if (this.arbitraryDataMapMap == null) {
      this.arbitraryDataMapMap = new HashMap<Integer,Map<String,String>>();
    }
    this.arbitraryDataMapMap.put(key, val);
  }

  public Map<Integer,Map<String,String>> getArbitraryDataMapMap() {
    return this.arbitraryDataMapMap;
  }

  public ThriftEventBundle setArbitraryDataMapMap(Map<Integer,Map<String,String>> arbitraryDataMapMap) {
    this.arbitraryDataMapMap = arbitraryDataMapMap;
    return this;
  }

  public void unsetArbitraryDataMapMap() {
    this.arbitraryDataMapMap = null;
  }

  /** Returns true if field arbitraryDataMapMap is set (has been assigned a value) and false otherwise */
  public boolean isSetArbitraryDataMapMap() {
    return this.arbitraryDataMapMap != null;
  }

  public void setArbitraryDataMapMapIsSet(boolean value) {
    if (!value) {
      this.arbitraryDataMapMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    case EVENT_NUM:
      if (value == null) {
        unsetEventNum();
      } else {
        setEventNum((Integer)value);
      }
      break;

    case INT_ATTRIBUTE_LIST:
      if (value == null) {
        unsetIntAttributeList();
      } else {
        setIntAttributeList((List<Integer>)value);
      }
      break;

    case LONG_ATTRIBUTE_LIST:
      if (value == null) {
        unsetLongAttributeList();
      } else {
        setLongAttributeList((List<Long>)value);
      }
      break;

    case DOUBLE_ATTRIBUTE_LIST:
      if (value == null) {
        unsetDoubleAttributeList();
      } else {
        setDoubleAttributeList((List<Double>)value);
      }
      break;

    case BOOL_ATTRIBUTE_LIST:
      if (value == null) {
        unsetBoolAttributeList();
      } else {
        setBoolAttributeList((List<Boolean>)value);
      }
      break;

    case STRING_ATTRIBUTE_LIST:
      if (value == null) {
        unsetStringAttributeList();
      } else {
        setStringAttributeList((List<String>)value);
      }
      break;

    case ARBITRARY_DATA_MAP_MAP:
      if (value == null) {
        unsetArbitraryDataMapMap();
      } else {
        setArbitraryDataMapMap((Map<Integer,Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case EVENT_NUM:
      return Integer.valueOf(getEventNum());

    case INT_ATTRIBUTE_LIST:
      return getIntAttributeList();

    case LONG_ATTRIBUTE_LIST:
      return getLongAttributeList();

    case DOUBLE_ATTRIBUTE_LIST:
      return getDoubleAttributeList();

    case BOOL_ATTRIBUTE_LIST:
      return getBoolAttributeList();

    case STRING_ATTRIBUTE_LIST:
      return getStringAttributeList();

    case ARBITRARY_DATA_MAP_MAP:
      return getArbitraryDataMapMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case EVENT_NUM:
      return isSetEventNum();
    case INT_ATTRIBUTE_LIST:
      return isSetIntAttributeList();
    case LONG_ATTRIBUTE_LIST:
      return isSetLongAttributeList();
    case DOUBLE_ATTRIBUTE_LIST:
      return isSetDoubleAttributeList();
    case BOOL_ATTRIBUTE_LIST:
      return isSetBoolAttributeList();
    case STRING_ATTRIBUTE_LIST:
      return isSetStringAttributeList();
    case ARBITRARY_DATA_MAP_MAP:
      return isSetArbitraryDataMapMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftEventBundle)
      return this.equals((ThriftEventBundle)that);
    return false;
  }

  public boolean equals(ThriftEventBundle that) {
    if (that == null)
      return false;

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_eventNum = true && this.isSetEventNum();
    boolean that_present_eventNum = true && that.isSetEventNum();
    if (this_present_eventNum || that_present_eventNum) {
      if (!(this_present_eventNum && that_present_eventNum))
        return false;
      if (this.eventNum != that.eventNum)
        return false;
    }

    boolean this_present_intAttributeList = true && this.isSetIntAttributeList();
    boolean that_present_intAttributeList = true && that.isSetIntAttributeList();
    if (this_present_intAttributeList || that_present_intAttributeList) {
      if (!(this_present_intAttributeList && that_present_intAttributeList))
        return false;
      if (!this.intAttributeList.equals(that.intAttributeList))
        return false;
    }

    boolean this_present_longAttributeList = true && this.isSetLongAttributeList();
    boolean that_present_longAttributeList = true && that.isSetLongAttributeList();
    if (this_present_longAttributeList || that_present_longAttributeList) {
      if (!(this_present_longAttributeList && that_present_longAttributeList))
        return false;
      if (!this.longAttributeList.equals(that.longAttributeList))
        return false;
    }

    boolean this_present_doubleAttributeList = true && this.isSetDoubleAttributeList();
    boolean that_present_doubleAttributeList = true && that.isSetDoubleAttributeList();
    if (this_present_doubleAttributeList || that_present_doubleAttributeList) {
      if (!(this_present_doubleAttributeList && that_present_doubleAttributeList))
        return false;
      if (!this.doubleAttributeList.equals(that.doubleAttributeList))
        return false;
    }

    boolean this_present_boolAttributeList = true && this.isSetBoolAttributeList();
    boolean that_present_boolAttributeList = true && that.isSetBoolAttributeList();
    if (this_present_boolAttributeList || that_present_boolAttributeList) {
      if (!(this_present_boolAttributeList && that_present_boolAttributeList))
        return false;
      if (!this.boolAttributeList.equals(that.boolAttributeList))
        return false;
    }

    boolean this_present_stringAttributeList = true && this.isSetStringAttributeList();
    boolean that_present_stringAttributeList = true && that.isSetStringAttributeList();
    if (this_present_stringAttributeList || that_present_stringAttributeList) {
      if (!(this_present_stringAttributeList && that_present_stringAttributeList))
        return false;
      if (!this.stringAttributeList.equals(that.stringAttributeList))
        return false;
    }

    boolean this_present_arbitraryDataMapMap = true && this.isSetArbitraryDataMapMap();
    boolean that_present_arbitraryDataMapMap = true && that.isSetArbitraryDataMapMap();
    if (this_present_arbitraryDataMapMap || that_present_arbitraryDataMapMap) {
      if (!(this_present_arbitraryDataMapMap && that_present_arbitraryDataMapMap))
        return false;
      if (!this.arbitraryDataMapMap.equals(that.arbitraryDataMapMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftEventBundle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftEventBundle typedOther = (ThriftEventBundle)other;

    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventNum()).compareTo(typedOther.isSetEventNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventNum, typedOther.eventNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntAttributeList()).compareTo(typedOther.isSetIntAttributeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntAttributeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intAttributeList, typedOther.intAttributeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongAttributeList()).compareTo(typedOther.isSetLongAttributeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongAttributeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longAttributeList, typedOther.longAttributeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleAttributeList()).compareTo(typedOther.isSetDoubleAttributeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleAttributeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleAttributeList, typedOther.doubleAttributeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolAttributeList()).compareTo(typedOther.isSetBoolAttributeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolAttributeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolAttributeList, typedOther.boolAttributeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringAttributeList()).compareTo(typedOther.isSetStringAttributeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringAttributeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAttributeList, typedOther.stringAttributeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArbitraryDataMapMap()).compareTo(typedOther.isSetArbitraryDataMapMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArbitraryDataMapMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arbitraryDataMapMap, typedOther.arbitraryDataMapMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SESSION_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sessionId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EVENT_NUM
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.eventNum = iprot.readI32();
            setEventNumIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INT_ATTRIBUTE_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.intAttributeList = new ArrayList<Integer>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                int _elem2; // required
                _elem2 = iprot.readI32();
                this.intAttributeList.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LONG_ATTRIBUTE_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.longAttributeList = new ArrayList<Long>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                long _elem5; // required
                _elem5 = iprot.readI64();
                this.longAttributeList.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DOUBLE_ATTRIBUTE_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
              this.doubleAttributeList = new ArrayList<Double>(_list6.size);
              for (int _i7 = 0; _i7 < _list6.size; ++_i7)
              {
                double _elem8; // required
                _elem8 = iprot.readDouble();
                this.doubleAttributeList.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BOOL_ATTRIBUTE_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
              this.boolAttributeList = new ArrayList<Boolean>(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                boolean _elem11; // required
                _elem11 = iprot.readBool();
                this.boolAttributeList.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // STRING_ATTRIBUTE_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.stringAttributeList = new ArrayList<String>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                String _elem14; // required
                _elem14 = iprot.readString();
                this.stringAttributeList.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ARBITRARY_DATA_MAP_MAP
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
              this.arbitraryDataMapMap = new HashMap<Integer,Map<String,String>>(2*_map15.size);
              for (int _i16 = 0; _i16 < _map15.size; ++_i16)
              {
                int _key17; // required
                Map<String,String> _val18; // required
                _key17 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                  _val18 = new HashMap<String,String>(2*_map19.size);
                  for (int _i20 = 0; _i20 < _map19.size; ++_i20)
                  {
                    String _key21; // required
                    String _val22; // required
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    _val18.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                this.arbitraryDataMapMap.put(_key17, _val18);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionId != null) {
      if (isSetSessionId()) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
    }
    if (isSetEventNum()) {
      oprot.writeFieldBegin(EVENT_NUM_FIELD_DESC);
      oprot.writeI32(this.eventNum);
      oprot.writeFieldEnd();
    }
    if (this.intAttributeList != null) {
      if (isSetIntAttributeList()) {
        oprot.writeFieldBegin(INT_ATTRIBUTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.intAttributeList.size()));
          for (int _iter23 : this.intAttributeList)
          {
            oprot.writeI32(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.longAttributeList != null) {
      if (isSetLongAttributeList()) {
        oprot.writeFieldBegin(LONG_ATTRIBUTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, this.longAttributeList.size()));
          for (long _iter24 : this.longAttributeList)
          {
            oprot.writeI64(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.doubleAttributeList != null) {
      if (isSetDoubleAttributeList()) {
        oprot.writeFieldBegin(DOUBLE_ATTRIBUTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, this.doubleAttributeList.size()));
          for (double _iter25 : this.doubleAttributeList)
          {
            oprot.writeDouble(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.boolAttributeList != null) {
      if (isSetBoolAttributeList()) {
        oprot.writeFieldBegin(BOOL_ATTRIBUTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, this.boolAttributeList.size()));
          for (boolean _iter26 : this.boolAttributeList)
          {
            oprot.writeBool(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.stringAttributeList != null) {
      if (isSetStringAttributeList()) {
        oprot.writeFieldBegin(STRING_ATTRIBUTE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.stringAttributeList.size()));
          for (String _iter27 : this.stringAttributeList)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.arbitraryDataMapMap != null) {
      if (isSetArbitraryDataMapMap()) {
        oprot.writeFieldBegin(ARBITRARY_DATA_MAP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, this.arbitraryDataMapMap.size()));
          for (Map.Entry<Integer, Map<String,String>> _iter28 : this.arbitraryDataMapMap.entrySet())
          {
            oprot.writeI32(_iter28.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter28.getValue().size()));
              for (Map.Entry<String, String> _iter29 : _iter28.getValue().entrySet())
              {
                oprot.writeString(_iter29.getKey());
                oprot.writeString(_iter29.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftEventBundle(");
    boolean first = true;

    if (isSetSessionId()) {
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
    }
    if (isSetEventNum()) {
      if (!first) sb.append(", ");
      sb.append("eventNum:");
      sb.append(this.eventNum);
      first = false;
    }
    if (isSetIntAttributeList()) {
      if (!first) sb.append(", ");
      sb.append("intAttributeList:");
      if (this.intAttributeList == null) {
        sb.append("null");
      } else {
        sb.append(this.intAttributeList);
      }
      first = false;
    }
    if (isSetLongAttributeList()) {
      if (!first) sb.append(", ");
      sb.append("longAttributeList:");
      if (this.longAttributeList == null) {
        sb.append("null");
      } else {
        sb.append(this.longAttributeList);
      }
      first = false;
    }
    if (isSetDoubleAttributeList()) {
      if (!first) sb.append(", ");
      sb.append("doubleAttributeList:");
      if (this.doubleAttributeList == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleAttributeList);
      }
      first = false;
    }
    if (isSetBoolAttributeList()) {
      if (!first) sb.append(", ");
      sb.append("boolAttributeList:");
      if (this.boolAttributeList == null) {
        sb.append("null");
      } else {
        sb.append(this.boolAttributeList);
      }
      first = false;
    }
    if (isSetStringAttributeList()) {
      if (!first) sb.append(", ");
      sb.append("stringAttributeList:");
      if (this.stringAttributeList == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAttributeList);
      }
      first = false;
    }
    if (isSetArbitraryDataMapMap()) {
      if (!first) sb.append(", ");
      sb.append("arbitraryDataMapMap:");
      if (this.arbitraryDataMapMap == null) {
        sb.append("null");
      } else {
        sb.append(this.arbitraryDataMapMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

