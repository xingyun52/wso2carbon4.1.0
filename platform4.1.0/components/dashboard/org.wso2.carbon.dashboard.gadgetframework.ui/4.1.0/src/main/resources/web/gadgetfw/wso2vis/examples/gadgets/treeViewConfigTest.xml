<?xml version="1.0" encoding="utf-8" ?>
<!--
 ~ Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<Module>
  <ModulePrefs
            title="Tree View config test"
            height="300"
            description="Request count and fault count aggregated for all server"
            author="Ruwan Janapriya, Lahiru Priyadarshana" author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
            author_location="Colombo, Sri Lanka">
    <Require feature="setprefs"/>
    <Require feature="tabs"/>
    <Require feature="dynamic-height"/>
    <Require feature="views"/>
  </ModulePrefs>
  <UserPref name="interval" display_name="Refresh interval (ms)" default_value="30000" datatype="int"></UserPref>
  <Content type="html" view="default">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
  padding: 3px;
  border: 1px solid #666;
  border-right-width: 2px;
  border-bottom-width: 2px;
  display: none;
  background: #999;
  color: #FFF;
  font: bold 10px Verdana, Arial, sans-serif;
  text-align: left;
  position: absolute;
  z-index: 1000;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/treeview/assets/skins/sam/treeview.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/fonts/fonts-min.css"/>
<div id="servers_disp" style="display:none;height:300px;text-align:center;vertical-align:middle;">
  <div id="tree" style=""></div>
  <div id="servers" style="margin-top:20px"></div>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.interval = prefs.getString("interval");

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
//var dataFilterServers = new wso2vis.f.DataFilter(["level0", "level1"], "@name");
var dataProviderTreeView = new wso2vis.p.ProviderGET("registry/resource/system/gadgets/data/tree_data.xml");
var reqTooltip = false;

var areaChartReqFaults = new wso2vis.s.chart.protovis.AreaChart("servers","Requests/Faults for All Servers","");

if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

var treeView = new wso2vis.s.form.TreeView()
						 .canvas("tree")
                         .dataField(["node"])
                         .nodeLabel(["label"])
                         .nodeValue(["value"])
                         .nodeChildren(["children"]);

treeView.create();

areaChartReqFaults.dataField(["level0", "level1"])
                   .dataValue(["@faults"]) //TODO not using in this gadget
                   .dataLabel(["@name"]) //TODO not using in this gadget
                   .band(10)
                   .xSuffix("s")
                   .xInterval(inte);

areaChartReqFaults.load(300, 220, 10);
areaChartReqFaults.onTooltip = chartToolTip;

dataProviderServers.addDataReceiver(areaChartReqFaults);
dataProviderTreeView.addDataReceiver(treeView);

timer.tick = globalTick;

areaChartReqFaults.populateData = function (thisObject) {
    var _dataField = thisObject.traverseToDataField(thisObject.data, thisObject.dataField());

    var dataGrpCount = 1;

    var aggregatedData = []; //0 reqs, 1 faults
    aggregatedData[0] = 0; aggregatedData[1] = 0; //init

    if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
        for (var i=0; i<dataGrpCount; i++) {
            aggregatedData[0] += parseInt(_dataField[i]["@requests"]);
            aggregatedData[1] += parseInt(_dataField[i]["@faults"]);
        }
    }
    else {
            aggregatedData[0] += parseInt(_dataField["@requests"]);
            aggregatedData[1] += parseInt(_dataField["@faults"]);
    }

    thisObject.formattedData = pv.range(2).map( genDataMap );

    thisObject.x.domain(0, thisObject.band()).range(0,thisObject.width());
    var maxheight = calcMaxHeight();
    if (maxheight < 5) maxheight = 5; // fixing value repeating issue.
    thisObject.y.domain(0, maxheight).range(0, (thisObject.height() * thisObject.titleSpacing()) - 35);
    
    function genDataMap(x) {

        //var valObj = parseInt(thisObject.traverseToDataField(_dataField[x], thisObject.dataValue));
        var valObj = parseInt(aggregatedData[x]);

        if (thisObject.dataHistory[x] === undefined){
            thisObject.dataHistory[x] = new Array();
        }
        thisObject.dataHistory[x].unshift(valObj);

        if(thisObject.dataHistory[x].length > thisObject.band()+1){
            thisObject.dataHistory[x].pop();
        }
        return thisObject.dataHistory[x];
    }

    function calcMaxHeight() {
        
        var totHeights = [];

        for (var k=0; k<thisObject.dataHistory.length; k++) {

            totHeights.push(thisObject.dataHistory[k].max());
        }
        return totHeights.max();
    }
};

areaChartReqFaults.getDataLabel = function (i) {
    return ( i==0 ? "Requests" : "Faults" );
};

var allowId = 2;
var allowParent = "Proxy Services";

treeView.onExpand = function(n) {  
    console.log("restricted node!"); 
};

treeView.onCollapse = function(n) {
    console.log("restricted node!");
};

treeView.onLabelClick = function(n) {
    if( n.parent.label === "Proxy Services" ) {
        console.log(n);
    } else {
        console.log("restricted node!");
    }
};

// Adding Tabs
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 2

function initialize() {
    dataProviderServers.pullDataSync();
    dataProviderTreeView.initialize();
    
    timer.startTimer(); 
    
    drawServersDiagram();
}

function drawServersDiagram() {
    gadgets.window.adjustHeight();
}

function globalTick() {
    dataProviderServers.pullData();
}

function chartToolTip(data) {
    reqTooltip = !reqTooltip;
    return ( reqTooltip == true ? "Requests" : "Faults" );
}

function showHelp() {
    clientSideInclude("disp_help", "registry/resource/system/gadgets/help/allServersReqsFaults.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);		  
</script>
]]>
  
</Content>
  <Content type="html" view="canvas">
    <![CDATA[
    
<script type="text/javascript" src="swfobject1-5/swfobject.js"></script>
<script type="text/javascript" src="encoder-decoder.js"></script>
<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/retrieve-data.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
  padding: 3px;
  border: 1px solid #666;
  border-right-width: 2px;
  border-bottom-width: 2px;
  display: none;
  background: #999;
  color: #FFF;
  font: bold 10px Verdana, Arial, sans-serif;
  text-align: left;
  position: absolute;
  z-index: 1000;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<div id="servers_disp" style="display:none;height:600px;text-align:center;vertical-align:middle;">
  <div id="servers" class="pleaseText" ></div>
</div>
<div id="disp_help" style="display:none;height:600px;">
</div>
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.interval = prefs.getString("interval");

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
//var dataFilterServers = new wso2vis.f.DataFilter(["level0", "level1"], "@name");
var reqTooltip = false;

var areaChartReqFaults = new wso2vis.s.chart.protovis.AreaChart("servers","Requests/Faults for All Servers","");

if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.Timer(inte);

areaChartReqFaults.dataField(["level0", "level1"])
                   .dataValue(["@faults"]) //TODO not using in this gadget
                   .dataLabel(["@name"]) //TODO not using in this gadget
                   .band(10)
                   .xSuffix("s")
                   .xInterval(inte);

areaChartReqFaults.load(800, 520, 10);
areaChartReqFaults.onTooltip = chartToolTip;

dataProviderServers.addDataReceiver(areaChartReqFaults);

timer.tick = globalTick;

areaChartReqFaults.populateData = function (thisObject) {
    var _dataField = thisObject.traverseToDataField(thisObject.data, thisObject.dataField());

    var dataGrpCount = 1;

    var aggregatedData = []; //0 reqs, 1 faults
    aggregatedData[0] = 0; aggregatedData[1] = 0; //init

    if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
        for (var i=0; i<dataGrpCount; i++) {
            aggregatedData[0] += parseInt(_dataField[i]["@requests"]);
            aggregatedData[1] += parseInt(_dataField[i]["@faults"]);
        }
    }
    else {
            aggregatedData[0] += parseInt(_dataField["@requests"]);
            aggregatedData[1] += parseInt(_dataField["@faults"]);
    }

    thisObject.formattedData = pv.range(2).map( genDataMap );

    thisObject.x.domain(0, thisObject.band()).range(0,thisObject.width());
    var maxheight = calcMaxHeight();
    if (maxheight < 5) maxheight = 5; // fixing value repeating issue.
    thisObject.y.domain(0, maxheight).range(0, (thisObject.height() * thisObject.titleSpacing()) - 35);
    
    function genDataMap(x) {

        //var valObj = parseInt(thisObject.traverseToDataField(_dataField[x], thisObject.dataValue));
        var valObj = parseInt(aggregatedData[x]);

        if (thisObject.dataHistory[x] === undefined){
            thisObject.dataHistory[x] = new Array();
        }
        thisObject.dataHistory[x].unshift(valObj);

        if(thisObject.dataHistory[x].length > thisObject.band()+1){
            thisObject.dataHistory[x].pop();
        }
        return thisObject.dataHistory[x];
    }

    function calcMaxHeight() {
        
        var totHeights = [];

        for (var k=0; k<thisObject.dataHistory.length; k++) {

            totHeights.push(thisObject.dataHistory[k].max());
        }
        return totHeights.max();
    }
};

areaChartReqFaults.getDataLabel = function (i) {
    return ( i==0 ? "Requests" : "Faults" );
};

// Adding Tabs
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 2

function initialize() {
    dataProviderServers.pullDataSync();
    
    timer.startTimer(); 
    
    drawServersDiagram();
}

function drawServersDiagram() {
    gadgets.window.adjustHeight();
}

function globalTick() {
    dataProviderServers.pullData();
}

function chartToolTip(data) {
    reqTooltip = !reqTooltip;
    return ( reqTooltip == true ? "Requests" : "Faults" );
}

function showHelp() {
    clientSideInclude("disp_help", "registry/resource/system/gadgets/help/allServersReqsFaults.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);		  
</script>
]]>
  
</Content>
</Module>
