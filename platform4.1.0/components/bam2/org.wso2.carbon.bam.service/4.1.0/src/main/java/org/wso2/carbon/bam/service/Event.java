/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.carbon.bam.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Event implements TBase<Event, Event._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Event");

  private static final TField CORRELATION_FIELD_DESC = new TField("correlation", TType.MAP, (short)1);
  private static final TField META_FIELD_DESC = new TField("meta", TType.MAP, (short)2);
  private static final TField EVENT_FIELD_DESC = new TField("event", TType.MAP, (short)3);

  public Map<String,ByteBuffer> correlation;
  public Map<String,ByteBuffer> meta;
  public Map<String,ByteBuffer> event;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CORRELATION((short)1, "correlation"),
    META((short)2, "meta"),
    EVENT((short)3, "event");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CORRELATION
          return CORRELATION;
        case 2: // META
          return META;
        case 3: // EVENT
          return EVENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CORRELATION, new FieldMetaData("correlation", TFieldRequirementType.OPTIONAL,
        new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.META, new FieldMetaData("meta", TFieldRequirementType.OPTIONAL,
        new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.EVENT, new FieldMetaData("event", TFieldRequirementType.REQUIRED,
        new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Event.class, metaDataMap);
  }

  public Event() {
  }

  public Event(
    Map<String,ByteBuffer> event)
  {
    this();
    this.event = event;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Event(Event other) {
    if (other.isSetCorrelation()) {
      Map<String,ByteBuffer> __this__correlation = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.correlation.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__correlation_copy_key = other_element_key;

        ByteBuffer __this__correlation_copy_value = TBaseHelper.copyBinary(other_element_value);
;

        __this__correlation.put(__this__correlation_copy_key, __this__correlation_copy_value);
      }
      this.correlation = __this__correlation;
    }
    if (other.isSetMeta()) {
      Map<String,ByteBuffer> __this__meta = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.meta.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__meta_copy_key = other_element_key;

        ByteBuffer __this__meta_copy_value = TBaseHelper.copyBinary(other_element_value);
;

        __this__meta.put(__this__meta_copy_key, __this__meta_copy_value);
      }
      this.meta = __this__meta;
    }
    if (other.isSetEvent()) {
      Map<String,ByteBuffer> __this__event = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.event.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__event_copy_key = other_element_key;

        ByteBuffer __this__event_copy_value = TBaseHelper.copyBinary(other_element_value);
;

        __this__event.put(__this__event_copy_key, __this__event_copy_value);
      }
      this.event = __this__event;
    }
  }

  public Event deepCopy() {
    return new Event(this);
  }

  @Override
  public void clear() {
    this.correlation = null;
    this.meta = null;
    this.event = null;
  }

  public int getCorrelationSize() {
    return (this.correlation == null) ? 0 : this.correlation.size();
  }

  public void putToCorrelation(String key, ByteBuffer val) {
    if (this.correlation == null) {
      this.correlation = new HashMap<String,ByteBuffer>();
    }
    this.correlation.put(key, val);
  }

  public Map<String,ByteBuffer> getCorrelation() {
    return this.correlation;
  }

  public Event setCorrelation(Map<String,ByteBuffer> correlation) {
    this.correlation = correlation;
    return this;
  }

  public void unsetCorrelation() {
    this.correlation = null;
  }

  /** Returns true if field correlation is set (has been asigned a value) and false otherwise */
  public boolean isSetCorrelation() {
    return this.correlation != null;
  }

  public void setCorrelationIsSet(boolean value) {
    if (!value) {
      this.correlation = null;
    }
  }

  public int getMetaSize() {
    return (this.meta == null) ? 0 : this.meta.size();
  }

  public void putToMeta(String key, ByteBuffer val) {
    if (this.meta == null) {
      this.meta = new HashMap<String,ByteBuffer>();
    }
    this.meta.put(key, val);
  }

  public Map<String,ByteBuffer> getMeta() {
    return this.meta;
  }

  public Event setMeta(Map<String,ByteBuffer> meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been asigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public int getEventSize() {
    return (this.event == null) ? 0 : this.event.size();
  }

  public void putToEvent(String key, ByteBuffer val) {
    if (this.event == null) {
      this.event = new HashMap<String,ByteBuffer>();
    }
    this.event.put(key, val);
  }

  public Map<String,ByteBuffer> getEvent() {
    return this.event;
  }

  public Event setEvent(Map<String,ByteBuffer> event) {
    this.event = event;
    return this;
  }

  public void unsetEvent() {
    this.event = null;
  }

  /** Returns true if field event is set (has been asigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.event = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CORRELATION:
      if (value == null) {
        unsetCorrelation();
      } else {
        setCorrelation((Map<String,ByteBuffer>)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((Map<String,ByteBuffer>)value);
      }
      break;

    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((Map<String,ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CORRELATION:
      return getCorrelation();

    case META:
      return getMeta();

    case EVENT:
      return getEvent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CORRELATION:
      return isSetCorrelation();
    case META:
      return isSetMeta();
    case EVENT:
      return isSetEvent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Event)
      return this.equals((Event)that);
    return false;
  }

  public boolean equals(Event that) {
    if (that == null)
      return false;

    boolean this_present_correlation = true && this.isSetCorrelation();
    boolean that_present_correlation = true && that.isSetCorrelation();
    if (this_present_correlation || that_present_correlation) {
      if (!(this_present_correlation && that_present_correlation))
        return false;
      if (!this.correlation.equals(that.correlation))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_event = true && this.isSetEvent();
    boolean that_present_event = true && that.isSetEvent();
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (!this.event.equals(that.event))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Event other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Event typedOther = (Event)other;

    lastComparison = Boolean.valueOf(isSetCorrelation()).compareTo(typedOther.isSetCorrelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrelation()) {
      lastComparison = TBaseHelper.compareTo(this.correlation, typedOther.correlation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeta()).compareTo(typedOther.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = TBaseHelper.compareTo(this.meta, typedOther.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = TBaseHelper.compareTo(this.event, typedOther.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CORRELATION
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.correlation = new HashMap<String,ByteBuffer>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                ByteBuffer _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readBinary();
                this.correlation.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // META
          if (field.type == TType.MAP) {
            {
              TMap _map4 = iprot.readMapBegin();
              this.meta = new HashMap<String,ByteBuffer>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                String _key6;
                ByteBuffer _val7;
                _key6 = iprot.readString();
                _val7 = iprot.readBinary();
                this.meta.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EVENT
          if (field.type == TType.MAP) {
            {
              TMap _map8 = iprot.readMapBegin();
              this.event = new HashMap<String,ByteBuffer>(2*_map8.size);
              for (int _i9 = 0; _i9 < _map8.size; ++_i9)
              {
                String _key10;
                ByteBuffer _val11;
                _key10 = iprot.readString();
                _val11 = iprot.readBinary();
                this.event.put(_key10, _val11);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.correlation != null) {
      if (isSetCorrelation()) {
        oprot.writeFieldBegin(CORRELATION_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.correlation.size()));
          for (Map.Entry<String, ByteBuffer> _iter12 : this.correlation.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeBinary(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.meta != null) {
      if (isSetMeta()) {
        oprot.writeFieldBegin(META_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.meta.size()));
          for (Map.Entry<String, ByteBuffer> _iter13 : this.meta.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeBinary(_iter13.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.event != null) {
      oprot.writeFieldBegin(EVENT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.event.size()));
        for (Map.Entry<String, ByteBuffer> _iter14 : this.event.entrySet())
        {
          oprot.writeString(_iter14.getKey());
          oprot.writeBinary(_iter14.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Event(");
    boolean first = true;

    if (isSetCorrelation()) {
      sb.append("correlation:");
      if (this.correlation == null) {
        sb.append("null");
      } else {
        sb.append(this.correlation);
      }
      first = false;
    }
    if (isSetMeta()) {
      if (!first) sb.append(", ");
      sb.append("meta:");
      if (this.meta == null) {
        sb.append("null");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("event:");
    if (this.event == null) {
      sb.append("null");
    } else {
      sb.append(this.event);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (event == null) {
      throw new TProtocolException("Required field 'event' was not present! Struct: " + toString());
    }
  }

}

