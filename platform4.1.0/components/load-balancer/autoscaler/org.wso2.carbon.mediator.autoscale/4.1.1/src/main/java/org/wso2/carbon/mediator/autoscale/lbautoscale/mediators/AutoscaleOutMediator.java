/*
 * Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.wso2.carbon.mediator.autoscale.lbautoscale.mediators;

import org.apache.axis2.context.ConfigurationContext;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.wso2.carbon.mediator.autoscale.lbautoscale.context.AppDomainContext;
import org.wso2.carbon.mediator.autoscale.lbautoscale.util.AutoscaleConstants;

import java.util.Map;

/**
 * This Synapse mediator removes the request token generated by the {@link AutoscaleInMediator}
 * 
 * @see AutoscaleInMediator
 */
public class AutoscaleOutMediator extends AbstractMediator implements ManagedLifecycle {

    public boolean mediate(MessageContext synCtx) {

        log.debug("Mediation started ....... " + AutoscaleOutMediator.class.getName());

        ConfigurationContext configCtx =
            ((Axis2MessageContext) synCtx).getAxis2MessageContext().getConfigurationContext();

        String domain = (String) synCtx.getProperty(AutoscaleConstants.TARGET_DOMAIN);
        // gets the corresponding sub domain
        String subDomain = (String) synCtx.getProperty(AutoscaleConstants.TARGET_SUB_DOMAIN);
        
        String tokenId = (String) synCtx.getProperty(AutoscaleConstants.REQUEST_ID);
        @SuppressWarnings("unchecked")
        Map<String, Map<String, AppDomainContext>> appDomainContexts =
            (Map<String, Map<String, AppDomainContext>>) configCtx.getPropertyNonReplicable(AutoscaleConstants.APP_DOMAIN_CONTEXTS);
        AppDomainContext appDomainContext = null ;
        
        if(appDomainContexts.get(domain) != null){
        	appDomainContext = appDomainContexts.get(domain).get(subDomain);
        }
        
        if (appDomainContext != null) {
            appDomainContext.removeRequestToken(tokenId);
            System.setProperty(AutoscaleConstants.IS_TOUCHED, "true");
        } else {
            log.error("AppDomainContext not found for domain " + domain+" and sub domain : "+subDomain);
        }
        return true;
    }

    @Override
    public void destroy() {
        log.debug("Autoscale out mediator destroyed...");
    }

    @Override
    public void init(SynapseEnvironment arg0) {
        log.debug("Autoscale out mediator started...");
    }
}
