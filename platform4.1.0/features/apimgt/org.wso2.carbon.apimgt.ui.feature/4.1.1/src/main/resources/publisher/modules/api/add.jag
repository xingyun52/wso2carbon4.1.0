<%
var addAPI = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.addAPI(api);
        if (log.isDebugEnabled()) {
            log.debug("addAPI : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var isContextExist = function (context,oldContext) {
    var exists, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        exists = provider.isContextExist(context,oldContext);
        if (log.isDebugEnabled()) {
            log.debug("isContext exist for : " + context + " : " + exists);
        }
        return {
            error:false,
            exist:exists
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var isURLValid = function (type,url) {
    var result, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.isURLValid(type,url);
        if (log.isDebugEnabled()) {
            log.debug("Invoke isURLValid" );
        }
        return {
            error:false,
            response:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var getTiers = function () {
    var tier,tiers,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        tiers = provider.getTiers();
        if (log.isDebugEnabled()) {
            log.debug("getTiers " +  " : " + tiers);
        }

       for (var i = 0; i < tiers.length; i++) {
            tier = tiers[i];
            list.push({
                tierName:tier.tierName,
                tierDescription:tier.tierDescription
            });
        }
        return {
            error:false,
            tiers:list
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};
%>