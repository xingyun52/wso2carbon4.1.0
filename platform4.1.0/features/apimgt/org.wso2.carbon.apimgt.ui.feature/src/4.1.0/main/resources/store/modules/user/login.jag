<%
var login = function (username, password) {
    var result,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();

    result = store.login(username, password);
    if (result.error) {
        if (log.isDebugEnabled()) {
            log.debug("Error while authenticating user : " + username);
        }
        return {
            error:result.error,
            cookie:null,
            message:result.detail
        };
    }
    var subscriber = store.getSubscriber(username);
    if (!subscriber) {
        store.addSubscriber(username);
        subscriber = store.getSubscriber(username);
    }
    cookie = result.sessionId;
    cookie = cookie.split(';')[0];
    session.put("userRoles", result.userRoles);
    return {
        error:false,
        cookie:cookie
    };
};

var loginWithSAMLToken = function (token) {
    var site = require("/site/conf/site.json");
    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);

    var result,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();


    var encodedToken = ssoRelyingParty.xmlEncode(token);
    var xhr = new XMLHttpRequest();
    var endPoint = manager.getHTTPsURL() + "/services/SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);

    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.send(payload);
    var cookie = (xhr.getAllResponseHeaders());

    var cookieString = cookie.split(";")[0].split(":")[1];
    var userName = ssoRelyingParty.getSAMLResponseNameId(token);
    var subscriber = store.getSubscriber(userName);
    if (!subscriber) {
        store.addSubscriber(userName);
        subscriber = store.getSubscriber(userName);
    }
    return {
        error:false,
        username:userName,
        cookie:cookieString
    };
};


var logout = function () {
    //TODO : implement logout
    /*session.put("username", null);
     session.put("cookie", null);*/
    session.remove("userRoles");
    return {
        error:false
    };
};
%>