<%
    var server = request.getParameter('server');
    var service = request.getParameter('service');
    var operation = request.getParameter('opr');
    var time = request.getParameter('t');

    var fromDate = request.getParameter("fromDate");
    var fromTime = request.getParameter("fromTime");
    var toDate = request.getParameter("toDate");
    var toTime = request.getParameter("toTime");

    var respJson;
%>


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<link href="../css/jquery.dataTables.css" type="text/css" rel="stylesheet"/>
<script src="../js/jquery.min.js" type="text/javascript"></script>
<script src="../js/jquery.dataTables.min.js" type="text/javascript"></script>
<link href="../css/bam-dashboard-common-styles.css" type="text/css" rel="stylesheet"/>
</head>
<body>
<div id="errorInfo"></div>

<!--[if lt IE 9]><script language="javascript" type="text/javascript" src="js/excanvas.min.js"></script><![endif]-->
<script lang="javascript" type="text/javascript">
    var isShowingEntries = true;
    var eventsTable, eventTable;

    function toggleView(bamActivityId){
        if(isShowingEntries){
            loadEntryTable(bamActivityId);
            $('#entries').hide();
            $('#entry').show();
            isShowingEntries = false;
        } else {
            $('#entry').hide();
            $('#entries').show();
            isShowingEntries = true;
        }
    }

    function getViaAjax(query, dbType){
        respJson = null;
        $.ajax({
                   url:"dataSource.ajaxProcessor.jag",
                   dataType:'json',
                   type:"POST",
                   async:false,
                   //pass the data
                   data:"query=" + query + "&dbType=" + dbType,
                   //Do not cache the page
                   cache:false,
                   //success
                   success:function (html) {
                       respJson = html;
                   }
               });
    }

    uiViews = {};

    uiViews.entry = {};

    uiViews.entries = {};

    uiViews.entry.getColumnNames = function(columnNames){
        var json = [];
        for (var i = 0; i < columnNames.length; i++) {
            var columnName = columnNames[i];
            json.push({ sTitle : this.resolveColumnNames(columnName)});
        }
        json.push({ sTitle : '' , "bSortable": false, "sClass": "center"});
        uiViews.entry.columnNames = json;
        return json;
    };

    uiViews.entry.resolveColumnNames = function(columnName){
        if(columnName.toUpperCase() == "soapBody".toUpperCase()){
            return "SOAP Body";
        } else if(columnName.toUpperCase() == "soapHeader".toUpperCase()){
            return "SOAP Header";
        } else if(columnName.toUpperCase() == "host".toUpperCase()){
            return "Host Address";
        } else{
            return columnName;
        }

    };

    uiViews.entry.getColumnNameIndex = function(columnName){
        for (var i = 0; i < this.columnNames.length; i++) {
            if(this.columnNames[i].sTitle.toUpperCase() == columnName.toUpperCase()){
                return i;
            }
        }
    };

    uiViews.entry.getRowData = function(rows){
        var json = [];
        var el, s;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            for(var k = 0; k < row.length; k++){
                s = decodeURI(row[k]);
                el = document.createElement("div");
                el.innerText = el.textContent = s;
                s = el.innerHTML;
                /*if(s.substring(0, 4) == "clob" && (k == this.getColumnNameIndex("SOAP Header") || k == this.getColumnNameIndex("SOAP Body"))){
                    s = s.substring(s.indexOf("'")+1, s.length-1);
                }*/
                row[k] = s;
            }
            row[row.length] = "<span><img src=\"../images/details_open.png\" title=\"Explore\"></span>";
            json.push(row);
        }
        return json;
    };

    uiViews.entry.getColumnDefinitions = function(){
        var columnList = uiViews.entry.columnNames;
        var result = [];
        var columnNameIndex = 0;
        for(var i=0; i<columnList.length; i++){
            if(columnList[i].sTitle.toUpperCase() != "SOAP Header".toUpperCase() &&
                columnList[i].sTitle.toUpperCase() != "SOAP Body".toUpperCase() &&
                columnList[i].sTitle.toUpperCase() != "Host Address".toUpperCase() &&
                columnList[i].sTitle.toUpperCase() != "".toUpperCase() ){
                columnNameIndex = parseInt(uiViews.entry.getColumnNameIndex(columnList[i].sTitle));
                result.push(new Object({"bVisible": false, "aTargets": [columnNameIndex] }))
            }
        }
        return result;
    };

    uiViews.entries.getRowData = function(rows){
        var json = [];
        var el, s;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            for(var k = 0; k < row.length; k++){
                s = decodeURI(row[k]);
                el = document.createElement("div");
                el.innerText = el.textContent = s;
                s = el.innerHTML;
                row[k] = s;
            }
            row[row.length] = "<span><img src=\"../images/details_open.png\" title=\"Explore\"></span>";
            json.push(row);
        }
        return json;
    };

    uiViews.entries.getColumnNames = function(columnNames){
        var json = [];
        for (var i = 0; i < columnNames.length; i++) {
            var columnName = columnNames[i];
            json.push({ sTitle : this.resolveColumnNames(columnName), "sClass": "center"});
        }
        json.push({ sTitle : '' , "bSortable": false, "sClass": "center"});
        return json;
    };

    uiViews.entries.resolveColumnNames = function(columnName){
        if(columnName.toUpperCase() == "MESSAGECOUNT".toUpperCase()){
            return "Message Count";
        } else if(columnName.toUpperCase() == "bamActivityID".toUpperCase()){
            return "Activity ID";
        } else{
            return columnName;
        }

    };

    function loadEntriesTable(){
        getViaAjax(generateEntriesQuery(), "RDBMS");

        if(typeof respJson !== 'undefined' && respJson !== null && respJson.Rows.length != 0 && respJson.ColumnNames.length != 0 ){
            $("#entries").html("<div style=\"text-align: center;\"><h2>" + "Activity Summary" + "</h2></div>"
                                       + "" + "<table id=\"entries-table\" style=\"width:100%\"></table>");

            eventsTable = $("#entries-table").dataTable({
                                              "aoColumns" : uiViews.entries.getColumnNames(respJson.ColumnNames),
                                              "aaData" : uiViews.entries.getRowData(respJson.Rows),
                                              /*"aaSorting": [[0, 'asc']],*/
                                              "sPaginationType": "full_numbers"
                                          });
        } else{
            $("#errorInfo").html("<span style='color:#003551;font-weight:100;font-size:16px;'>No data available. Please visit our <a href='http://docs.wso2.org/wiki/display/BAM200/Activity+Monitoring+Toolbox' target='_blank' style='color:#B55B01'>docs</a> to see how to configure activity monitoring</span>")
        }
    }

    function loadEntryTable(bamActivityId){
        getViaAjax(generateEntryQuery(bamActivityId), "RDBMS");

        if(typeof respJson !== 'undefined' && respJson !== null && respJson.Rows.length != 0 && respJson.ColumnNames.length != 0 ){
            $("#entry").html("<div style=\"text-align: center;\"><span><a onclick='toggleView()' href='#'><img src='../images/details_close.png' class='backImage' title='Back to Activities table'></a></span><b id='activityIdDetailsHeader'>" + "Messages with Activity ID : <span id='activityId'>" + bamActivityId + "</span></b></div>"
                                       + "<br/>" + "<table id=\"entry-table\" style=\"width:100%\"></table>");

            eventTable = $("#entry-table").dataTable({
                                            "aoColumns" : uiViews.entry.getColumnNames(respJson.ColumnNames),
                                            "aaData" : uiViews.entry.getRowData(respJson.Rows),
                                            "aoColumnDefs" : uiViews.entry.getColumnDefinitions(),
                                            /*"aoColumnDefs": [
                                                {"bVisible": false, "aTargets": [0] } ,
                                                {"bVisible": false, "aTargets": [3] }
                                            ],*/
                                            "sPaginationType": "full_numbers",
					                        "bAutoWidth": false
                                        });
        } else{
            $("#errorInfo").html("<span style='color:#003551;font-weight:100;font-size:16px;'>No data available. Please visit our <a href='http://docs.wso2.org/wiki/display/BAM200/Activity+Monitoring+Toolbox' target='_blank' style='color:#B55B01'>docs</a> to see how to configure activity monitoring</span>")
        }
    }

    function fnFormatDetails ( oTable, nTr ){
        var aData = oTable.fnGetData( nTr );
        var dateTime = new Date(parseInt(aData[uiViews.entry.getColumnNameIndex("sentTimestamp")]));
        var dateTimeString = '' + (dateTime.getUTCMonth() + 1) + '/' + dateTime.getUTCDate() + '/' +
                             dateTime.getUTCFullYear() + ' ' + dateTime.getUTCHours() + ':' +
                             dateTime.getUTCMinutes() + ':' + dateTime.getUTCSeconds() + ' GMT';
        var sOut = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px; background-color: #4392A7;width:100%;">';
        //sOut += '<tr><td style="width:50px">Row ID:</td><td><span class="extendedValue">' + aData[3] + '</span></td></tr>';
        sOut += '<tr><td style="width:50px">Row ID:</td><td><span class="extendedValue">' + aData[uiViews.entry.getColumnNameIndex("messageRowID")] + '</span></td></tr>';
        sOut += '<tr><td>Sent at:</td><td><span class="extendedValue">' + dateTimeString + '</span></td></tr>';
        sOut += '</table>';
        return sOut;
    }

    $('#entries-table tbody td img').live('click', function () {
        var nTr = this.parentNode.parentNode.parentNode;
        toggleView(nTr.children[1].innerHTML);
    });

    $('#entry-table tbody td img').live('click', function () {
        var nTr = $(this).parents('tr')[0];
        if ( eventTable.fnIsOpen(nTr) ){
            /* This row is already open - close it */
            this.src = "../images/details_open.png";
            this.title = "Explore";
            eventTable.fnClose( nTr );
        }
        else{
            /* Open this row */
            this.src = "../images/details_close.png";
            this.title = "Hide details";
            eventTable.fnOpen( nTr, fnFormatDetails(eventTable, nTr), 'details' );
        }
    } );

    $(document).ready(function () {
        var widthToHeightRatio = 325/250;
        var width = 1000;
        var height = (width/widthToHeightRatio);

        $("#entries").width('auto');
        $("#entries").height('auto');

        $("#entry").width('auto');
        $("#entry").height('auto');

	    loadEntriesTable();

    });

    function generateEntriesQuery(){
        var whereString = '';
        if(generateConstraintTimestamps().from != -1 && generateConstraintTimestamps().to != -1){
            whereString = 'WHERE sentTimestamp > ' + generateConstraintTimestamps().from + ' AND sentTimestamp < ' + generateConstraintTimestamps().to;
        }
        else if(generateConstraintTimestamps().from != -1 && generateConstraintTimestamps().to == -1){
            whereString = 'WHERE sentTimestamp > ' + generateConstraintTimestamps().from;
        }
        else if(generateConstraintTimestamps().from == -1 && generateConstraintTimestamps().to != -1){
            whereString = 'WHERE sentTimestamp < ' + generateConstraintTimestamps().to;
        }
        else{
            whereString = '';
        }
//        return "SELECT DISTINCT bamActivityID, MIN(sentTimestamp) AS FIRSTTIMESTAMP, COUNT(messageRowID) AS MESSAGECOUNT FROM ActivitySummary " + whereString + " GROUP BY bamActivityID";
        return "SELECT DISTINCT bamActivityID, COUNT(messageRowID) AS MESSAGECOUNT FROM ActivitySummary " + whereString + " GROUP BY bamActivityID ORDER BY MESSAGECOUNT";
    }

    function generateEntryQuery(bamActivityId){
        var whereString = '';
        if(generateConstraintTimestamps().from != -1 && generateConstraintTimestamps().to != -1){
            whereString = 'AND sentTimestamp > ' + generateConstraintTimestamps().from + ' AND sentTimestamp < ' + generateConstraintTimestamps().to;
        }
        else if(generateConstraintTimestamps().from != -1 && generateConstraintTimestamps().to == -1){
            whereString = 'AND sentTimestamp > ' + generateConstraintTimestamps().from;
        }
        else if(generateConstraintTimestamps().from == -1 && generateConstraintTimestamps().to != -1){
            whereString = 'AND sentTimestamp < ' + generateConstraintTimestamps().to;
        }
        else{
            whereString = '';
        }
        return "SELECT messageRowID, sentTimestamp, soapHeader, soapBody, host FROM ActivitySummary WHERE bamActivityID='" + bamActivityId + "' " + whereString + " ORDER BY sentTimestamp";
    }

    function generateConstraintTimestamps(){
        var fromDate = '<%=fromDate%>';
        var fromTime = '<%=fromTime%>';
        var toDate = '<%=toDate%>';
        var toTime = '<%=toTime%>';

        var fromTimestamp;
        var toTimestamp;

        if(fromTime != null && fromTime != ''){
            fromTimestamp = getTimestampForDateAndTime(fromDate, fromTime);
        } else {
            fromTimestamp = getTimestampForDateAndTime(fromDate, '00:00am');
        }

        if(toTime != null && toTime != ''){
            toTimestamp = getTimestampForDateAndTime(toDate, toTime);
        } else {
            toTimestamp = getTimestampForDateAndTime(toDate, '11:59pm');
        }

        return {from:fromTimestamp, to:toTimestamp};
    }

    function getTimestampForDateAndTime(date, time){ // in format 10/05/2012 and 2:30am
        if(date != null && date != ''){
            var year = parseInt(removeLeadingZeros(date.split('/')[2]));
            var month = parseInt(removeLeadingZeros(date.split('/')[0])) - 1;
            var day = parseInt(removeLeadingZeros(date.split('/')[1]));
            var hour;
            var minute;
            var timeWithoutLetters;
            timeWithoutLetters = time.substring(0,time.length-2);
            if(time.substring(time.length-2, time.length) == 'am'){
                hour = parseInt(removeLeadingZeros(timeWithoutLetters.split(':')[0]));
            } else if (time.substring(time.length-2, time.length) == 'pm' && timeWithoutLetters.split(':')[0] != '12'){
                hour = parseInt(removeLeadingZeros(timeWithoutLetters.split(':')[0])) + 12;
            } else {
                return -1;
            }
            minute = parseInt(removeLeadingZeros(timeWithoutLetters.split(':')[1]));

            return Date.UTC(year, month, day, hour, minute, 0, 0);
        } else {
            return -1;
        }

    }

    function removeLeadingZeros(numberString){
        var result = numberString.replace(/^[0]+/g,"");
        if(result != ''){
            return result;
        } else {
            return '0';
        }
    }
</script>
<div id="entries" style="width: 400px; height: 250px;"></div>
<div id="entry" style="width: 400px; height: 250px;"></div>


</body>
</html>

