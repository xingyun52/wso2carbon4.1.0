<?xml version="1.0" encoding="utf-8" ?>
<Module>
  <ModulePrefs
  title="Mediation Server - Endpoint - Fault Information"
    height="300"
    description="Service request response fault counts of server"
    author="Ruwan Janapriya, Lahiru Priyadarshana" author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
    author_location="Colombo, Sri Lanka">
    <Require feature="setprefs"/>
    <Require feature="tabs"/>
    <Require feature="dynamic-height"/>
    <Require feature="views"/>
  </ModulePrefs>
  <UserPref name="serverID" display_name="Server to monitor" default_value="" datatype="string"></UserPref>
  <UserPref name="interval" display_name="Refresh interval (ms)" default_value="30000" datatype="int"></UserPref>  
  <Content type="html" view="default">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
  padding: 3px;
  border: 1px solid #666;
  border-right-width: 2px;
  border-bottom-width: 2px;
  display: none;
  background: #999;
  color: #FFF;
  font: bold 10px Verdana, Arial, sans-serif;
  text-align: left;
  position: absolute;
  z-index: 1000;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<div id="servers_disp" style="display:none;height:300px;text-align:center;vertical-align:middle;">
  <div id="servers" class="pleaseText" ></div>
</div>
<div id="endpoint_disp" style='display:none;height:300px;text-align:center;vertical-align:middle;font-size:10px;font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'>
    <div id="endpoints" class="pleaseText" ></div>
</div>
<div id="fault_disp" style='display:none;height:300px;text-align:center;vertical-align:middle;font-size:10px;font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'>
    <div id="faults" class="pleaseText" style="margin-top:20px"></div>
</div>
<div id="disp_config" style="display:none;height:300px;">
  <table class="main-table">
  <tr>
    <td><div id="select_boxes">
      <table align="center">
        <tr>
          <td width="50%"><div style='text-align: right; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> Server :</div></td>
          <td><div id="server_select_box">
             <select id="serverIDs" onchange="refreshDataWithServerID();">
            </select>
          </div></td>
        </tr>
          <tr>
      <td colspan="2">
        <div style='text-align: left; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> </div>                
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <div style='text-align: left; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> Filter what you want to see.. </div>                
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <div id="dial" style='font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'></div>
      </td>
    </tr>
      </table>
    </div></td>
  </tr>
  <tr></tr>
  </table>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>  
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.serverID = prefs.getString("serverID");
wso2vis.environment.serverURL = prefs.getString("serverURL");
wso2vis.environment.endpointName = prefs.getString("endpoint");
wso2vis.environment.selectedTab = prefs.getString("selectedTab");
wso2vis.environment.interval = prefs.getString("interval");

var intialized = false;
var reqTooltip = false;

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";
var url = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsOfServer&serverID=";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
var dataFilterServers = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);
var wedgeChartServers = new wso2vis.s.chart.protovis.WedgeChart("servers", "", "");

wedgeChartServers.dataField(["level0", "level1"])
                 .dataValue(["@requests"])
                 .dataLabel(["@name"])
                 .width(300)
                 .height(300);

wedgeChartServers.load();
wedgeChartServers.onClick = serverOnClick;
wedgeChartServers.onTooltip = serversToolTip;
        
var dataProviderEndpoints = new wso2vis.p.ProviderGET(url + wso2vis.environment.serverID);
var dataProviderEndpointsForSingleEP = new wso2vis.p.ProviderGET(url + wso2vis.environment.serverID);

var dataFilterEndpoints = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);
var dataFilterSingleEndpoint = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);


var wedgeChartEndpoints = new wso2vis.s.chart.protovis.WedgeChart("endpoints",prefs.getString("serverURL"),"");

wedgeChartEndpoints.dataField(["level0", "level1"])
                   .dataValue(["level2", "0", "@count"])
                   .dataLabel(["@name"])
                   .width(300)
                   .height(300);

wedgeChartEndpoints.load();
wedgeChartEndpoints.onClick = endpointOnClick;
wedgeChartEndpoints.onTooltip = endpointToolTip;


if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

var linearChartFaults = new wso2vis.s.chart.protovis.AreaChart("faults",prefs.getString("endpoint"),"");

linearChartFaults.dataField(["level0", "level1"])
                 .dataValue(["level2", "0", "@count"])
                 .dataLabel(["@name"])
                 .band(10)
                 .xSuffix("s")
                 .xInterval(inte)
                 .legend(false);

linearChartFaults.load(300, 220, 10);
linearChartFaults.onTooltip = faultsToolTip;

dataProviderEndpoints.addDataReceiver(dataFilterEndpoints);
dataFilterEndpoints.addDataReceiver(wedgeChartEndpoints);
dataProviderEndpointsForSingleEP.addDataReceiver(dataFilterSingleEndpoint);
dataFilterSingleEndpoint.addDataReceiver(linearChartFaults);

dataProviderServers.addDataReceiver(dataFilterServers);
dataFilterServers.addDataReceiver(wedgeChartServers);

timer.tick = globalTick;
 
/**
* @private
*/
linearChartFaults.populateData = function (thisObject) {
  
    var _dataField = thisObject.traverseToDataField(thisObject.data, thisObject.dataField());

    var dataGrpCount = 1;
    /*if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
    }*/
  
    var aggregatedData = []; //0 reqs, 1 faults
    aggregatedData[0] = 0; aggregatedData[1] = 0; //init

    if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
        for (var i=0; i<dataGrpCount; i++) {
            aggregatedData[0] += parseInt(_dataField[i]["level2"][0]["@count"]);
            aggregatedData[1] += parseInt(_dataField[i]["level2"][1]["@count"]);
        }
    }
    else {
            aggregatedData[0] += parseInt(_dataField["level2"][0]["@count"]);
            aggregatedData[1] += parseInt(_dataField["level2"][1]["@count"]);
    }
  
    thisObject.formattedData = pv.range(2).map(genDataMap);
    thisObject.x.domain(0, thisObject.band()).range(0,thisObject.width());

    var maxheight = calcMaxHeight();

    if (maxheight < 5) maxheight = 5; // fixing value repeating issue.
  
    thisObject.y.domain(0, maxheight).range(0, (thisObject.height() * thisObject.titleSpacing()) - 35);

    thisObject.y.nice();
    
    var maxLabelLength = (maxheight == 0) ? 1 : Math.floor(Math.log(maxheight)/Math.log(10)) + 1; //TODO: maxheight will never become 0. But we check it just to be in the safe side. useless?
    thisObject.vis.left((maxLabelLength*9.5)+10);
  
    function genDataMap(x) {
      /*var rootObj;
        if( _dataField instanceof Array ) {
            rootObj = _dataField[x];
        }
        else {
            rootObj = _dataField;
        }

       var valObj = parseInt(thisObject.traverseToDataField(rootObj, thisObject.dataValue()));*/
        var valObj = parseInt(aggregatedData[x]);

        if (thisObject.dataHistory[x] === undefined){
            thisObject.dataHistory[x] = new Array();
        }

    if (thisObject.dirFromLeft()) {
      thisObject.dataHistory[x].unshift(valObj);

      if(thisObject.dataHistory[x].length > thisObject.band()+1){
        thisObject.dataHistory[x].pop();
      }
    }
    else {
      thisObject.dataHistory[x].push(valObj);
      if(thisObject.dataHistory[x].length > thisObject.band()+1){
        thisObject.dataHistory[x].shift();
      }
    }
      return thisObject.dataHistory[x];
    }

    function calcMaxHeight() {
        var totHeights = [];
        for (var k=0; k<thisObject.dataHistory.length; k++) {
            totHeights.push(thisObject.dataHistory[k].max());
        }
        return totHeights.max();
    }
};

linearChartFaults.getDataLabel = function (i) {
    return ( i==0 ? "Requests" : "Faults" );
};

// Adding Tabs                
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Endpoints", {
    contentContainer: document.getElementById("endpoint_disp"),
    callback: drawEndpointDiagram
    }); // 1
tabs.addTab("Faults", {
    contentContainer: document.getElementById("fault_disp"),
    callback: drawFaultDiagram
    }); // 2           
//tabs.addTab("Configure", {
//    contentContainer: document.getElementById("disp_config"),
//    callback: showConfig
//    }); // 3
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 4

function initialize() {
    wso2vis.environment.serverID = prefs.getString("serverID");
    wso2vis.environment.serverURL = prefs.getString("serverURL");
    wso2vis.environment.endpointName = prefs.getString("endpoint");
    wso2vis.environment.selectedTab = prefs.getString("selectedTab");
    
    dataProviderEndpoints.url = url + wso2vis.environment.serverID;
    dataProviderEndpointsForSingleEP.url = url + wso2vis.environment.serverID;    
    
    if (dataProviderEndpoints.url != url){
        dataProviderEndpoints.pullDataSync();
        dataProviderEndpointsForSingleEP.pullDataSync();    
    }    
    dataProviderServers.pullDataSync();
    
    timer.startTimer();
    
    gadgets.window.adjustHeight(320);
    
    try {
        var tabIndex = parseInt(wso2vis.environment.selectedTab);
        tabs.setSelectedTab(tabIndex);
    }
    catch (err){
        
    }   
    
    intialized = true;          
}

function drawServersDiagram() {
    if (intialized)
        prefs.set("selectedTab", 0);
}

function showConfig() {
    //timer.stopTimer();                                
    //dataFilterDialog.load();
}

function globalTick() {
    if (dataProviderEndpoints.url != url){
        dataProviderEndpoints.pullData();
        dataProviderEndpointsForSingleEP.pullData();
    }
    dataProviderServers.pullData();
}

function endpointOnClick(data) {
    dataFilterSingleEndpoint.filterArray([data["@name"]]);
    wso2vis.environment.endpointName = data["@name"];
                                 
    linearChartFaults.title(wso2vis.environment.endpointName);
    linearChartFaults.clear();

    //dataProviderEndpoints.pullDataSync();
    dataProviderEndpointsForSingleEP.pullDataSync();
    linearChartFaults.title(wso2vis.environment.endpointName);
    tabs.setSelectedTab(2);
}

function drawFaultDiagram() {
    if (wso2vis.environment.endpointName === "") {
        dataFilterSingleEndpoint.filterArray([]);    
    }
    if (intialized) {
        prefs.set("endpoint", wso2vis.environment.endpointName);
        prefs.set("selectedTab", 2);
    }
}

function serverOnClick(data) {
    wso2vis.environment.serverID = data["@id"];
    wso2vis.environment.serverURL = data["@name"];
    
    wedgeChartEndpoints.title(wso2vis.environment.serverURL);

    tabs.setSelectedTab(1);
}

function drawEndpointDiagram() {               
    if (wso2vis.environment.serverID != null && wso2vis.environment.serverID != "" && wso2vis.environment.serverID != undefined) {
        dataProviderEndpoints.url = url + wso2vis.environment.serverID;
        dataProviderEndpoints.pullDataSync();
        dataProviderEndpointsForSingleEP.url = url + wso2vis.environment.serverID;
        dataProviderEndpointsForSingleEP.pullDataSync();
    }
    if (intialized)
    {
        prefs.set("serverID", wso2vis.environment.serverID);
        prefs.set("serverURL", wso2vis.environment.serverURL);
        prefs.set("selectedTab", 1);
    }
}

function endpointToolTip(data) {
    return data["@name"] +" - "+ data["level2"]["0"]["@name"] +": "+ data["level2"]["0"]["@count"] +" , "+ data["level2"]["1"]["@name"] +": "+ data["level2"]["1"]["@count"];
}

function faultsToolTip(data) {
  //return data["@name"];
  //a hack to display requests and faults labels.
  reqTooltip = !reqTooltip;
  return ( reqTooltip == true ? "Requests" : "Faults" );
}

function serversToolTip(data) {
    return data["@name"] +" - Requests: " + data["@requests"] + ", Faults: " + data["@faults"];
}

//-----------------------

function configOnApply(data) {
    // save pref
    if (data != null && data.length > 0) {
        var arr = data[0];
        if (data.length > 1) {
          for (var i = 1; i < data.length; i++) {
            arr += ',' + data[i];
          }
        }
    }
    prefs.set("filteredArray", arr);
    prefs.set("serverID", serverID);
    prefs.set("serverURL", serverURL);
    drawDiagram();            
}

function configOnCancel() {
    drawDiagram();
}

function showHelp() {
    if (intialized)
        prefs.set("selectedTab", 3);
    clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/server-drill-down.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);      
</script>
]]>
</Content>
<Content type="html" view="canvas">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
  padding: 3px;
  border: 1px solid #666;
  border-right-width: 2px;
  border-bottom-width: 2px;
  display: none;
  background: #999;
  color: #FFF;
  font: bold 10px Verdana, Arial, sans-serif;
  text-align: left;
  position: absolute;
  z-index: 1000;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<div id="servers_disp" style="display:none;height:600px;text-align:center;vertical-align:middle;">
  <div id="servers" class="pleaseText" ></div>
</div>
<div id="endpoint_disp" style='display:none;height:600px;text-align:center;vertical-align:middle;font-size:10px;font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'>
    <div id="endpoints" class="pleaseText" ></div>
</div>
<div id="fault_disp" style='display:none;height:600px;text-align:center;vertical-align:middle;font-size:10px;font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'>
    <div id="faults" class="pleaseText" style="margin-top:20px"></div>
</div>
<div id="disp_config" style="display:none;height:600px;">
  <table class="main-table">
  <tr>
    <td><div id="select_boxes">
      <table align="center">
        <tr>
          <td width="50%"><div style='text-align: right; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> Server :</div></td>
          <td><div id="server_select_box">
             <select id="serverIDs" onchange="refreshDataWithServerID();">
            </select>
          </div></td>
        </tr>
          <tr>
      <td colspan="2">
        <div style='text-align: left; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> </div>                
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <div style='text-align: left; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'> Filter what you want to see.. </div>                
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <div id="dial" style='font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'></div>
      </td>
    </tr>
      </table>
    </div></td>
  </tr>
  <tr></tr>
  </table>
</div>
<div id="disp_help" style="display:none;height:600px;">
</div>  
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.serverID = prefs.getString("serverID");
wso2vis.environment.serverURL = prefs.getString("serverURL");
wso2vis.environment.endpointName = prefs.getString("endpoint");
wso2vis.environment.selectedTab = prefs.getString("selectedTab");
wso2vis.environment.interval = prefs.getString("interval");

var intialized = false;
var reqTooltip = false;

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";
var url = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsOfServer&serverID=";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
var dataFilterServers = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);
var wedgeChartServers = new wso2vis.s.chart.protovis.WedgeChart("servers", "", "");

wedgeChartServers.dataField(["level0", "level1"])
                 .dataValue(["@requests"])
                 .dataLabel(["@name"])
                 .width(600)
                 .height(600);

wedgeChartServers.load();
wedgeChartServers.onClick = serverOnClick;
wedgeChartServers.onTooltip = serversToolTip;
        
var dataProviderEndpoints = new wso2vis.p.ProviderGET(url + wso2vis.environment.serverID);
var dataProviderEndpointsForSingleEP = new wso2vis.p.ProviderGET(url + wso2vis.environment.serverID);

var dataFilterEndpoints = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);
var dataFilterSingleEndpoint = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);


var wedgeChartEndpoints = new wso2vis.s.chart.protovis.WedgeChart("endpoints",prefs.getString("serverURL"),"");

wedgeChartEndpoints.dataField(["level0", "level1"])
                   .dataValue(["level2", "0", "@count"])
                   .dataLabel(["@name"])
                   .width(600)
                   .height(600);

wedgeChartEndpoints.load();
wedgeChartEndpoints.onClick = endpointOnClick;
wedgeChartEndpoints.onTooltip = endpointToolTip;


if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

var linearChartFaults = new wso2vis.s.chart.protovis.AreaChart("faults",prefs.getString("endpoint"),"");

linearChartFaults.dataField(["level0", "level1"])
                 .dataValue(["level2", "0", "@count"])
                 .dataLabel(["level2", "1", "@name"])
                 .band(10)
                 .xSuffix("s")
                 .xInterval(inte)
                 .legend(false);

linearChartFaults.load(800, 520, 10);
linearChartFaults.onTooltip = faultsToolTip;

dataProviderEndpoints.addDataReceiver(dataFilterEndpoints);
dataFilterEndpoints.addDataReceiver(wedgeChartEndpoints);
dataProviderEndpointsForSingleEP.addDataReceiver(dataFilterSingleEndpoint);
dataFilterSingleEndpoint.addDataReceiver(linearChartFaults);

dataProviderServers.addDataReceiver(dataFilterServers);
dataFilterServers.addDataReceiver(wedgeChartServers);

timer.tick = globalTick;
  
/**
* @private
*/
linearChartFaults.populateData = function (thisObject) {
  
    var _dataField = thisObject.traverseToDataField(thisObject.data, thisObject.dataField());

    var dataGrpCount = 1;
    /*if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
    }*/
  
    var aggregatedData = []; //0 reqs, 1 faults
    aggregatedData[0] = 0; aggregatedData[1] = 0; //init

    if( _dataField instanceof Array ) {
        dataGrpCount = _dataField.length;
        for (var i=0; i<dataGrpCount; i++) {
            aggregatedData[0] += parseInt(_dataField[i]["level2"][0]["@count"]);
            aggregatedData[1] += parseInt(_dataField[i]["level2"][1]["@count"]);
        }
    }
    else {
            aggregatedData[0] += parseInt(_dataField["level2"][0]["@count"]);
            aggregatedData[1] += parseInt(_dataField["level2"][1]["@count"]);
    }
  
    thisObject.formattedData = pv.range(2).map(genDataMap);
    thisObject.x.domain(0, thisObject.band()).range(0,thisObject.width());

    var maxheight = calcMaxHeight();

    if (maxheight < 5) maxheight = 5; // fixing value repeating issue.
  
    thisObject.y.domain(0, maxheight).range(0, (thisObject.height() * thisObject.titleSpacing()) - 35);

    thisObject.y.nice();
    
    var maxLabelLength = (maxheight == 0) ? 1 : Math.floor(Math.log(maxheight)/Math.log(10)) + 1; //TODO: maxheight will never become 0. But we check it just to be in the safe side. useless?
    thisObject.vis.left((maxLabelLength*9.5)+10);
  
    function genDataMap(x) {
      /*var rootObj;
        if( _dataField instanceof Array ) {
            rootObj = _dataField[x];
        }
        else {
            rootObj = _dataField;
        }

       var valObj = parseInt(thisObject.traverseToDataField(rootObj, thisObject.dataValue()));*/
        var valObj = parseInt(aggregatedData[x]);

        if (thisObject.dataHistory[x] === undefined){
            thisObject.dataHistory[x] = new Array();
        }

    if (thisObject.dirFromLeft()) {
      thisObject.dataHistory[x].unshift(valObj);

      if(thisObject.dataHistory[x].length > thisObject.band()+1){
        thisObject.dataHistory[x].pop();
      }
    }
    else {
      thisObject.dataHistory[x].push(valObj);
      if(thisObject.dataHistory[x].length > thisObject.band()+1){
        thisObject.dataHistory[x].shift();
      }
    }
      return thisObject.dataHistory[x];
    }

    function calcMaxHeight() {
        var totHeights = [];
        for (var k=0; k<thisObject.dataHistory.length; k++) {
            totHeights.push(thisObject.dataHistory[k].max());
        }
        return totHeights.max();
    }
};

linearChartFaults.getDataLabel = function (i) {
    return ( i==0 ? "Requests" : "Faults" );
};

// Adding Tabs                
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Endpoints", {
    contentContainer: document.getElementById("endpoint_disp"),
    callback: drawEndpointDiagram
    }); // 1
tabs.addTab("Faults", {
    contentContainer: document.getElementById("fault_disp"),
    callback: drawFaultDiagram
    }); // 2           
//tabs.addTab("Configure", {
//    contentContainer: document.getElementById("disp_config"),
//    callback: showConfig
//    }); // 3
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 4

function initialize() {
    wso2vis.environment.serverID = prefs.getString("serverID");
    wso2vis.environment.serverURL = prefs.getString("serverURL");
    wso2vis.environment.endpointName = prefs.getString("endpoint");
    wso2vis.environment.selectedTab = prefs.getString("selectedTab");
    
    dataProviderEndpoints.url = url + wso2vis.environment.serverID;
    dataProviderEndpointsForSingleEP.url = url + wso2vis.environment.serverID;    
    
    if (dataProviderEndpoints.url != url){
        dataProviderEndpoints.pullDataSync();
        dataProviderEndpointsForSingleEP.pullDataSync();    
    }    
    dataProviderServers.pullDataSync();
    
    timer.startTimer();
    
    gadgets.window.adjustHeight(600);
    
    try {
        var tabIndex = parseInt(wso2vis.environment.selectedTab);
        tabs.setSelectedTab(tabIndex);
    }
    catch (err){
        
    }   
    
    intialized = true;          
}

function drawServersDiagram() {
    if (intialized)
        prefs.set("selectedTab", 0);
}

function showConfig() {
    //timer.stopTimer();                                
    //dataFilterDialog.load();
}

function globalTick() {
    if (dataProviderEndpoints.url != url){
        dataProviderEndpoints.pullData();
        dataProviderEndpointsForSingleEP.pullData();
    }
    dataProviderServers.pullData();
}

function endpointOnClick(data) {
    dataFilterSingleEndpoint.filterArray([data["@name"]]);
    wso2vis.environment.endpointName = data["@name"];
                                 
    linearChartFaults.title(wso2vis.environment.endpointName);
    linearChartFaults.clear();

    //dataProviderEndpoints.pullDataSync();
    dataProviderEndpointsForSingleEP.pullDataSync();
    linearChartFaults.title(wso2vis.environment.endpointName);
    tabs.setSelectedTab(2);
}

function drawFaultDiagram() {
    if (wso2vis.environment.endpointName === "") {
        dataFilterSingleEndpoint.filterArray([]);    
    }
    if (intialized) {
        prefs.set("endpoint", wso2vis.environment.endpointName);
        prefs.set("selectedTab", 2);
    }
}

function serverOnClick(data) {
    wso2vis.environment.serverID = data["@id"];
    wso2vis.environment.serverURL = data["@name"];
    
    wedgeChartEndpoints.title(wso2vis.environment.serverURL);

    tabs.setSelectedTab(1);
}

function drawEndpointDiagram() {               
    if (wso2vis.environment.serverID != null && wso2vis.environment.serverID != "" && wso2vis.environment.serverID != undefined) {
        dataProviderEndpoints.url = url + wso2vis.environment.serverID;
        dataProviderEndpoints.pullDataSync();
        dataProviderEndpointsForSingleEP.url = url + wso2vis.environment.serverID;
        dataProviderEndpointsForSingleEP.pullDataSync();
    }
    if (intialized)
    {
        prefs.set("serverID", wso2vis.environment.serverID);
        prefs.set("serverURL", wso2vis.environment.serverURL);
        prefs.set("selectedTab", 1);
    }
}

function endpointToolTip(data) {
    return data["@name"] +" - "+ data["level2"]["0"]["@name"] +": "+ data["level2"]["0"]["@count"] +" , "+ data["level2"]["1"]["@name"] +": "+ data["level2"]["1"]["@count"];
}

function faultsToolTip(data) {
  //return data["@name"];
  //a hack to display requests and faults labels.
  reqTooltip = !reqTooltip;
  return ( reqTooltip == true ? "Requests" : "Faults" );
}

function serversToolTip(data) {
    return data["@name"] +" - Requests: " + data["@requests"] + ", Faults: " + data["@faults"];
}

//-----------------------

function configOnApply(data) {
    // save pref
    if (data != null && data.length > 0) {
        var arr = data[0];
        if (data.length > 1) {
          for (var i = 1; i < data.length; i++) {
            arr += ',' + data[i];
          }
        }
    }
    prefs.set("filteredArray", arr);
    prefs.set("serverID", serverID);
    prefs.set("serverURL", serverURL);
    drawDiagram();            
}

function configOnCancel() {
    drawDiagram();
}

function showHelp() {
    if (intialized)
        prefs.set("selectedTab", 3);
    clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/server-drill-down.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);      
</script>
]]>
</Content>
</Module>
