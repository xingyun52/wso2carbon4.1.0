<?xml version="1.0" encoding="utf-8" ?>
<Module>
  <ModulePrefs
	title="Fault Types - Fault Information"
    height="300"
    description="Fault Count for Different Fault Categories"
    author="Ruwan Janapriya, Lahiru Priyadarshana" author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
    author_location="Colombo, Sri Lanka">
    <Require feature="setprefs"/>
    <Require feature="tabs"/>
    <Require feature="dynamic-height"/>
    <Require feature="views"/>
  </ModulePrefs>
  <!--<UserPref name="serverID" display_name="Server to monitor" default_value="" datatype="string"></UserPref>-->
  <UserPref name="interval" display_name="Refresh interval (ms)" default_value="30000" datatype="int"></UserPref>
  <Content type="html" view="default">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
  padding: 3px;
  border: 1px solid #666;
  border-right-width: 2px;
  border-bottom-width: 2px;
  display: none;
  background: #999;
  color: #FFF;
  font: bold 10px Verdana, Arial, sans-serif;
  text-align: left;
  position: absolute;
  z-index: 1000;
}
div#filter form table {
  width: 20% !important;
  margin-left: auto;
  margin-right: auto;
  margin-top: 50px;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<div id="faults_disp" style="display:none;height:300px;text-align:center;vertical-align:middle;">
  <div id="server_select_box" style="margin-top:10px;">
    <select id="serverIDs" onchange="refreshDataWithServerID();"></select>
  </div>
  <div id="faults" class="pleaseText" ></div>
</div>
<div id="fault_disp" style='display:none;height:300px;text-align:center;vertical-align:middle;font-size:10px;font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unicode","Verdana","Sans-serif","trebuchet ms" !important;'>
    <div id="fault" class="pleaseText" ></div>
</div>
<div id="disp_config" style="display:none;height:300px;">
    <div id="filter"></div>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>	
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.serverID = prefs.getString("serverID");
wso2vis.environment.serverURL = prefs.getString("serverURL");
wso2vis.environment.faultName = prefs.getString("fault");
wso2vis.environment.faultFilterArray = prefs.getArray("faultFilterArray");
wso2vis.environment.selectedTab = prefs.getString("selectedTab");
wso2vis.environment.interval = prefs.getString("interval");

var intialized = false;

//var serversUrl = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";
var url = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMediationRealTimeFaultStat_temp&categoryType=Server&serverID=0&mediationName=aa&cacheId=bb";

//var dataProviderServers = new wso2vis.p.ProviderGET(serversUrl);
var dataProvider = new wso2vis.p.ProviderGET(url);
//var dataFilter = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"]);
var dataFilter = new wso2vis.f.form.FilterForm()
                            .canvas("filter")
                            .dataField(["level0", "level1"])
                            .dataLabel(["@name"]);
var errorFilter = new wso2vis.f.BasicFilter(["level0", "level1"], ["@name"], ["Fault 01"]); //TODO set FilterArray

var errorLineChart;
var isFilterFormLoaded = false;

function globalTick() {
    var serverListArray = getServerList().split("|");
    if (isServerExists(serverListArray, prefs.getString("serverID"))) {
        var newurl = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMediationRealTimeFaultStat_temp&categoryType=Server&serverID="+prefs.getString("serverID")+"&mediationName=aa&cacheId=bb";
        dataProvider.url = newurl;
        if (!isFilterFormLoaded) {
            dataProvider.pullDataSync();
            dataFilter.load();
            isFilterFormLoaded = true;
        }
        else {
            dataProvider.pullData();
        }
    }
}

if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

/*var serviceFilter = new wso2vis.f.form.Select()
                             .canvas("server_select")
                             .dataField(["level0", "level1"])
                             .dataLabel(["@name"])
                             .defaultText("- Select Server -");

var errorsColChart = new wso2vis.s.chart.protovis.ColumnChart("faults","","");
errorsColChart.dataField(["level0", "level1"])
            .dataValue(["stats", "@count"])
            .dataLabel(["@name"])
            .width(350)
            .height(260)
            .paddingTop(25)
            .paddingBottom(50)
            .paddingLeft(35)
            .paddingRight(5);
errorsColChart.onTooltip = errorsColChartTooltip;
//errorsColChart.onClick = errorsColChartClick;
errorsColChart.load();

errorLineChart = new wso2vis.s.chart.protovis.LineChart("fault","Fault Count","");
errorLineChart.dataField(["level0", "level1"])
    .dataValue(["stat", "@count"])
    .dataLabel(["@name"])
    .width(350)
    .height(260)
    .paddingLeft(35)
    .band(10)
    .legend(false)
    .marks(true)
    .xSuffix("s");
errorLineChart.onTooltip = errorLineChartTooltip;
errorLineChart.load();

dataProvider.addDataReceiver(dataFilter);
dataFilter.addDataReceiver(errorsColChart);
//dataFilter.addDataReceiver(errorFilter);
dataFilter.addDataReceiver(errorLineChart);

//dataProviderServers.addDataReceiver(serviceFilter);

timer.tick = globalTick;

// Adding Tabs                
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Fault Types", {
    contentContainer: document.getElementById("faults_disp"),
    callback: drawFaultsDiagram
    }); // 0
tabs.addTab("Faults", {
    contentContainer: document.getElementById("fault_disp"),
    callback: drawFaultDiagram
    }); // 1
tabs.addTab("Filter", {
    contentContainer: document.getElementById("disp_config"),
    callback: showConfig
    }); // 2
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 3

function initialize() {
    wso2vis.environment.serverID = prefs.getString("serverID");
    wso2vis.environment.serverURL = prefs.getString("serverURL");
    wso2vis.environment.faultName = prefs.getString("fault");
    wso2vis.environment.faultFilterArray = prefs.getArray("faultFilterArray");
    wso2vis.environment.selectedTab = prefs.getString("selectedTab");
    
    loadServerList();
    
    var serverListArray = getServerList().split("|");
    if (isServerExists(serverListArray, prefs.getString("serverID"))) {
        var newurl = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMediationRealTimeFaultStat_temp&categoryType=Server&serverID="+prefs.getString("serverID")+"&mediationName=aa&cacheId=bb";
        dataProvider.url = newurl;
        dataProvider.initialize();
        //dataProviderServers.initialize();
        //serviceFilter.load();
        dataFilter.load();
        isFilterFormLoaded = true;
    }
        
    timer.startTimer();

    gadgets.window.adjustHeight(320);
    
    try {
        var tabIndex = parseInt(wso2vis.environment.selectedTab);
        tabs.setSelectedTab(tabIndex);
    }
    catch (err){

    }
    intialized = true;          
}

function drawFaultsDiagram() {
    if (intialized)
        prefs.set("selectedTab", 0);
}

function drawFaultDiagram() {
    if (wso2vis.environment.faultName === "") {
        errorFilter.filterArray([]);
        errorLineChart.title("Fault Count for "+wso2vis.environment.faultName);
    }
    if (intialized) {
        prefs.set("fault", wso2vis.environment.faultName);
        prefs.set("selectedTab", 1);
    }
}

function errorsColChartTooltip(data) {
    return data["@name"] + " - Count: "+ data["stat"]["@count"];
}

/*function errorsColChartClick(data, index) {console.log(data);
    errorLineChart.clear();
    errorLineChart.title("Fault Count for "+data["@name"]);
    errorFilter.filterArray([data["@name"]]);
    wso2vis.environment.faultName = data["@name"];
    tabs.setSelectedTab(1);
    dataProvider.pullData();
}

wso2vis.fn.selectFormChanged = function(i) {
    elem = document.getElementById("wso2visSelect_"+i);
    var server = elem[elem.selectedIndex].text;
    dataProvider.url = "carbon/gauges/gadgets/data/flashdata-ajaxprocessor.jsp?funcName=faults-"+server;
    dataProvider.pullDataSync();
};*/

function errorLineChartTooltip(data) {
    return data["@name"];
}

function showConfig() {
    //timer.stopTimer();
    //dataFilterDialog.load();
}

FilterFormButtonApply = function(id) {
    //var basicDataFilter = wso2vis.fn.getFilterFromID(id);
    var list2Element = document.getElementById("FilterFormList2_" + id);
    var i = 0;
    dataFilter.filterArray([]);
    for (i = 0; i < list2Element.length; i++) {
        dataFilter.filterArray().push(list2Element.options[i].text);
    }
    errorLineChart.clear();
    dataProvider.pullDataSync();
};

//-----------------------

function configOnApply(data) {
    // save pref
    if (data != null && data.length > 0) {
        var arr = data[0];
        if (data.length > 1) {
          for (var i = 1; i < data.length; i++) {
            arr += ',' + data[i];
          }
        }
    }
    prefs.set("filteredArray", arr);
    prefs.set("serverID", serverID);
    prefs.set("serverURL", serverURL);
    drawDiagram();
}

function configOnCancel() {
    drawDiagram();
}

function showHelp() {
    if (intialized)
        prefs.set("selectedTab", 2);
    clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/error-types-gadget.html");
}

function refreshDataWithServerID() {
    serverID =
    document.getElementById('serverIDs')[document.getElementById('serverIDs').selectedIndex].value;
    serverURL =
    document.getElementById('serverIDs')[document.getElementById('serverIDs').selectedIndex].text;

    if ((serverID != "") && (serverID != "No Servers Configured")) {
        prefs.set("serverID", serverID);
        prefs.set("serverURL", serverURL);
    }
    var newurl = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMediationRealTimeFaultStat_temp&categoryType=Server&serverID="+prefs.getString("serverID")+"&mediationName=aa&cacheId=bb";
    dataProvider.url = newurl;
    dataProvider.pullDataSync();

    if (!isFilterFormLoaded) {
        dataFilter.load();
        isFilterFormLoaded = true;
    }
}


function loadServerList() {
    var serverListArray = getServerList().split("|");

    // Cleaning up the existing select box
    var selectBoxEl = document.getElementById("server_select_box");
    selectBoxEl.innerHTML = "";

    var newServerSelectHTML = '<select id="serverIDs" onchange="refreshDataWithServerID();"><option value="">--Server--</option>';
    for (var x = 0; x < serverListArray.length; x++) {
      var _tokens = serverListArray[x].split(",");
      if( _tokens[1] === prefs.getString("serverURL") ) {
          newServerSelectHTML += '<option value="' + _tokens[0] + '" selected="selected">' + _tokens[1] + '</option>';
      }
      else {
          newServerSelectHTML += '<option value="' + _tokens[0] + '">' + _tokens[1] + '</option>';
      }
    }
    newServerSelectHTML += '</select>';

    // Adding the new select to div
    selectBoxEl.innerHTML = newServerSelectHTML;

    if (!isServerExists(serverListArray, prefs.getString("serverID"))) {
        prefs.set("serverID", "");
    }
}

function getServerList() {
    var xmlHttpReq = createXmlHttpRequest();
    var serverList = [];
    // Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getServerList" +
                               "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            return removeCarriageReturns(xmlHttpReq.responseText);
        }

        return false;
    }
    return false;
}

function isServerExists(serverListArray, monitoredServer) {
    for (var x = 0; x < serverListArray.length; x++) {

        var _tokens = serverListArray[x].split(",");

        if (_tokens[0] == monitoredServer) {
            return true
        }
    }

    return false;
}

function createXmlHttpRequest() {
    var request;

                // Lets try using ActiveX to instantiate the XMLHttpRequest
				// object
    try {
        request = new ActiveXObject("Microsoft.XMLHTTP");
    } catch(ex1) {
        try {
            request = new ActiveXObject("Msxml2.XMLHTTP");
        } catch(ex2) {
            request = null;
        }
    }

                // If the previous didn't work, lets check if the browser natively support XMLHttpRequest
    if (!request  & typeof XMLHttpRequest != "undefined") {
        //The browser does, so lets instantiate the object
        request = new XMLHttpRequest();
    }

    return request;
}

function removeCarriageReturns(string) {
    return string.replace(/\n/g, "");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);
</script>
]]>
</Content>
</Module>
