<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="Activity Filter" height="500" width="500"
		description="Activity Filter" author="WSO2"
		author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
		author_location="Colombo, Sri Lanka">
		<Require feature="setprefs" />
		<Require feature="tabs" />
		<Require feature="dynamic-height" />
		<Require feature="views" />
	</ModulePrefs>
	<UserPref name="activityID" display_name="Activity Name"
		default_value="" datatype="string"></UserPref>
	<Content type="html" view="default">
        <![CDATA[


        <style>
            table.activity {
                border-collapse: collapse;
                border-top: solid 1px #cbb3b3;
                border-left: solid 1px #cbb3b3;
                font-family: "Trebuchet MS", Verdana, sans-serif;
                font-size: 11px;
                width:100%;
            }

            table.activity th {
                background-color: #ddd;
                border-right: solid 1px #666666;
                border-bottom: solid 1px #d6d6d6;
                text-align: left;
                vertical-align: top;
                color: #666;
                font-size: 11px;
                font-weight: bold;
            }
            table.activity th.lastColumn{
                border-right: solid 1px #d6d6d6 !important;
            }

            table.activity td {
                border-right: solid 1px #d6d6d6;
                border-bottom: solid 1px #d6d6d6;
                background-color: #fdfdfd;
                vertical-align: top;
                color: #444444;

            }

            table.activity th, table.activity td {
                padding: 5px 3px 5px 5px;
            }

            table.activity a {
                color: #456d84;
            }
            table.activity a:visited {
                color: #333333;
            }

            ul {
                border: 0;
                margin: 0;
                padding: 0;
            }


            .leftColumn {
                width: 170px;
            }

            .leftTab {
                padding-left: 20px !important;
            }

            .special td {
                background-color: #eee !important;
            }

            .configTable {
               width: 100%;
               border-collapse: collapse;
            }

            .configTable td {
                background-color: #f5f5f5;
		
            }
		
	    .configTableSection {
		margin-left:20px; 
		margin-right:2px;
                border-collapse: collapse;
            }

            .configTableSection td {
                padding-bottom: 5px;
                background-color: #f5f5f5;
		width: 170px !important;
            }

            .subrowHeadding {
                border-bottom: 1px solid #CCCCCC;
                font-size: 12px;
                font-weight: bold;
                line-height: 30px;
                padding-left: 10px;
            }
            .selectedRow td {
                font-weight: bold;
            }

            .parentRow td {
                background-color: #abc8d5 !important;
            }

            .childRow td {
                background-color: #f2fff5 !important;
            }

            .errorRow td {
                background-color: #ffbfb6 !important;
                color: #e00700 !important;
            }

            .gotoOtherTab{
                background:transparent url(images/gototab.png) no-repeat left top;
                text-indent:20px;
                padding-left:20px;
                line-height:40px;
                font-size:12px;
                font-weight:bold;
                color:#456d84;
            }

	    #tnt_pagination {
		display:block;
		text-align:left;
		height:22px;
		line-height:21px;
		clear:both;
		padding-top:3px;
		font-family:Arial, Helvetica, sans-serif;
		font-size:12px;
		font-weight:normal;
	}

	#tnt_pagination a:link, #tnt_pagination a:visited{
		padding:7px;
		padding-top:2px;
		padding-bottom:2px;
		border:1px solid #EBEBEB;
		margin-left:10px;
		text-decoration:none;
		background-color:#F5F5F5;
		color:#purple;
		width:22px;
		font-weight:normal;
	}

	#tnt_pagination a:hover {
		background-color:#DDEEFF;
		border:1px solid #BBDDFF;
		color:#0072BC;	
	}

	#tnt_pagination span:current {
		background-color:#DDEEFF;
		border:1px solid #BBDDFF;
		color:#red;	
	}

	#tnt_pagination .active_tnt_link {
		padding:7px;
		padding-top:2px;
		padding-bottom:2px;
		border:1px solid #BBDDFF;
		margin-left:10px;
		text-decoration:none;
		background-color:#DDEEFF;
		color:#red;
		cursor:default;
	}

	#tnt_pagination .disabled_tnt_pagination {
		padding:7px;
		padding-top:2px;
		padding-bottom:2px;
		border:1px solid #EBEBEB;
		margin-left:10px;
		text-decoration:none;
		background-color:#F5F5F5;
		color:#D7D7D7;
		cursor:default;
	}

        </style>


<script type="text/javascript" src="swfobject1-5/swfobject.js"></script>
<script type="text/javascript" src="encoder-decoder.js"></script>
<script type="text/javascript" src="js/jquery-1.4.4.min.js"></script>
<script type="text/javascript" src="js/wso2.js"></script>
<script type="text/javascript" src="js/wso2.xml.js"></script>
<script type="text/javascript" src="js/wso2.xml.axiom.js"></script>
<script type="text/javascript" src="js/retrieve-data.js"></script>
<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/Xml-display.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<script type="text/javascript" src="js/CalendarControl.js"></script>
<link rel="stylesheet" type="text/css" href="css/gadgets.css" />
<link rel="stylesheet" type="text/css" href="css/help.css" />
<link rel="stylesheet" type="text/css" href="css/Xml-display.css" />
<link rel="stylesheet" type="text/css" href="css/3rdparty/calendar.css" />
<link type="text/css" rel="stylesheet" href="css/DateRange.css" />
<link rel="stylesheet" type="text/css" href="css/CalendarControl.css" />


<div id="disp_config" style="display:none;height:300px;">
	<table class="configTable">
		<tr id="activity_time_range_selector">
			<td>
				<div class="subrowHeadding">Received Between</div>
				<table class="configTableSection">
					<tr>
						<td class="leftColumn">
							<font size="2px">Start Time: </font>
						</td>
						<td>
							<font size="2px">End Time: </font>
						</td>
						
					</tr>
					<tr>
						<td>
							<input id="startTime" type="text" onfocus="showCalendarControl(this)">
						</td>
						<td>
							<input id="endTime" type="text" onfocus="showCalendarControl(this)">
						</td>
					</tr>
				</table>
			</td>
		</tr>
		<tr>
			<td>
				<div class="subrowHeadding">Server Details</div>
				<table class="configTableSection">
					<tr>
						<td class="leftColumn">
							<font size="2px">Server: </font>
						</td>
					</tr>
					<tr>
						<td>
						            <div id="server_select_box">
						                <select id="serverList" onmousedown="loadServerList();">
						                	<option value="">--Server--</option>
						                </select>
						             </div>
						</td>
					</tr>
					<tr>
						<td>
							<font size="2px">Service: </font>
						</td>
						
						<td class="leftColumn">
							<font size="2px">Operation: </font>
						</td>
						<td>
							<font size="2px">Activity: </font>
						</td>
						
					</tr>
					<tr>
						<td>
							<div id="service_select_box">
								<select id="services" onmousedown="loadServices();">
									<option value="">--Service--</option>
								</select>
							</div>
						</td>
						<td>
							<div id="endpoint_select_box">
								<select id="endpoints" onmousedown="loadOperationNameList();">
									<option value="">--Operation--</option>
								</select>
							</div>
						</td>
						<td>
							<div id="activity_select_box">
								<select id="activityTypeList" onmousedown="loadActivityTypes();">
									<option value="">--Activity--</option>
								</select>
							</div>
						</td>
					</tr>
					
				</table>
			</td>
		</tr>
		<tr>
			<td>
				<div class="subrowHeadding">Message Details</div>
				<table class="configTableSection">
					<tr>
						<td class="leftColumn">
							<font size="2px">Message Type: </font>
						</td>
						<td class="leftColumn">
							<font size="2px">Message GUID: </font>
						</td>
						
					</tr>
					<tr>
						<td>
							<input id="messageTypeList" type="text" > 
						</td>
						<td>
							<input id="messageGUID" type="text" >
						</td>
					</tr>
				</table>
			</td>
		</tr>
		<tr>
			<td>
				<table class="configTableSection">
					<tr>
						<td class="leftColumn">
							<font size="2px">Message Status: </font>
						</td>
						
						<td>
							<font size="2px">Message Format: </font>
						</td>
						<td>
							<font size="2px">Message Direction: </font>
						</td>
					</tr><tr>
						<td>
							<select id="messageStatusList" onmousedown="drawDiagram();">
								<option value="">--Message Status--</option>
								<option value='Success'>Success</option>
								<option value='Fail'>Fail</option>
							</select>
						</td>
						<td>
							<select id="messageFormatList" onmousedown="drawDiagram();">
								<option value="">--Message Format--</option>
								<option value='IDOC'>IDOC</option>
								<option value='RFC'>RFC</option>
							</select>
						</td>
						<td>
							<select id="messageDirectionList" onmousedown="drawDiagram();">
								<option value="">--Message Direction--</option>
								<option value='Request'>Request</option>
								<option value='Response'>Response</option>
							</select> 

						</td>
					</tr>
				</table>
			</td>
		</tr>
		<tr>
			<td>
				<div class="subrowHeadding">Error Type</div>
				<table class="configTableSection">
					<tr>
						<td class="leftColumn">
							<font size="2px">Application Failure: </font>
						</td>
						<td>
						     <input id="applicationfailure" type="text" size="75">
						</td>
					</tr><tr>
						<td>
							<font size="2px">Technical Failure: </font>
						</td>	
						<td>
							<input id="technicalFailure" type="text" size="75">
						</td>
					</tr>
				</table>
			</td>
		</tr>
        </table>
		
	<a href="javascript:changeTab()" class="gotoOtherTab">XPath Filter</a> <br/>	
	<button type="button" onclick="loadMessages();">View Messages</button>	
	<button type="button" onclick="clearConfig();">Clear</button>
        </div>
<div id="xpath_config" style="display: none; height: 495px;">
<div class="subrowHeadding">Xpath</div>
<table class="configTable">
	<tr>
		<td class="leftColumn" valign="top"><font size="2px"">Namespace Definitions:</font></td>
		<td>
			 <table id="nsTable" class="activity">
                <thead>
                <tr>
                    <th>Prefix</th>
                    <th>URI</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td><input type="text" id="pre1" size=75/></td>
                    <td><input type="text" id="url1" size=75/></td>
                    <td><a href="javascript:deleteRow('1')"><img src="images/delete.gif"/></a></td>
                </tr>
                </tbody>
            </table>
		</td>
		<td valign="top"><a href="#" onclick="addNamespace();"><img src="images/add.gif"/></a></td>

	</tr>
	<tr>
		<td><font size="2px">XPath Key: </font></td>
		<td><input type="text" id="xpathKeyStr" size="100"></input></td>
		<td></td>
	</tr>
	<tr>

		<td><font size="2px">XPath Value: </font></td>
		<td><input type="text" id="xpathValueStr" size="100"></input></td>
		<td></td>

	</tr>
	<tr>
		<td>
		<div id="filter" style="width:125px">
		<button type="button" onclick="loadMessages();"><font
			size="2px"> View Messages </font></button>
		</div>
		</td>
		<td><div id="clear">
		<button type="button" onclick="clearXpathConfig();"> Clear </button>
		</div></td>
	</tr>

</table>
</div>
<div id="childMessages" style="display:none;height:495px;min-width:500px;overflow:auto;">
	<div id="disp_titleC" style="display:block;"></div>
	<div id="tableC" style="display:block;"></div>
	<div id="digitalC" class="pleaseText"></div>
</div>
<div id="aleauditMessages" style="display:none;height:495px;min-width:500px;overflow:auto;">
	<div id="disp_titleA" style="display:block;"></div>
	<div id="tableA" style="display:block;"></div>
	<div id="digitalA" class="pleaseText"></div>
</div>
<div id="message" style="display:none;height:495px;min-width:500px;overflow:auto;">
	<div id="0">
	</div>

</div>
<div id="main_disp" style="display:none;height:495px;overflow:auto;" >
	<div id="disp_title" style="display:block;"></div>
	<div id="table" style="display:block;"></div>
	<div id="digital" class="pleaseText"></div>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>

        <script type="text/javascript">
            // Loading Gadget configuration
            var prefs = new _IG_Prefs(__MODULE_ID__);
            var serverUrl = prefs.getString("serverUrl");
            serverID = prefs.getString("serverID");
            //Registering onload handler
            gadgets.util.registerOnLoadHandler(loadServerList);



            // Adding Tabs
            var tabs = new gadgets.TabSet(__MODULE_ID__, "Display");
            tabs.addTab("Display", {
                contentContainer: document.getElementById("main_disp"),
                //callback: drawDiagram
            });
            tabs.addTab("Configure", "disp_config");
	    tabs.addTab("XPath Config", "xpath_config");
	    tabs.addTab("MessageBreakdown", "childMessages");
	    tabs.addTab("AleauditMessages", "aleauditMessages");
	    tabs.addTab("Message", "message");
            tabs.addTab("Help", {
                contentContainer: document.getElementById("disp_help"),
                callback: showHelp
            });

            function showHelp() {
                clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/filtering-msg-from-time-and-activity.html");
            }

	    
	    var startTimeStr;
	    var endTimeStr;
            var xpathKey;
            var xpathValue;

	   /* var dr = new wso2vis.c.DateRange().canvas("timeRange").showHours(true).showDays(true).showMonths(true);
	    dr.create();
	    dr.onApplyClicked = */
		function getFilterValues() {

		}

		function deleteRow(rowIndex) {
			document.getElementById("nsTable").deleteRow(rowIndex);
		}

		var namespaceHtml = '';
		function changeTab() {
			tabs.setSelectedTab(2);
		}

		var serviceID;
		var serviceName;
		function drawDiagram() {
			tabs.setSelectedTab(1);
			serverID = prefs.getString("serverID");
              		serverUrl = prefs.getString("serverURL");

			serviceID = prefs.getString("serviceID");
              		serviceName = prefs.getString("serviceName");

		}

		function loadOperationNameList() {
			var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getOperationNameList&serviceID=" + serviceID;
			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);

			  if (xmlHttpReq.status == 200) {
			    var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

			 var selectBoxEl = document.getElementById("endpoint_select_box");
			    selectBoxEl.innerHTML = "";

			    var newServerSelectHTML = '<select id="endpoints" onchange="refreshData();"><option value="">--Operation--</option>';

				for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){

					var operation = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
					newServerSelectHTML +=
						'<option value="' + operation + '">' + operation + '</option>';
		    		}

				newServerSelectHTML += '</select>';

			    // Adding the new select to div
			    selectBoxEl.innerHTML = newServerSelectHTML;


		}
		}
		}

		function loadActivityTypes() {
			var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getPropertyList&key=" + 'activity_type';
			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);

			  if (xmlHttpReq.status == 200) {
			    var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

			 var selectBoxEl = document.getElementById("activity_select_box");
			    selectBoxEl.innerHTML = "";

			    var newServerSelectHTML = '<select id="activityTypeList" onchange="refreshData();"><option value="">--Activity--</option>';

				for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){

					var propertyValue = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
					newServerSelectHTML +=
						'<option value="' + propertyValue + '">' + propertyValue + '</option>';
		    		}

				newServerSelectHTML += '</select>';

			    // Adding the new select to div
			    selectBoxEl.innerHTML = newServerSelectHTML;


		}
		}
		}

		var rowNumber = 0;
		function addNamespace() {
			var nsTable = document.getElementById("nsTable");
		        var newRow = nsTable.insertRow(nsTable.rows.length);
		        var td1 = newRow.insertCell(0);
		        td1.innerHTML = '<input id="pre'+newRow.rowIndex+'" type="text" size="75"/>';

		        var td2 = newRow.insertCell(1);
		        td2.innerHTML = '<input id="url'+newRow.rowIndex+'" type="text" size="75"/>';

		        var td3 = newRow.insertCell(2);
		        td3.innerHTML = '<a href="javascript:deleteRow(\''+newRow.rowIndex+'\')"><img src="registry/resource/_system/config/repository/dashboards/gadgets/images/delete.gif"/></a>';

		}

		var messageHtml = '';
		var xmlobjForMessageIdList;
		var xmlObjForMessageCount;
		var tableHtml = '';
		var numPerPage = 10;
		var lstPage;
		var fstPage;
		var paginationBatch=20;
		var numOfRecords;

		
		function loadMessages() {
			
			xmlobjForMessageIdList = '';
			xmlobjForAleauditMessage = null;
			xmlobjForChildMessage = null;

			tabs.setSelectedTab(0);
			xmlobjForMessageIdList = '';
			//get the message Count
			var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessageCount" ; 

	
			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);
				var html = '';
			  	if (xmlHttpReq.status == 200) {
				   var response = xmlHttpReq.responseText.trim();
					if(response == "Access Denied") {
					var accessHtml = '<br/><br/><div style=\"color:red;font-size:12px\">Session Expired. Please login again.</div>';

					var contentEl = document.getElementById("disp_title");
		    		   	 contentEl.innerHTML = accessHtml;

					 var contentEl = document.getElementById("table");
		    		   	contentEl.innerHTML = '';
				}else {

					selectedPage = 1;
				    	addData(selectedPage, "parent", false);
				    

				} 
			} else {
						var errHtml = '<br/><br/><div style=\"font-size:12px\">No Records to Display..</div>';

						 var contentEl = document.getElementById("table");
			    		   	 contentEl.innerHTML = errHtml;
					
				}
			
			}
		}

		 var numberOfPages = 1;
		
		var earlierSelectedPage;
		var paginationBatch = 20;
		var startPage = 1;

		var server;
		var service; 
		var operation;
		var direction;
		var status;
		var activityType;
		var messageType;
		var messageFormat;
		var appStatus;
		var techStatus;
		var applicationFailure;
		var technicalFailure;
		var messageGUID;
		var namespaceDefStr = '';
		var startDataset;
		var endDataset;
		
		var selectedActivityId;
		var selectedArcKey;
		var selectedPage;

		function addData(page, obj, isPaginationMode) {

                        if(document.getElementById("numPerPage") != null)
			   numPerPage = document.getElementById("numPerPage").value;
		        else
		    	   numPerPage = 10;			

			if(page != selectedPage)
				earlierSelectedPage = selectedPage;
			selectedPage = page;
			startDataset = (selectedPage - 1) * numPerPage * 7;
			endDataset =  numPerPage * 7

			var namespaceRows = document.getElementById("nsTable").getElementsByTagName("input").length;

			for(var i=0; i<namespaceRows; i++) {
				namespaceDefStr += document.getElementById("nsTable").getElementsByTagName("input")[i].value;
				namespaceDefStr += '@';
				i++;
				namespaceDefStr += document.getElementById("nsTable").getElementsByTagName("input")[i].value;
				if(i != (namespaceRows-1))
				{
					namespaceDefStr += ',';
				}
			}

			startTimeStr = document.getElementById("startTime").value;
    			endTimeStr = document.getElementById("endTime").value;

    			xpathKey = document.getElementById("xpathKeyStr").value;
            		xpathValue = document.getElementById("xpathValueStr").value;


			if(document.getElementById("serverIDs").value != "") {
				server = document.getElementById("serverIDs")[document.getElementById("serverIDs").selectedIndex].text;
			} else {
				server = '%25';
			}

			if(document.getElementById("services").value != "") {
				service = document.getElementById("services")[document.getElementById("services").selectedIndex].text;
			} else {
				service = '%25';
			}
			
			if(document.getElementById("endpoints").value != "") {
				operation = document.getElementById("endpoints")[document.getElementById("endpoints").selectedIndex].text;
			} else {
				operation = '%25';
			}

			if(document.getElementById("activityTypeList").value != "") {
				activityType = document.getElementById("activityTypeList").value;
			} else {
				activityType = '%25';
			}

			if(document.getElementById("messageTypeList").value != "") {
				messageType = document.getElementById("messageTypeList").value;
			} else {
				messageType = '%25';
			}

			if(document.getElementById("messageDirectionList").value != "") {
				direction = document.getElementById("messageDirectionList").value;
			} else {
				direction = '%25';
			}

			if(document.getElementById("messageStatusList").value != "") {
				status = document.getElementById("messageStatusList").value;
			} else {
				status = '%25';
			}

			if(document.getElementById("messageFormatList").value != "") {
				messageFormat = document.getElementById("messageFormatList").value;
			} else {
				messageFormat = '%25';
			}

            		//application failure
			if(document.getElementById("applicationfailure").value != "") {
				appStatus = document.getElementById("applicationfailure").value;
			} else {
				appStatus = '%25';
			}
			
			//technical failure
			if(document.getElementById("technicalFailure").value != "") {
				techStatus = document.getElementById("technicalFailure").value;
			}  else {
				techStatus = '%25';
			}
			
			//messageguid
			if(document.getElementById("messageGUID").value != "") {
				messageGUID = document.getElementById("messageGUID").value;
			} else {
				messageGUID = '%25';
			}

			if(obj == "child"){
				if(isPaginationMode == true) {
					viewChildrenMessages(selectedActivityId, selectedB, true);
				}
			   } else if(obj == "aleaudit"){
				if(isPaginationMode == true) {
					viewAleauditMessages(selectedActivityId, selectedB);
				}
			   }else {
				viewParentMessages();
				drawTable(0, numPerPage, xmlobjForMessageIdList, obj);
				numOfRecords = xmlobjForMessageIdList.childNodes[0].childNodes.length;
				addPagination(xmlobjForMessageIdList, "parent");
			   }
			
			
			
		}

		function getDataSetCount(obj) {

			if(startTimeStr != "" && endTimeStr != ""){	
			var start = 0;
			var end = 100000000;	 
			
			if(obj == "parent"){
				var dataURLForMessageIdList = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessagesForStatus&applicationStatus=" + appStatus
				+ "&technicalStatus=" + techStatus
				+ "&startTime=" + startTimeStr
				+ "&endTime=" + endTimeStr
				+ "&server=" + server
				+ "&service=" + service
				+ "&operation=" + operation
				+ "&direction=" + direction
				+ "&status=" + status
				+ "&activityType="+activityType
				+ "&messageType="+messageType
				+ "&messageFormat="+messageFormat
				+ "&messageGUID="+messageGUID
				+ "&namespaceDef=" + namespaceDefStr
				+ "&xpath="+ xpathKey+"&xpathValue="+xpathValue
				+ "&startDataset="+ start
				+ "&endDataset=" + end;

			} else if(obj == "child") {
				var dataURLForMessageIdList = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getChildrenMessagesForSAP&applicationStatus=" + appStatus
				+ "&technicalStatus=" + techStatus
				+ "&startTime=" + startTimeStr
				+ "&endTime=" + endTimeStr
				+ "&server=" + server
				+ "&service=" + service
				+ "&operation=" + operation
				+ "&direction=" + direction
				+ "&status=" + status
				+ "&activityType="+activityType
				+ "&messageType="+messageType
				+ "&messageFormat="+messageFormat
				+ "&messageGUID="+messageGUID
				+ "&namespaceDef=" + namespaceDefStr
				+ "&xpath="+ xpathKey+"&xpathValue="+xpathValue
				+ "&activityId=" + selectedActivityId
				+ "&startDataset="+ start
				+ "&endDataset=" + end;
			} else {
				 var dataURLForMessageIdList = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getAleauditMessagesForSAP&applicationStatus=" + appStatus
				+ "&technicalStatus=" + techStatus
				+ "&startTime=" + startTimeStr
				+ "&endTime=" + endTimeStr
				+ "&server=" + server
				+ "&service=" + service
				+ "&operation=" + operation
				+ "&direction=" + direction
				+ "&status=" + status
				+ "&messageType="+messageType
				+ "&messageFormat="+messageFormat
				+ "&messageGUID="+selectedArcKey
				+ "&namespaceDef=" + namespaceDefStr	
				+ "&xpath="+ xpathKey+"&xpathValue="+xpathValue
				+ "&startDataset="+ start
				+ "&endDataset=" + end;

			}

			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURLForMessageIdList + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);
			  
			  xmlobjForMessageIdList = parseXml(removeCarriageReturns(xmlHttpReq.responseText));
			  numOfRecords = xmlobjForMessageIdList.childNodes[0].childNodes.length;
			}


		}
		}
		
		var paginationMode = true;
		function addPagination(xmlobjForMessageIdList, obj) {
		    getDataSetCount(obj);
		   
		    var htmlPage = '';

		    htmlPage = '<br/>Number of records: <b>' + numOfRecords;
		    htmlPage += '<div style=\"text-align:right\"><button type=\"button\" onclick=\"loadMessages();\">Reload</button></div>' + '</b><br/>';
		    htmlPage += 'Number of records per page: ' + 
				'<input type=\"text\" id=\"numPerPage\" size=\"5\" value=\"' + numPerPage + '\" onchange=\"javascript:addData(1,\'' + obj +'\');\">';
		    numberOfPages = Math.round(numOfRecords / numPerPage);
		    if(numberOfPages*numPerPage < numOfRecords) {
			numberOfPages++;
		    }
			    htmlPage += '<div id="tnt_pagination">';
			    htmlPage += '<span class="disabled_tnt_pagination"><a href="#prev" onclick=\"loadPrevPage(\''+obj+'\');\">Prev</a></span>';
			    for(var a=startPage; a<=numberOfPages; a++) {
				var val1 = (a-1)*numPerPage;
				var val2 = a*numPerPage;
				var hiddenPage;
				
				if(numberOfPages > 20){
						if(a <= paginationBatch || a == numberOfPages-1 || a == numberOfPages) {
							hiddenPage = false;
							
							if(obj == "child") {
								htmlPage += '<a href=\"#c'+ a +'\" id=\"#c'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
							} else if(obj == "parent") {
								htmlPage += '<a href=\"#p'+ a +'\" id=\"#p'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
							} else if(obj == "aleaudit") {
								htmlPage += '<a href=\"#a'+ a +'\" id=\"#a'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
							}
							
							if(paginationBatch > numberOfPages) {
								lstPage = numberOfPages
							} else {	
								lstPage = paginationBatch;
							}
							
							
							fstPage = paginationBatch - 19;

							
						} else {
							if(hiddenPage == false) {
								htmlPage += '..........';
							}
							hiddenPage = true;
							
						}
						
					} else {
						
						if(obj == "child") {
								htmlPage += '<a href=\"#c'+ a +'\" id=\"#c'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
						} else if(obj == "parent") {
							htmlPage += '<a href=\"#p'+ a +'\" id=\"#p'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
						} else if(obj == "aleaudit") {
							htmlPage += '<a href=\"#a'+ a +'\" id=\"#a'+ a +'\" onClick=\"javascript:addData('+a+',\''+obj+'\''+', true'+');\">' + a + '</a>';						
						}
						
				}
				
			    }
		            htmlPage += '<a href="#forwaed" id="forward" onclick=\"loadNextPage(\''+obj+'\');\">Next</a>';
			    htmlPage += '</div>';

			    if(xmlobjForMessageIdList.childNodes[0].childNodes.length > 0) {
				    if(obj == "child"){
					var contentEl = document.getElementById("disp_titleC");
		    		        contentEl.innerHTML = htmlPage;

					 var earlierSelectedHyperlink = "#c" + earlierSelectedPage;
			
				   	if(document.getElementById(earlierSelectedHyperlink) != null) {
						document.getElementById(earlierSelectedHyperlink).style.color = "#800080";
					}

					if(selectedPage == numberOfPages) {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#D7D7D7";
					} else {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#551A8B";
					}
	
					var selectedHyperlink = "#c" + selectedPage;
					if(document.getElementById(selectedHyperlink) != null) {
						document.getElementById(selectedHyperlink).style.color = "#e00700";
					}		
				
				
				   } else if(obj == "aleaudit"){
					var contentEl = document.getElementById("disp_titleA");
		    		        contentEl.innerHTML = htmlPage;
				
					var earlierSelectedHyperlink = "#a" + earlierSelectedPage;
			
				   	if(document.getElementById(earlierSelectedHyperlink) != null) {
						document.getElementById(earlierSelectedHyperlink).style.color = "#800080";
					}

					if(selectedPage == numberOfPages) {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#D7D7D7";
					} else {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#551A8B";
					}
	
					var selectedHyperlink = "#a" + selectedPage;
					if(document.getElementById(selectedHyperlink) != null) {
						document.getElementById(selectedHyperlink).style.color = "#e00700";
					}		
				
				
				   }else {
					var contentEl = document.getElementById("disp_title");
		    		        contentEl.innerHTML = htmlPage;

					 var earlierSelectedHyperlink = "#p" + earlierSelectedPage;
			
				   	if(document.getElementById(earlierSelectedHyperlink) != null) {
						document.getElementById(earlierSelectedHyperlink).style.color = "#800080";
					}

					if(selectedPage == numberOfPages) {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#D7D7D7";
					} else {
						if(document.getElementById("forward") != null)
							document.getElementById("forward").style.color = "#551A8B";
					}
	
					var selectedHyperlink = "#p" + selectedPage;
					if(document.getElementById(selectedHyperlink) != null) {
						document.getElementById(selectedHyperlink).style.color = "#e00700";
					}		
				
				
				   }

			  }
			 
		}

		function loadNextPage(obj) {
			 earlierSelectedPage = selectedPage;
			 selectedPage++;
			 
			 if(selectedPage <= numberOfPages) {
				 if(selectedPage-1 == lstPage) {
					startPage = lstPage + 1;
					paginationBatch = paginationBatch + 20;
					addPagination(true);
				 } 
				addData(selectedPage, obj, true);
			 }
			
			 
			
			
		}

		function loadPrevPage(obj) {
		   if(selectedPage != 1) {
			   earlierSelectedPage = selectedPage;
			   selectedPage--;
			   
			if(selectedPage == fstPage) {
				startPage = fstPage - 20;
				paginationBatch = paginationBatch - 20;
				addPagination(true);
			}
			
		   }
		    addData(selectedPage, obj, true);

		}

			
		function drawTable(start, end, xmlobjForMessageIdList, obj) {

			if(xmlobjForMessageIdList.childNodes[0].childNodes.length <= 0) {
				tableHtml = '<br/><div>No Data to Display</div>';
			} else {

			 tableHtml = '<br/>';
			 
			 tableHtml +='<table class=\"activity\" align=\"center\">';

			 tableHtml +='<th>Activity</th><th>Message Type</th><th>Message Format</th><th>Date/Time</th><th>Message GUID</th>' +
                                       '<th>Service</th><th>Application Ack</th><th>Technical Ack</th><th>Payload</th><th>Status</th>' +
					'<th>Direction</th><th>System Name</th><th class="lastColumn">Target</th>';
	
			 if(end > xmlobjForMessageIdList.childNodes[0].childNodes.length) {
				end = xmlobjForMessageIdList.childNodes[0].childNodes.length;
			 }

			 for(var b=start; b<end; b++){
				var activityId =  xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ActivityId")[0].textContent;
				
			    var messageUUID = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ARCKey")[0].textContent;

		            var tds = "";
		            var trClass = "";
		            var childFirstCell = "";
		            var errorCellStyle = "";
		            var errorStyle = "";
		            for (var a = 0;a < 12; a++){
                        if (a == 11) {
                            if (xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ParentRecord")[0].textContent == "true") {  //parent condition
                                trClass = "parentRow";
                            } else {
                                trClass = "childRow";
                                childFirstCell = 'style="padding-left:15px !important"';
                            }
                        } else if (a == 6) {
                            var appAck = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ApplicationFailure")[0].textContent;

                            if (appAck.replace(/^\s*/, "").replace(/\s*$/, "") != "") {
                                errorStyle = 'background-color: #ffbfb6 !important;color: #e00700 !important;';
                                errorCellStyle = 'color: #e00700 !important;';
                            }
                        } else if (a == 7) {
                            var techAck = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("TechnicalFailure")[0].textContent;

                            if (techAck.replace(/^\s*/, "").replace(/\s*$/, "") != "") {
                                errorStyle = 'background-color: #ffbfb6 !important;color: #e00700 !important;';
                                errorCellStyle = 'color: #e00700 !important;';
                            }
                        } else if (a == 9) {
                            var status = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("Status")[0].textContent;

                            if (status == "Fail") {
                                //errorStyle = 'background-color: #ffbfb6 !important;color: #e00700 !important;';
                                errorCellStyle = 'color: #e00700 !important;';
                            }
                        }

			
                    }
                    var errorClass = "";
				for(a = 0;a < 13; a++){
					if(a == 0) {
						tds   +='<td '+errorCellStyle+'>'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ActivityType")[0].textContent;+'</td>';
					} else if(a == 1) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("MessageType")[0].textContent;+'</td>';
					} else if(a == 2) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("MessageFormat")[0].textContent;+'</td>';
					} else if(a == 3) {
						var t = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("TimeStamp")[0].textContent;
						var time = t.replace('T', ' ');
						var d = new Date()
						var gmtHours = -d.getTimezoneOffset()/60;
						var gmtArr = new Array();
						gmtHours = gmtHours.toString();
						gmtArr = gmtHours.split(".");
						var timeStr = ".000+0" + gmtArr[0] + ":" + gmtArr[1]*6;
						var lstTime = time.replace(timeStr, " ");
						tds   +='<td style="'+errorCellStyle+'">'+lstTime+'</td>';
					} else if(a == 4) {
						var activityId =  xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ActivityId")[0].textContent;
						
						if(obj == "child"){
							tds   +='<td style="'+errorCellStyle+'">'+'<a href="#' + b + '" onClick="javascript:viewAleauditMessages(' + activityId +  ','+b+');">'+messageUUID+'</a></td>';
						} else if(obj == "parent"){
							tds   +='<td style="'+errorCellStyle+'">'+'<a href="#' + b + '" onClick="javascript:viewChildrenMessages(' + activityId +  ','+b+', false);">'+messageUUID+'</a></td>';
						} else {							
							tds   +='<td style="'+errorCellStyle+'">'+messageUUID+'</td>';
						}
											
					} else if(a == 5) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ServiceName")[0].textContent;+'</td>';
					} else if(a == 6) {
                        var appAck = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("ApplicationFailure")[0].textContent;

						tds   +='<td style="'+errorStyle+'"><span onMouseOver="handleOver(this);return true;" onMouseOut="handleOut(this);return true;"  title="'+appAck+'">'+appAck.substring(0,35);
                        if(appAck.length>35){
                            tds  += '...';
                        }
                        tds   += '</span></td>';
					} else if(a == 7) {
                        var appAck = xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("TechnicalFailure")[0].textContent;

						tds   +='<td style="'+errorStyle+'"><span onMouseOver="handleOver(this);return true;" onMouseOut="handleOut(this);return true;"  title="'+appAck+'">'+appAck.substring(0,35);
                        if(appAck.length>35){
                            tds  += '...';
                        }
                        tds   += '</span></td>';
					} else if(a == 8) {
						var id = xmlobjForMessageIdList.childNodes[0].childNodes[b].childNodes[0].textContent;
						tds   +='<td style="'+errorCellStyle+'"><a href="#'+id+'" onClick="javascript:viewMessage(' + id + ',this);">'+'View'+'</a></td>';
					} else if(a == 9){
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("Status")[0].textContent;+'</td>';
					} else if(a == 10) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("MessageDirection")[0].textContent;+'</td>';
					} else if(a == 11) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("IpAddress")[0].textContent;+'</td>';
					} else if(a == 12) {
						tds   +='<td style="'+errorCellStyle+'">'+xmlobjForMessageIdList.childNodes[0].childNodes[b].getElementsByTagName("UserAgent")[0].textContent;+'</td>';
					} 

                }

                    tableHtml += '<tr class="' + trClass + '">';
                    tableHtml += tds;
                    tableHtml += '</tr>';
			   }

		    tableHtml += '</table>';
		}
			
			
		 	if(obj == "child"){
				var contentEl = document.getElementById("tableC");
            		        contentEl.innerHTML = tableHtml;
				addPagination(xmlobjForMessageIdList, "child");
				tabs.setSelectedTab(3);
				
			   } else if(obj == "aleaudit"){
				var contentEl = document.getElementById("tableA");
            		        contentEl.innerHTML = tableHtml;
				addPagination(xmlobjForMessageIdList, "aleaudit");
				tabs.setSelectedTab(4);
				
			   }else {
				var contentEl = document.getElementById("table");
            		        contentEl.innerHTML = tableHtml;
				
				tabs.setSelectedTab(0);
				
			   }

		}

	var xmlobjForAleauditMessage;
	var xmlobjForChildMessage;

	/*function getFailedChildrenCount(activityId) {
		var dataURLForFailedMessageCount = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getCountofChildrenFailedMessagesString&activityId=" + activityId;
			
		var xmlHttpReq = createXmlHttpRequest();
		var opList = [];
		// Make sure the XMLHttpRequest object was instantiated
		if (xmlHttpReq)
		{
		  // This is a synchronous POST, hence UI blocking.
		  xmlHttpReq.open("GET", dataURLForFailedMessageCount + "&ms=" + new Date().getTime(), false);
		  xmlHttpReq.send(null);
		  
		  var xmlobjForFailedMessageCount = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

		  return xmlobjForFailedMessageCount.childNodes[0].textContent;
		}
	}*/

	function viewParentMessages() {

		if(startTimeStr != "" && endTimeStr != ""){						 
			var dataURLForMessageIdList = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessagesForStatus&applicationStatus=" + appStatus
			+ "&technicalStatus=" + techStatus
			+ "&startTime=" + startTimeStr
			+ "&endTime=" + endTimeStr
			+ "&server=" + server
			+ "&service=" + service
			+ "&operation=" + operation
			+ "&direction=" + direction
			+ "&status=" + status
			+ "&activityType="+activityType
			+ "&messageType="+messageType
			+ "&messageFormat="+messageFormat
			+ "&messageGUID="+messageGUID
			+ "&namespaceDef=" + namespaceDefStr
			+ "&xpath="+ xpathKey+"&xpathValue="+xpathValue
			+ "&startDataset="+ startDataset
			+ "&endDataset=" + endDataset;

	
			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURLForMessageIdList + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);
			  
			  xmlobjForMessageIdList = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

			}

		}

	}

	var selectedB;
	
	function viewChildrenMessages(activityId, b, isPaginationMode) {
		selectedActivityId = activityId;
		selectedB = b;

		if(isPaginationMode == false) {
			selectedPage = 1;
			addData(selectedPage, "child", isPaginationMode);

		}

		
		if(startTimeStr != "" && endTimeStr != ""){						 
			var dataURLForMessageIdList = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getChildrenMessagesForSAP&applicationStatus=" + appStatus
			+ "&technicalStatus=" + techStatus
			+ "&startTime=" + startTimeStr
			+ "&endTime=" + endTimeStr
			+ "&server=" + server
			+ "&service=" + service
			+ "&operation=" + operation
			+ "&direction=" + direction
			+ "&status=" + status
			+ "&activityType="+activityType
			+ "&messageType="+messageType
			+ "&messageFormat="+messageFormat
			+ "&messageGUID="+messageGUID
			+ "&namespaceDef=" + namespaceDefStr
			+ "&xpath="+ xpathKey+"&xpathValue="+xpathValue
			+ "&activityId=" + activityId
			+ "&startDataset="+ startDataset
			+ "&endDataset=" + endDataset;

	
			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURLForMessageIdList + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);
			  
			  xmlobjForChildMessage = parseXml(removeCarriageReturns(xmlHttpReq.responseText));
			  viewChildren = true;
			  numOfRecords = xmlobjForChildMessage.childNodes[0].childNodes.length;
			  xmlobjForMessageIdList = xmlobjForChildMessage;
			  drawTable(0, numPerPage, xmlobjForChildMessage, "child");
			}

		}
	}

	function viewAleauditMessages(activityId, b){

		 var arcKey = xmlobjForChildMessage.childNodes[0].childNodes[b].getElementsByTagName("ARCKey")[0].textContent;
		 selectedArcKey = arcKey;
		 selectedB = b;

		 var dataURLForAleauditMessage = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getAleauditMessagesForSAP&applicationStatus=" + appStatus
				+ "&technicalStatus=" + techStatus
				+ "&startTime=" + startTimeStr
				+ "&endTime=" + endTimeStr
				+ "&server=" + server
				+ "&service=" + service
				+ "&operation=" + operation
				+ "&direction=" + direction
				+ "&status=" + status
				+ "&messageType="+messageType
				+ "&messageFormat="+messageFormat
				+ "&messageGUID="+arcKey
				+ "&namespaceDef=" + namespaceDefStr
				+ "&xpath="+ xpathKey
				+"&xpathValue="+xpathValue
				+ "&startDataset="+ startDataset
				+ "&endDataset=" + endDataset;

	
				var xmlHttpReq = createXmlHttpRequest();
				var opList = [];
				// Make sure the XMLHttpRequest object was instantiated
				if (xmlHttpReq)
				{
				  // This is a synchronous POST, hence UI blocking.
				  xmlHttpReq.open("GET", dataURLForAleauditMessage + "&ms=" + new Date().getTime(), false);
				  xmlHttpReq.send(null);
				  
				  xmlobjForAleauditMessage = parseXml(removeCarriageReturns(xmlHttpReq.responseText));	
				  numOfRecords = xmlobjForAleauditMessage.childNodes[0].childNodes.length;		
				  viewAleaudit = true;
				  xmlobjForMessageIdList = xmlobjForAleauditMessage;
				  drawTable(0, numPerPage, xmlobjForAleauditMessage, "aleaudit");
			          
				}
	}	

	var viewChildren = false;
	var viewAleaudit = false;
        var previousClass = "";
        function handleOver(obj){
            if(obj.parentNode.parentNode.className.search(/errorRow/g) == -1){
                obj.parentNode.parentNode.className = "errorRow " + obj.parentNode.parentNode.className;
            }
	  }
        function handleOut(obj){
            var activityTable = obj.parentNode.parentNode.parentNode;
            for(var i=0;i<activityTable.rows.length;i++){
		        if(activityTable.rows[i].className.split("errorRow").length >1 && activityTable.rows[i].className.search(/errorRow/g) != -1){
		            activityTable.rows[i].className = activityTable.rows[i].className.split("errorRow")[1].replace(/^\s*/, "").replace(/\s*$/, "");
		        }
		    }
           // obj.parentNode.parentNode.className = "errorRow " + obj.parentNode.parentNode.className;
        }

		function replayMessage(messageUUID,linkObj){
			alert('Replaying '+ messageUUID +' ........');
		}

		function viewMessage(id,linkObj) {
			tabs.setSelectedTab(5);

		    var activityTable = linkObj.parentNode.parentNode.parentNode;
            for(var i=0;i<activityTable.rows.length;i++){
		        if(activityTable.rows[i].className.split("selectedRow").length >1 && activityTable.rows[i].className.search(/selectedRow/g) != -1){
		            activityTable.rows[i].className = activityTable.rows[i].className.split("selectedRow")[1].replace(/^\s*/, "").replace(/\s*$/, "");
		        }
		    }
		    linkObj.parentNode.parentNode.className = "selectedRow " + linkObj.parentNode.parentNode.className;

			var messageId = id;
			messageId = parseInt(messageId);

			var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessageForMessageID&messageId=" + messageId;

			var xmlHttpReq = createXmlHttpRequest();
			var opList = [];
			// Make sure the XMLHttpRequest object was instantiated
			if (xmlHttpReq)
			{
			  // This is a synchronous POST, hence UI blocking.
			  xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
			  xmlHttpReq.send(null);

			  if (xmlHttpReq.status == 200) {
			     var xmlobjForMessageList = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

			    var xmlString = serializeToString(xmlobjForMessageList.childNodes[0].childNodes[0].getElementsByTagName("message")[0]);
			    LoadXMLString(document.getElementById("message"), xmlString);

			    gadgets.window.adjustHeight();
			   }
			}
		}

	/**
	 * @description Serialize payload to string.
	 * @method serializeToString
	 * @private
	 * @static
	 * @param {dom} payload   xml payload
	 * @return string
	 */
	function serializeToString(payload) {
	    if (payload == null) return null;
	    if (typeof(payload) == "string") {
		return payload;
	    } else if (typeof(payload) == "object") {
		/*var browser = getBrowser();
		switch (browser) {
		    case "gecko":
		    case "safari":
		        var serializer = new XMLSerializer();
		        return serializer.serializeToString(payload);
		        break;
		    case "ie":
		    case "ie7":
		        return payload.xml;
		        break;
		    case "opera":
		        var xmlSerializer = document.implementation.createLSSerializer();
		        return xmlSerializer.writeToString(payload);
		        break;
		    case "undefined":
		        throw "Unknown browser: serializeToString doesn't recognize the browser, to invoke browser-specific serialization code.";
		}*/

		var serializer = new XMLSerializer();
		return serializer.serializeToString(payload);

	    } else {
		return false;
	    }
	}

    	function clearConfig() {
		document.getElementById("startTime").value = "";
		document.getElementById("endTime").value = "";
		document.getElementById("serverIDs").value = "";
		document.getElementById("services").value = "";
		document.getElementById("endpoints").value = "";
		document.getElementById("activityTypeList").value = "";
		document.getElementById("applicationfailure").value = "";
		document.getElementById("technicalFailure").value = "";
		document.getElementById("messageTypeList").value = "";
		document.getElementById("messageFormatList").value = "";
		document.getElementById("messageGUID").value = "";
    	}

	function clearXpathConfig() {

		var nsTable = document.getElementById("nsTable");
		var numRows = nsTable.rows.length-1;

		for(var i=numRows; i>1; i--) {
			document.getElementById("nsTable").deleteRow(i);
		}
		document.getElementById("pre1").value = "";
		document.getElementById("url1").value = "";
		document.getElementById("xpathKeyStr").value = "";
		document.getElementById("xpathValueStr").value = "";
	}


        </script>

        ]]>
	</Content>

</Module>
