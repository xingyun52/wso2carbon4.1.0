<?xml version="1.0" encoding="utf-8" ?>
<Module>
  <ModulePrefs
            title="Mediation Analytics Gadget"
            height="300"
            description="Request count and fault count aggregated for all server"
            author="Ruwan Janapriya, Lahiru Priyadarshana" author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
            author_location="Colombo, Sri Lanka">
    <Require feature="setprefs"/>
    <Require feature="tabs"/>
    <Require feature="dynamic-height"/>
    <Require feature="views"/>
  </ModulePrefs>
  <UserPref name="interval" display_name="Refresh interval (ms)" default_value="30000" datatype="int"></UserPref>
  <Content type="html" view="default">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
    padding: 3px;
    border: 1px solid #666;
    border-right-width: 2px;
    border-bottom-width: 2px;
    display: none;
    background: #999;
    color: #FFF;
    font: bold 10px Verdana, Arial, sans-serif;
    text-align: left;
    position: absolute;
    z-index: 1000;
}

#datesSelectionBox0 {
    width:300px;
    height:auto !important;
}

#imgObj0 {
    display:none;
}

#timeBox-main0 {
    width:290px;
    height:auto;
}

#dateBox-main0 {
    width:290px;
    height:auto;
}

#monthBox-main0 {
    width:290px;
    height:auto;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/treeview/assets/skins/sam/treeview.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/calendar/assets/skins/sam/calendar.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/fonts/fonts-min.css"/>
<link rel="stylesheet" type="text/css" href="css/DateRange.css"/>
<div id="servers_disp" style="display:none;height:300px;text-align:center;vertical-align:middle;">
  <div id="daterange" style="float:right;overflow:true;"></div><br /><br />
  <div id="tree" style=""></div><br />
  <div id="chart1" style=""></div><br /><br />
  <div id="chart2" style=""></div>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.interval = prefs.getString("interval");

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
//var dataFilterServers = new wso2vis.f.DataFilter(["level0", "level1"], "@name");
var dataProviderTreeView = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/tree_data.xml");
var dataProviderLineChart1 = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/generator_xy1.xml");
var dataProviderLineChart2 = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/generator_xy2.xml");
var reqTooltip = false;

if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

var dataRange = new wso2vis.c.DateRange()
	     .canvas("daterange");
dataRange.create();
dataRange.onApplyClicked = dataRangeClicked;

var lineChart1 = new wso2vis.s.chart.protovis.LineChart2("chart1","Request / Response / Fault Count","");
lineChart1.dataField(["level0", "data"])
    .subDataField(["set"])
    .xDataValue(["x", "@count"])
    .yDataValue(["y", "@count"])
    .dataLabel(["@name"])
    .xLabel(["x", "@name"])
    .width(350)
    .height(260)
    .legend(true)
    .marks(true);
lineChart1.onTooltip = lineChart1Tooltip;
lineChart1.load();

var lineChart2 = new wso2vis.s.chart.protovis.LineChart2("chart2","Maximum / Minimum / Average Response Time","");
lineChart2.dataField(["level0", "data"])
    .subDataField(["set"])
    .xDataValue(["x", "@count"])
    .yDataValue(["y", "@count"])
    .dataLabel(["@name"])
    .xLabel(["x", "@name"])
    .width(350)
    .height(260)
    .legend(true)
    .marks(true);
lineChart2.onTooltip = lineChart2Tooltip;
lineChart2.load();

var treeView = new wso2vis.s.form.TreeView()
						 .canvas("tree")
                         .dataField(["node"])
                         .nodeLabel(["label"])
                         .nodeValue(["value"])
                         .nodeChildren(["children"]);

treeView.create();

dataProviderLineChart1.addDataReceiver(lineChart1);
dataProviderLineChart2.addDataReceiver(lineChart2);
dataProviderTreeView.addDataReceiver(treeView);

timer.tick = globalTick;

var allowId = 2;
var allowParent = "Proxy Services";

treeView.onExpand = function(n) {  
    console.log("restricted node!"); 
};

treeView.onCollapse = function(n) {
    console.log("restricted node!");
};

treeView.onLabelClick = function(n) {
    if( n.parent.label === "Proxy Services" ) {
        console.log(n);
    } else {
        console.log("restricted node!");
    }
};

// Adding Tabs
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 2

function initialize() {
    //dataProviderServers.pullDataSync();
    dataProviderTreeView.initialize();
    dataProviderLineChart1.initialize();
    dataProviderLineChart2.initialize();
    
    timer.startTimer(); 
    
    drawServersDiagram();

    gadgets.window.adjustHeight(900);
}

function drawServersDiagram() {
    gadgets.window.adjustHeight();
}

function globalTick() {
    //dataProviderServers.pullData();
    dataProviderLineChart1.pullData();
    dataProviderLineChart2.pullData();
}

function dataRangeClicked() {
}

function chartToolTip(data) {
    reqTooltip = !reqTooltip;
    return ( reqTooltip == true ? "Requests" : "Faults" );
}

function lineChart1Tooltip(data) {
    return data["@name"];
}

function lineChart2Tooltip(data) {
    return data["@name"];
}

function showHelp() {
    clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/allServersReqsFaults.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);		  
</script>
]]>
</Content>

<Content type="html" view="canvas">
    <![CDATA[

<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/wso2vis.js"></script>
<style>
div#qTip {
    padding: 3px;
    border: 1px solid #666;
    border-right-width: 2px;
    border-bottom-width: 2px;
    display: none;
    background: #999;
    color: #FFF;
    font: bold 10px Verdana, Arial, sans-serif;
    text-align: left;
    position: absolute;
    z-index: 1000;
}

#imgObj0 {
    display:none;
}
</style>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/treeview/assets/skins/sam/treeview.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/calendar/assets/skins/sam/calendar.css"/>
<link rel="stylesheet" type="text/css" href="css/3rdparty/yui/build/fonts/fonts-min.css"/>
<link rel="stylesheet" type="text/css" href="css/DateRange.css"/>
<div id="servers_disp" style="display:none;height:300px;text-align:center;vertical-align:middle;">
  <div id="daterange" style="float:right;overflow:true;"></div><br /><br />
  <div id="tree" style=""></div><br />
  <div id="chart1" style=""></div><br /><br />
  <div id="chart2" style=""></div>
</div>
<div id="disp_help" style="display:none;height:300px;">
</div>
<script type="text/javascript">

// Loading Gadget configuration
var prefs = new _IG_Prefs(__MODULE_ID__);

wso2vis.environment.interval = prefs.getString("interval");

var urlServers = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getEndpointReqResFaultCountsForAllServers";

var dataProviderServers = new wso2vis.p.ProviderGET(urlServers);
//var dataFilterServers = new wso2vis.f.DataFilter(["level0", "level1"], "@name");
var dataProviderTreeView = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/tree_data.xml");
var dataProviderLineChart1 = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/generator_xy1.xml");
var dataProviderLineChart2 = new wso2vis.p.ProviderGET("registry/resource/_system/config/repository/dashboards/gadgets/data/generator_xy2.xml");
var reqTooltip = false;

if (wso2vis.environment.interval == "")
{
    prefs.set("interval", 30000);
    wso2vis.environment.interval = "30000";
}

var inte = 30000;
try {
    inte = parseInt(wso2vis.environment.interval);
}
catch (err) {}

var timer = new wso2vis.u.Timer(inte);

var dataRange = new wso2vis.c.DateRange()
	     .canvas("daterange");
dataRange.create();
dataRange.onApplyClicked = dataRangeClicked;

var lineChart1 = new wso2vis.s.chart.protovis.LineChart2("chart1","Request / Response / Fault Count","");
lineChart1.dataField(["level0", "data"])
    .subDataField(["set"])
    .xDataValue(["x", "@count"])
    .yDataValue(["y", "@count"])
    .dataLabel(["@name"])
    .xLabel(["x", "@name"])
    .width(800)
    .height(400)
    .legend(true)
    .marks(true);
lineChart1.onTooltip = lineChart1Tooltip;
lineChart1.load();

var lineChart2 = new wso2vis.s.chart.protovis.LineChart2("chart2","Maximum / Minimum / Average Response Time","");
lineChart2.dataField(["level0", "data"])
    .subDataField(["set"])
    .xDataValue(["x", "@count"])
    .yDataValue(["y", "@count"])
    .dataLabel(["@name"])
    .xLabel(["x", "@name"])
    .width(800)
    .height(400)
    .legend(true)
    .marks(true);
lineChart2.onTooltip = lineChart2Tooltip;
lineChart2.load();

var treeView = new wso2vis.s.form.TreeView()
						 .canvas("tree")
                         .dataField(["node"])
                         .nodeLabel(["label"])
                         .nodeValue(["value"])
                         .nodeChildren(["children"]);

treeView.create();

dataProviderLineChart1.addDataReceiver(lineChart1);
dataProviderLineChart2.addDataReceiver(lineChart2);
dataProviderTreeView.addDataReceiver(treeView);

timer.tick = globalTick;

var allowId = 2;
var allowParent = "Proxy Services";

treeView.onExpand = function(n) {  
    console.log("restricted node!"); 
};

treeView.onCollapse = function(n) {
    console.log("restricted node!");
};

treeView.onLabelClick = function(n) {
    if( n.parent.label === "Proxy Services" ) {
        console.log(n);
    } else {
        console.log("restricted node!");
    }
};

// Adding Tabs
var tabs = new gadgets.TabSet( __MODULE_ID__ ,"Servers");
tabs.addTab("Servers", {
    contentContainer: document.getElementById("servers_disp"),
    callback: drawServersDiagram
    }); // 0
tabs.addTab("Help", {
    contentContainer: document.getElementById("disp_help"),
    callback: showHelp
    }); // 2

function initialize() {
    //dataProviderServers.pullDataSync();
    dataProviderTreeView.initialize();
    dataProviderLineChart1.initialize();
    dataProviderLineChart2.initialize();
    
    timer.startTimer(); 
    
    drawServersDiagram();

    gadgets.window.adjustHeight(1500);
}

function drawServersDiagram() {
    gadgets.window.adjustHeight();
}

function globalTick() {
    //dataProviderServers.pullData();
    dataProviderLineChart1.pullData();
    dataProviderLineChart2.pullData();
}

function dataRangeClicked() {
}

function chartToolTip(data) {
    reqTooltip = !reqTooltip;
    return ( reqTooltip == true ? "Requests" : "Faults" );
}

function lineChart1Tooltip(data) {
    return data["@name"];
}

function lineChart2Tooltip(data) {
    return data["@name"];
}

function showHelp() {
    clientSideInclude("disp_help", "registry/resource/_system/config/repository/dashboards/gadgets/help/allServersReqsFaults.html");
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(initialize);		  
</script>
]]>
</Content>
</Module>
