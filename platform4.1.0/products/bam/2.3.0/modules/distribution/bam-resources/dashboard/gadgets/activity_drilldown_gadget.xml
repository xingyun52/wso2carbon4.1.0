<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Activity Drill down" height="300" width="500"
description="Activity Drill down" author="Dinithi Nallaperuma"
author_email="carbon-dev@wso2.org" author_affiliation="WSO2"
author_location="Colombo, Sri Lanka">
<Require feature="setprefs"/>
<Require feature="tabs"/>
<Require feature="dynamic-height"/>
<Require feature="views"/>
  </ModulePrefs>
  <UserPref name="activityID" display_name="Activity Name"
default_value="" datatype="string"></UserPref>
  <Content type="html" view="default">

<![CDATA[
<style>
    table.activity {
        font-family: verdana,arial,sans-serif;
        font-size:11px;
        color:#333333;
        border-width: 1px;
        border-color: #666666;
        border-collapse: collapse;
    }
    table.activity th {
        border-width: 1px;
        padding: 1px;
        border-style: solid;
        border-color: #666666;
        background-color: #6495ED;
    }
    table.activity td {
        border-width: 1px;
        padding: 1px;
        border-style: solid;
        border-color: #666666;
        background-color: #D6E6FE;
    }
</style>

<script type="text/javascript" src="swfobject1-5/swfobject.js"></script>
<script type="text/javascript" src="encoder-decoder.js"></script>
<script type="text/javascript" src="js/retrieve-data.js"></script>
<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/Xml-display.js"></script>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<link rel="stylesheet" type="text/css" href="css/CalendarControl.css"/>
<link rel="stylesheet" type="text/css" href="css/Xml-display.css"/>
<div id="server_level" style="display:none;height:300px;">
    <table class="main-table">
        <tr>
            <td><div id="select_boxes">
                <table>
                    <tr>

                        <td><div id="server_select_box">
                            <select id="activities" onmousedown="loadServerListForActivity();">
                                <option value="">--Server--</option>
                            </select>
                        </div>
                        </td>
                        <td><!--div id="demo_div"  style="display:none;">
  <input type="checkbox" name="demo_mode" id="demo_mode_id">
 </div--></td>
                    </tr>
                </table>
            </div></td>
        </tr>
        <tr></tr>
    </table>
</div>
<div id="service_level" style="display:none;height:300px;width=500px;">
</div>
<div id="operation_level" style="display:none;height:300px;width=500px;">
</div>
<div id="messageConfig_level" style="display:none;height:300px;width=500px;">
</div>
<div id="message_level" style="display:none;height:280px;width=500px;overflow:auto;">
</div>
<script type="text/javascript">

var prefs = new _IG_Prefs(__MODULE_ID__);
serverID = prefs.getString("serverID");
serverUrl = prefs.getString("serverUrl");

// Adding Tabs
var tabs = new gadgets.TabSet(__MODULE_ID__, "Server");

tabs.addTab("Server", {
    contentContainer: document.getElementById("server_level"),
    callback: selectServer
});
tabs.addTab("Service", {
    contentContainer: document.getElementById("service_level"),
    //callback: showHelp
});
tabs.addTab("Operation", {
    contentContainer: document.getElementById("operation_level"),
    //callback: showHelp
});
tabs.addTab("MessageConfig", {
    contentContainer: document.getElementById("messageConfig_level"),
    //callback: showHelp
});
tabs.addTab("Message", {
    contentContainer: document.getElementById("message_level"),
    //callback: showHelp
});


function selectServer() {

    var serverID = prefs.getString("serverID");
    var serverUrl = prefs.getString("serverURL");
}

function selectService(serverId) {
    tabs.setSelectedTab(1);
    serverId = serverId + "";
    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getServiceListForActivity&serverID=" + serverId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            html += '<table>';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<tr><td>';
                html +='<a href="#" onClick="javascript:selectOperation(' + xmlobj.childNodes[0].childNodes[a].childNodes[1].textContent + ');">'+
                       '<img src="registry/resource/_system/config/repository/dashboards/gadgets/images/service.png"/></a>';
                html += '</td>';
                html += '<td>';
                html += '<font size="2">'+xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent + '</font>';
                html += '</td></tr>';
                html += '<tr></tr>';
            }
            html += '</table>';
            var contentEl = document.getElementById("service_level");
            contentEl.innerHTML = html;


//selectOperation(1);

        }
    }
}

function selectOperation(serviceId) {

    tabs.setSelectedTab(2);

    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getOperationListForActivity&serviceId=" + serviceId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            html += '<div><table>';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<tr><td>';
                html +='<a href="#" onClick="javascript:selectMessageOptions(' + xmlobj.childNodes[0].childNodes[a].childNodes[1].textContent + ');">'+
                       '<img src="registry/resource/_system/config/repository/dashboards/gadgets/images/operation.png"/></a>';
                html += '</td>';
                html += '<td>';
                html += '<font size="2">'+xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent + '</font>';
                html += '</td></tr>';
                html += '<tr></tr>';
            }
            html += '</div></table>';

            var contentEl = document.getElementById("operation_level");
            contentEl.innerHTML = html;

        }
    }
}

function selectMessageOptions(operationId) {

    tabs.setSelectedTab(3);

    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=gettimestampForOperation&operationId=" + operationId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '---------TimeStamp----------';

            html += '<table><tr><td><div id=\"startTime_select_box\"><select id=\"startTime\"><option value=\" \">--Start Time--</option>'

            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                var str = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
                str = str.replace('T', ' ');
                str = str.replace('00-04:00', '');
                var strArr = str.split(".000");
                html +='<option value=\"' + strArr[0] + '\">' + strArr[0]+'</option>';
            }

            html += '</select></div></td>';

            html += '<td><div id=\"endTime_select_box\"><select id=\"endTime\"><option value=\" \">--End Time--</option>'

            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){

                var str = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
                str = str.replace('T', ' ');
                str = str.replace('00-04:00', '');
                var strArr = str.split(".000");
                html +='<option value=\"' + strArr[0] + '\">' + strArr[0]+'</option>';
            }

            html += '</td></tr></table></div>';

        }
    }

//----------------------------------------------------------------------

    var dataURL1 = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getDirectionForOperation&operationId=" + operationId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL1 + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj1 = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            html += '---------Direction----------';
            html += '<table><tr><td><div id=\"direction_select_box\"><select id=\"direction\"><option value=\"\">--Direction--</option>'

            html +='<option value=\"Request\">Request</option>';
            html +='<option value=\"Response\">Response</option>';

//var startTime = '';
//var endTime = '';

            html += '</select></div></td></tr></table></div>';
            html += '<button type="button" onclick="javascript:showMessages('+ operationId +')">Get Messages</button>';
        }
    }

    var contentEl = document.getElementById("messageConfig_level");
    contentEl.innerHTML = html;

}

function showMessages(operationId) {
    tabs.setSelectedTab(4);

    var direction = document.getElementById("direction").value;
    direction.trim();

    var startTime = document.getElementById("startTime").value;
    var endTime = document.getElementById("endTime").value;;

    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessagesForOperation&operationId=" + operationId + "&direction=" +             direction + "&startTime=" + startTime + "&endTime=" + endTime;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<div id=' + a + '></div>';
            }

            var contentEl = document.getElementById("message_level");
            contentEl.innerHTML = html;

            for(var a = 1;a < xmlobj.childNodes[0].childNodes.length; a++){
                var messageId = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;

                messageId = parseInt(messageId);
                var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessageForMessageID&messageId=" + messageId;

                var xmlHttpReq = createXmlHttpRequest();
                var opList = [];
// Make sure the XMLHttpRequest object was instantiated
                if (xmlHttpReq)
                {
                    // This is a synchronous POST, hence UI blocking.
                    xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
                    xmlHttpReq.send(null);

                    if (xmlHttpReq.status == 200) {
                        var xmlobj1 = parseXml(removeCarriageReturns(xmlHttpReq.responseText));


                        var xmlString = serializeToString(xmlobj1.childNodes[0].childNodes[0].getElementsByTagName("message")[0]);

                        LoadXMLString(document.getElementById(a), xmlString);

//html += '</td></tr>';
                    }
                }
            }
        }
    }
}

/**
 * @description Serialize payload to string.
 * @method serializeToString
 * @private
 * @static
 * @param {dom} payload   xml payload
 * @return string
 */
function serializeToString(payload) {
    if (payload == null) return null;
    if (typeof(payload) == "string") {
        return payload;
    } else if (typeof(payload) == "object") {

        var serializer = new XMLSerializer();
        return serializer.serializeToString(payload);

    } else {
        return false;
    }
}

function parseXml(xml) {
    var dom = null;
    if (window.DOMParser) {
        try {
            dom = (new DOMParser()).parseFromString(xml, "text/xml");
        }
        catch (e) { dom = null; }
    }
    else if (window.ActiveXObject) {
        try {
            dom = new ActiveXObject('Microsoft.XMLDOM');
            dom.async = false;
            if (!dom.loadXML(xml)) // parse error ..
                window.alert(dom.parseError.reason + dom.parseError.srcText);
        }
        catch (e) { dom = null; }
    }
    else
        window.alert("oops");
    return dom;
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(loadServerListForActivity);
</script>

  ]]>
  </Content>
  <Content type="html" view="canvas">

<![CDATA[
<style>
    table.activity {
        font-family: verdana,arial,sans-serif;
        font-size:11px;
        color:#333333;
        border-width: 1px;
        border-color: #666666;
        border-collapse: collapse;
    }
    table.activity th {
        border-width: 1px;
        padding: 1px;
        border-style: solid;
        border-color: #666666;
        background-color: #6495ED;
    }
    table.activity td {
        border-width: 1px;
        padding: 1px;
        border-style: solid;
        border-color: #666666;
        background-color: #D6E6FE;
    }
</style>

<script type="text/javascript" src="swfobject1-5/swfobject.js"></script>
<script type="text/javascript" src="encoder-decoder.js"></script>
<script type="text/javascript" src="js/retrieve-data.js"></script>
<script type="text/javascript" src="js/help-populator.js"></script>
<script type="text/javascript" src="js/Xml-display.js"></script>
<link rel="stylesheet" type="text/css" href="css/gadgets.css"/>
<link rel="stylesheet" type="text/css" href="css/help.css"/>
<link rel="stylesheet" type="text/css" href="css/CalendarControl.css"/>
<link rel="stylesheet" type="text/css" href="css/Xml-display.css"/>
<div id="server_level" style="display:none;height:300px;">
    <table class="main-table">
        <tr>
            <td><div id="select_boxes">
                <table>
                    <tr>

                        <td><div id="server_select_box">
                            <select id="activities" onmousedown="loadServerListForActivity();">
                                <option value="">--Server--</option>
                            </select>
                        </div>
                        </td>
                        <td><!--div id="demo_div"  style="display:none;">
  <input type="checkbox" name="demo_mode" id="demo_mode_id">
 </div--></td>
                    </tr>
                </table>
            </div></td>
        </tr>
        <tr></tr>
    </table>
</div>
<div id="service_level" style="display:none;height:300px;width=500px;">
</div>
<div id="operation_level" style="display:none;height:300px;width=500px;">
</div>
<div id="messageConfig_level" style="display:none;height:300px;width=500px;">
</div>
<div id="message_level" style="display:none;height:280px;width=500px;overflow:auto;">
</div>
<script type="text/javascript">

var prefs = new _IG_Prefs(__MODULE_ID__);
serverID = prefs.getString("serverID");
serverUrl = prefs.getString("serverUrl");

// Adding Tabs
var tabs = new gadgets.TabSet(__MODULE_ID__, "Server");

tabs.addTab("Server", {
    contentContainer: document.getElementById("server_level"),
    callback: selectServer
});
tabs.addTab("Service", {
    contentContainer: document.getElementById("service_level"),
    //callback: showHelp
});
tabs.addTab("Operation", {
    contentContainer: document.getElementById("operation_level"),
    //callback: showHelp
});
tabs.addTab("MessageConfig", {
    contentContainer: document.getElementById("messageConfig_level"),
    //callback: showHelp
});
tabs.addTab("Message", {
    contentContainer: document.getElementById("message_level"),
    //callback: showHelp
});


function selectServer() {

    serverID = prefs.getString("serverID");
    serverUrl = prefs.getString("serverURL");
}

function selectService(serverId) {
    tabs.setSelectedTab(1);
    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getServiceListForActivity&serverID=" + serverId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            html += '<table>';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<tr><td>';
                html +='<a href="#" onClick="javascript:selectOperation(' + xmlobj.childNodes[0].childNodes[a].childNodes[1].textContent + ');">'+
                       '<img src="registry/resource/_system/config/repository/dashboards/gadgets/images/service.png"/></a>';
                html += '</td>';
                html += '<td>';
                html += '<font size="2">'+xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent + '</font>';
                html += '</td></tr>';
                html += '<tr></tr>';
            }
            html += '</table>';
            var contentEl = document.getElementById("service_level");
            contentEl.innerHTML = html;


//selectOperation(1);

        }
    }
}

function selectOperation(serviceId) {

    tabs.setSelectedTab(2);

    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getOperationListForActivity&serviceId=" + serviceId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            html += '<div><table>';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<tr><td>';
                html +='<a href="#" onClick="javascript:selectMessageOptions(' + xmlobj.childNodes[0].childNodes[a].childNodes[1].textContent + ');">'+
                       '<img src="registry/resource/_system/config/repository/dashboards/gadgets/images/operation.png"/></a>';
                html += '</td>';
                html += '<td>';
                html += '<font size="2">'+xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent + '</font>';
                html += '</td></tr>';
                html += '<tr></tr>';
            }
            html += '</div></table>';

            var contentEl = document.getElementById("operation_level");
            contentEl.innerHTML = html;

        }
    }
}

function selectMessageOptions(operationId) {

    tabs.setSelectedTab(3);

    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=gettimestampForOperation&operationId=" + operationId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '---------TimeStamp----------';

            html += '<table><tr><td><div id=\"startTime_select_box\"><select id=\"startTime\"><option value=\" \">--Start Time--</option>'

            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                var str = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
                str = str.replace('T', ' ');
                str = str.replace('00-04:00', '');
                var strArr = str.split(".000");
                html +='<option value=\"' + strArr[0] + '\">' + strArr[0]+'</option>';
            }

            html += '</select></div></td>';

            html += '<td><div id=\"endTime_select_box\"><select id=\"endTime\"><option value=\" \">--End Time--</option>'

            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){

                var str = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;
                str = str.replace('T', ' ');
                str = str.replace('00-04:00', '');
                var strArr = str.split(".000");
                html +='<option value=\"' + strArr[0] + '\">' + strArr[0]+'</option>';
            }

            html += '</td></tr></table></div>';

        }
    }

//----------------------------------------------------------------------

    var dataURL1 = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getDirectionForOperation&operationId=" + operationId;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL1 + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj1 = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            html += '---------Direction----------';
            html += '<table><tr><td><div id=\"direction_select_box\"><select id=\"direction\"><option value=\"\">--Direction--</option>'

            html +='<option value=\"Request\">Request</option>';
            html +='<option value=\"Response\">Response</option>';

//var startTime = '';
//var endTime = '';

            html += '</select></div></td></tr></table></div>';
            html += '<button type="button" onclick="javascript:showMessages('+ operationId +')">Get Messages</button>';
        }
    }

    var contentEl = document.getElementById("messageConfig_level");
    contentEl.innerHTML = html;

}

function showMessages(operationId) {
    tabs.setSelectedTab(4);

    var direction = document.getElementById("direction").value;
    direction.trim();

    var startTime = document.getElementById("startTime").value;

    var endTime = document.getElementById("endTime").value;


    var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessagesForOperation&operationId=" + operationId + "&direction=" +             direction + "&startTime=" + startTime + "&endTime=" + endTime;
    var xmlHttpReq = createXmlHttpRequest();
    var opList = [];
// Make sure the XMLHttpRequest object was instantiated
    if (xmlHttpReq)
    {
        // This is a synchronous POST, hence UI blocking.
        xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
        xmlHttpReq.send(null);

        if (xmlHttpReq.status == 200) {
            var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

            var html = '';
            for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
                html += '<div id=' + a + '></div>';
            }

            var contentEl = document.getElementById("message_level");
            contentEl.innerHTML = html;

            for(var a = 1;a < xmlobj.childNodes[0].childNodes.length; a++){
                var messageId = xmlobj.childNodes[0].childNodes[a].childNodes[0].textContent;

                messageId = parseInt(messageId);
                var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getMessageForMessageID&messageId=" + messageId;

                var xmlHttpReq = createXmlHttpRequest();
                var opList = [];
// Make sure the XMLHttpRequest object was instantiated
                if (xmlHttpReq)
                {
                    // This is a synchronous POST, hence UI blocking.
                    xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
                    xmlHttpReq.send(null);

                    if (xmlHttpReq.status == 200) {
                        var xmlobj1 = parseXml(removeCarriageReturns(xmlHttpReq.responseText));


                        var xmlString = serializeToString(xmlobj1.childNodes[0].childNodes[0].getElementsByTagName("message")[0]);

                        LoadXMLString(document.getElementById(a), xmlString);

//html += '</td></tr>';
                    }
                }
            }
        }
    }
}

/**
 * @description Serialize payload to string.
 * @method serializeToString
 * @private
 * @static
 * @param {dom} payload   xml payload
 * @return string
 */
function serializeToString(payload) {
    if (payload == null) return null;
    if (typeof(payload) == "string") {
        return payload;
    } else if (typeof(payload) == "object") {
        /*var browser = getBrowser();
         switch (browser) {
         case "gecko":
         case "safari":
         var serializer = new XMLSerializer();
         return serializer.serializeToString(payload);
         break;
         case "ie":
         case "ie7":
         return payload.xml;
         break;
         case "opera":
         var xmlSerializer = document.implementation.createLSSerializer();
         return xmlSerializer.writeToString(payload);
         break;
         case "undefined":
         throw "Unknown browser: serializeToString doesn't recognize the browser, to invoke browser-specific serialization code.";
         }*/

        var serializer = new XMLSerializer();
        return serializer.serializeToString(payload);

    } else {
        return false;
    }
}

/*function drawDiagram(){

 serverID = prefs.getString("serverID");
 serverUrl = prefs.getString("serverURL");
 var demo = 0;


 var contentEl = document.getElementById("graph");
 contentEl.innerHTML = "";

 var titleEl = document.getElementById("disp_title");
 titleEl.innerHTML = "";

 if(serverID=="" ){
 contentEl.innerHTML = "Please use the 'Configure' tab to select a Activity to monitor.";
 }else{
 var urlTail = "";
 // Set display title
 titleEl.innerHTML = "Activity : <strong>" + serverUrl + "</strong>";
 urlTail = serverUrl;

 // Set display title
 titleEl.innerHTML = "<strong>Monitoring operations information for " + serverUrl + "</strong>";

 var dataURL = "carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getActivityDetailsForServer&serverURL=" + urlTail;
 getActivityDetailList(dataURL);

 }
 gadgets.window.adjustHeight();
 }

 function getActivityDetailList(dataURL) {
 var xmlHttpReq = createXmlHttpRequest();
 var opList = [];
 // Make sure the XMLHttpRequest object was instantiated
 if (xmlHttpReq)
 {
 // This is a synchronous POST, hence UI blocking.
 xmlHttpReq.open("GET", dataURL + "&ms=" + new Date().getTime(), false);
 xmlHttpReq.send(null);

 if (xmlHttpReq.status == 200) {
 var xmlobj = parseXml(removeCarriageReturns(xmlHttpReq.responseText));

 var contentEl = document.getElementById("graph");
 contentEl.innerHTML = "";
 var htmltext = "<br /><br />"
 // var childNode = xmlobj.getElementsByTagName("level0")[0].getElementsByTagName("dataSet0")[0].getElementsByTagName("OperationName")[0].textContent;


 var html = '';
 html +='<table class=\"activity\" width=80% align="center">';
 html +='<th>Operation</th><th>TimeStamp</th>';
 for(var a = 0;a < xmlobj.childNodes[0].childNodes.length; a++){
 html +='<tr>';
 for(var b = (xmlobj.childNodes[0].childNodes[a].childNodes.length-1); b >= 0; b--){
 html +='<td>'+xmlobj.childNodes[0].childNodes[a].childNodes[b].textContent+'</td>';

 }
 html +='</tr>';
 }

 html +='</table>';

 contentEl.innerHTML = html;
 }

 return false;
 }
 return false;
 }*/


function parseXml(xml) {
    var dom = null;
    if (window.DOMParser) {
        try {
            dom = (new DOMParser()).parseFromString(xml, "text/xml");
        }
        catch (e) { dom = null; }
    }
    else if (window.ActiveXObject) {
        try {
            dom = new ActiveXObject('Microsoft.XMLDOM');
            dom.async = false;
            if (!dom.loadXML(xml)) // parse error ..
                window.alert(dom.parseError.reason + dom.parseError.srcText);
        }
        catch (e) { dom = null; }
    }
    else
        window.alert("oops");
    return dom;
}

// Registering onload handler
gadgets.util.registerOnLoadHandler(loadServerListForActivity);
</script>  ]]>
  </Content>
</Module>
