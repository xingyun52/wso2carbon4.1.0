<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
~  Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
--> 

<document xmlns="http://maven.apache.org/XDOC/2.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    
    <properties>
        <title>
            Gadget Tutorial
        </title>
    </properties>
	<head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <link href="css/bam-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body>
        <h1>Creating a Dashboard Gadget for WSO2 BAM</h1>
        <h3>Introduction</h3>

        <p>In this tutorial we explain how to write your own dashboard gadget for <a href="http://wso2.org/projects/bam">WSO2 Business Activity Monitor</a>. This will be covering the important aspects of creating a dashboard gadget. For you to understand this tutorial you will need some prior knowledge in Google Gadget API. We use some existing resources (JavaScript) in our example gadget, hence we assume that you have a working build of WSO2 Business Activity Monitor, before proceed.</p>

        <h3>Operations Count for Service Gadget</h3>

        <p>We will write an example gadget which shows the number of operations and the list of operations of a given service. The gadget user must be able to select the desired server from the monitored server list and then a specific service to get the operations. As we move forward, we will discuss some important steps of creating the example gadget. You can find the complete source pre of the gadget XML at the end of this article.</p>

        <p>Let's have a look at the first few lines of our gadget XML.</p>

        <pre>
            &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
            &lt;Module&gt;
             &lt;ModulePrefs
                  title="Operations Count for Service"
                  description="Latest Operations Count For Service"
                  author="Your Name" author_email="you@yourdomain.org"
                  author_location="Colombo, Sri Lanka"&gt;
                  &lt;Require feature="setprefs"/&gt;
                  &lt;Require feature="tabs"/&gt;
             &lt;/ModulePrefs&gt;
        </pre>

        <p>The first line declares that the document contains XML data. The &lt;Module&gt; tag, which is declared in the gadget specification is used to indicate that it is a Gadget XML. &lt;ModulePrefs&gt; contains meta data such as gadget title, description and author information. We use &lt;Require&gt; tag to declare some feature dependencies of the gadget which in this case are the user preferences and tabs.</p>

        <pre>&lt;UserPref name="serverID" display_name="Server to monitor" default_value="" datatype="string"&gt;&lt;/UserPref&gt;</pre>

        <pre>&lt;UserPref name="serviceID" display_name="Service to monitor" default_value="" datatype="string"&gt;&lt;/UserPref&gt;</pre>

        <p>Two user preferences, serverID and serviceID, are used to store the gadget configurations. This allows us to load the gadget data automatically when the gadget is reloaded.</p>

        <pre>
            &lt;Content type="html"&gt;
             &lt;![CDATA[ .......... ]]&gt;
            &lt;Content&gt;
        </pre>

        <p>We define the content type as HTML and all the logic (JavaScript) and the content will be defined inside a CDATA.</p>

        <pre>&lt;script type="text/javascript" src="js/retrieve-data.js"&gt;&lt;/script&gt;</pre>

        <p>"retrieve-data.js" is the main JavaScript that we use to retrieve data from the server. It is bundled with WSO2 Business Activity Monitor. This file contains functions to retrieve server and mediation data from the backend.</p>

        <p>In this example we add two drop downs as we need to allow the users to select a server from the monitored server list and then a service to get the operations. If you have a closer look at the "retrieve-data.js" you will find the predefined methods to carry out this task. Function "getServerList()" gives you a list of currently monitored servers in the following format.</p>

        <pre>"server1_id, server1_name | server2_id, server2_name | server3_id, server3_name"</pre>

        <p>Similarly, function "getServiceList()" gives you a list of available services for a selected server, formatted as follows.</p>

        <pre>"service1_id, service1_name | service2_id, service2_name | service3_id, service3_name"</pre>

        <p>These functions allow you to fetch raw data which can be then presented in a proper way within the gadget. However, in this tutorial we use the function "loadServerListWithServices()" to populate two drop downs for us. This function has to be declared as the "registerOnLoadHandler" of the gadget and also mentioned at the latter part of the tutorial.</p>

        <pre>
            &lt;div id="server_select_box"&gt;
             &lt;select id="serverIDs" onchange="loadServices();"&gt; &lt;/select&gt;
            &lt;/div&gt;
        </pre>

        <p>In order to create a drop down with all the monitored servers, we should define a &lt;select&gt; tag inside a div which id is defined as the "server_select_box".</p>

        <pre>
            &lt;div id="service_select_box"&gt;
             &lt;select id="services" onchange="refreshData();"&gt; &lt;/select&gt;
            &lt;/div&gt;
        </pre>

        <p>A similar step can be taken to create a drop down to select the services of a given server, except the div's id should be defined as "service_select_box".</p>

        <p>The gadget's logic can be defined using JavaScript inside a &lt;script&gt; tag. In our example, first we have to load all the user preferences of the gadget.</p>

        <pre>
            // Loading Gadget configuration
            var prefs = new _IG_Prefs(__MODULE_ID__);
            var serverID = prefs.getString("serverID");
            var serverURL = prefs.getString("serverURL");
            var serviceID = prefs.getString("serviceID");
            var serviceName = prefs.getString("serviceName");
        </pre>

        <p>Our "Operations Count for Service" gadget contains two tabs. "Display" tab is to display the list of operations and the configuration tab is to display the drop downs that we mentioned earlier. Gadget specification defined a feature called "tabs" that we included in our gadget using the &lt;Require&gt; tag inside the &lt;ModulePrefs&gt;. Following pre will convert the two div tags with ids "main_disp" and "disp_config", into two tabs.</p>

        <pre>
            // Adding Tabs
            var tabs = new gadgets.TabSet(__MODULE_ID__, "Display");
            tabs.addTab("Display", {
             contentContainer: document.getElementById("main_disp"),
             callback: drawDiagram
            });
            tabs.addTab("Configure", "disp_config");
        </pre>

        <p>As mentioned earlier, "retrieve-data.js" contains several important methods that are needed to retrieve data from the server. This includes server data and as well as mediation data. For example, you can use "getOperationsOfService(serverID, serviceID)" method to retrieve the operations for a given service. These methods return XML data in clear text and you will have to parse the results using a simple JavaScript parser.</p>

        <p>Second option is to use the Gadget API to retrieve the necessary data from a component called "flashdata-ajaxprocessor.jsp". This component returns data in XML format. In our example we use this option.</p>

        <pre>var dataURL = getAdminConsoleUrl() + "/carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getOperationsOfService&amp;serverID=" + serverID + "&amp;serviceID=" + serviceID;</pre>

        <p>When using the Gadget API to retrieve remote content an absolute (full) URL must be provided. Therefore, we use the method "getAdminConsoleUrl()" from "retrieve-data.js" to get the host address of our client instance. You should pass the desired function name as the parameter "funcName" and here we are using "getOperationsOfService".</p>

        <pre>
            function makeDOMRequest(dataURL) {
             var params = {};
             params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.DOM;
             gadgets.io.makeRequest(dataURL, response, params);
            }
        </pre>

        <p>Pass the generated URL into "gadgets.io.makeRequest(...)". It will generate a DOM object using the XML data fetched from "flashdata-ajaxprocessor.jsp". This DOM object can be used to access all the data nodes with an ease.</p>

        <p>Finally, the gadget initialization is carried out by setting the Javascript function: "loadServerListWithServices" as the registerOnLoadHandler.</p>

        <pre>
            // Registering onload handler
            gadgets.util.registerOnLoadHandler(loadServerListWithServices);
        </pre>

        <h3>Adding the Gadget to the Dashboard</h3>

        <p>You can host your gadget in a public location where gadget XML is accessible via HTTP. Click on the "Add Gadget" link and provide the HTTP URL of the gadget XML.</p>

        <h3>Summary</h3>

        <p>The process of creating a dashboard gadget for WSO2 Business Activity Monitor is pretty much similar to the process of creating any other dashboard gadget. All the necessary functions to retrieve server and mediation data are exposed through the "retrieve-data.js".</p>

        <p>This tutorial only covers important aspects of creating a BAM dashboard gadget. For a complete guide on gadgets please refer this <a href="http://wso2.org/library/articles/first-step-towards-wso2-gadget-server-authoring-deploying-u++sing-xml-gadgets">article</a>.</p>

        <h3>Gadget XML</h3>

        <pre>
            &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
            &lt;Module&gt;
            
             &lt;ModulePrefs
                title="Operations Count for Service"
                height="240"
                description="Latest Operations Count For Service"
                author="Your Name" author_email="carbon-dev@wso2.org"
                author_location="Colombo, Sri Lanka"&gt;
                &lt;Require feature="setprefs"/&gt;
                &lt;Require feature="tabs"/&gt;
               &lt;/ModulePrefs&gt;
            
               &lt;UserPref name="serverID" display_name="Server to monitor" default_value="" datatype="string"&gt;&lt;/UserPref&gt;
               &lt;UserPref name="serviceID" display_name="Service to monitor" default_value="" datatype="string"&gt;&lt;/UserPref&gt;
            
               &lt;Content type="html"&gt;
                &lt;![CDATA[
            
               	 &lt;script type="text/javascript" src="js/retrieve-data.js"&gt;&lt;/script&gt;
            
               	 &lt;div id="disp_config" style="display:none;height:300px;"&gt;
               	  	 &lt;table class="main-table"&gt;
                   &lt;tr&gt;
                     &lt;td&gt;&lt;div id="select_boxes"&gt;
                       &lt;table&gt;
                       &lt;tr&gt;
                       &lt;td&gt;&lt;div style="text-align: right; font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unipre","Verdana","Sans-serif","trebuchet ms" !important;"&gt; Server :&lt;/div&gt;&lt;/td&gt;
                       &lt;td&gt;&lt;div id="server_select_box"&gt;
                           &lt;select id="serverIDs" onchange="loadServices();"&gt;
                           &lt;/select&gt;
                       &lt;/div&gt;&lt;/td&gt;
                       &lt;/tr&gt;
                       &lt;tr&gt;
                       &lt;td&gt;&lt;div style="text-align: right;font-size:12px; font-family: "Lucida Grande","Lucida Sans","Microsoft Sans Serif", "Lucida Sans Unipre","Verdana","Sans-serif","trebuchet ms" !important;"&gt;Service :&lt;/div&gt;&lt;/td&gt;
                       &lt;td&gt;&lt;div id="service_select_box"&gt;
                           &lt;select id="services" onchange="refreshData();"&gt;
                           &lt;/select&gt;
                       &lt;/div&gt;&lt;/td&gt;
                       &lt;/tr&gt;
                       &lt;/table&gt;
                     &lt;/div&gt;&lt;/td&gt;
                   &lt;/tr&gt;
                  &lt;/table&gt;
               &lt;/div&gt;
            
               &lt;div id="main_disp" style="display:none;height:300px;"&gt;
                 &lt;div id="disp_title" class="titleText"&gt;&lt;/div&gt;
                 &lt;div id="content" &gt;Text&lt;/div&gt;
               &lt;/div&gt;
            
               &lt;script type="text/javascript"&gt;
            
               // Loading Gadget configuration
               var prefs = new _IG_Prefs(__MODULE_ID__);
               var serverID = prefs.getString("serverID");
               var serverURL = prefs.getString("serverURL");
               var serviceID = prefs.getString("serviceID");
               var serviceName = prefs.getString("serviceName");
            
               // Adding Tabs
               var tabs = new gadgets.TabSet(__MODULE_ID__, "Display");
               tabs.addTab("Display", {
                     contentContainer: ocument.getElementById("main_disp"),
                     callback: drawDiagram
                   });
            
               tabs.addTab("Configure", "disp_config");
            
               function drawDiagram() {
                 serverID = prefs.getString("serverID");
                 serverURL = prefs.getString("serverURL");
                 serviceID = prefs.getString("serviceID");
                 serviceName = prefs.getString("serviceName");
            
                 // Clear existing content
                 	 var contentEl = document.getElementById("content");
                 	 contentEl.innerHTML = "";
                 	 var titleEl=document.getElementById("disp_title");
                 	 titleEl.innerHTML = "";
            
                 	 // Check whether we have a server configured
                 	 if(serverID == "") {
                 	   contentEl.innerHTML = "Please use the 'Configure' tab to select a Server to monitor.";
                 	 }
                     else {
                   	   // Set display title
                   	   titleEl.innerHTML = "Server : &lt;strong&gt;" + serverURL + "&lt;/strong&gt; Service : &lt;strong&gt;" + serviceName + "&lt;/strong&gt;";
            
            
                   	   // Initialize display
                       var dataURL = getAdminConsoleUrl() + "/carbon/gauges/gadgets/flash/flashdata-ajaxprocessor.jsp?funcName=getOperationsOfService&amp;serverID=" + serverID + "&amp;serviceID=" + serviceID;
            
            
                       makeDOMRequest(dataURL);
                 	 }
               	 }
            
               function makeDOMRequest(dataURL) {
                        var params = {};
                        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.DOM;
                        gadgets.io.makeRequest(dataURL, response, params);
                   }
            
                function response(dataObj) {
                        var domData = dataObj.data;
                        var operationsList = domData.getElementsByTagName("level2");
                        var contentEl = document.getElementById("content");
                        var contentHtml = "&lt;div&gt;Number of Operations: &lt;strong&gt;" + operationsList.length + "&lt;/strong&gt; &lt;/div&gt;";
            
            
                        // Loop through all &lt;level2&gt; nodes and find the names of the Operations
                        for (var i = 0; i &lt; operationsList.length ; i++) {
                        var opName = operationsList.item(i).attributes.item(0).nodeValue;
                        contentHtml += "&lt;div&gt;" + opName + "&lt;/div&gt;";
                }
            
                   contentEl.innerHTML = contentHtml;
                }
            
             	 // Registering onload handler
               	 gadgets.util.registerOnLoadHandler(loadServerListWithServices);
             
             	 &lt;/script&gt;
             	]]&gt;
              &lt;/Content&gt;
            &lt;/Module&gt;
        </pre>
    </body>
</document>
