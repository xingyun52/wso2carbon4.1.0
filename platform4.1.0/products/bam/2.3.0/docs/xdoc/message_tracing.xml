<?xml version="1.0" encoding="ISO-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    
    <properties>
        <title>
            Sample-Cluster Monitoring
        </title>
    </properties>
    
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <link href="css/bam-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body xml:lang="en">
                
        <h1>
           Message Tracing
        </h1>
        
        <p>
           This sample explains about the message tracing and visualization with BAM. That is a request can be sent to the end point by passing through some intermediate stages, and by using BAM we can trace each messages and visualize the message body in each intermediate stage.
        </p>

	<p>
In this sample we'll consider a use case, that request for a web services to 'PlaceOrder' travels through some sequences in ESB and then it reaches the end point web service. 

	</p>
	<p><img src="./images/message_tracing.png" alt="Message Tracing sample sequence flow" title="Message Tracing sample sequence flow"/></p>
	
	<p>Assume a situation where the Order placing web services fronted by a proxy service, and the proxy service consists of the above sequences to mediate the message. As shown in the above diagram, the message first arrives to the 'AuthenticateSequence' and then it'll authenticate the credit card credentials and the account balance for the purchase. In the case of failure of authentication the message will be directed to AuthencateErrorHandlerSequence. In the success case the message will be dispatched to the 'PlaceOrderSequence'. Further here the main order processing will occur and in the case of failure of processing the order, the message will be dispatched to the 'PlaceOrderErrorHandlerSequence'.</p>

<p>In the each of the sequences for the IN and OUT the event will be published to the BAM with bam_activity_id and the current_sequence_name. Therefore the message can be identified by it's unique bam_activity_id and can trace how the message was dispatched from end-to-end. And in the case of failure of message, the message failure can be traced with visualizing the message path.</p>

<p>We'll consider the above use case in this sample, and see how we can trace the message from end-to-end. Each of the above steps will be described in detail in the following steps. </p>


<h2>Step 1 - Start BAM Server</h2> 
<ol>
<li>Download the WSO2-BAM Server</li>
<li>Unzip the WSO2-BAM.zip in the location where ever you prefer</li>
<li>Go to WSO2-BAM-HOME/bin folder in comman prompt. And type</li>

<ul>
<li> wso2server.sh (For ubuntu, linux, mac OS)</li>
<li> wso2server.bat (For Windows)</li>
</ul>

</ol>
<br/>
<br/>

<h2>Step 2 - Sending events to BAM Server.</h2>
<p><b>Pre-requisites: Apache-ant</b> </p>
<p>Make sure you machine has apache-ant, if not please install the apache-ant.(http://ant.apache.org/) </p>

<ol>
<li>Go to location from command prompt WSO2-BAM-HOME/samples/end-to-end-messageTracing</li>
<li>In this folder you can see the build.xml. Type 'ant' command from the command propmt. This will simulate  success and failure message requests for ESB and will pump the events to BAM</li>
</ol>


<h2>Step 3 - Create Index </h2>

<p>We need to create the Index for the BASE column family as the events received  by BAM is directly stored here. This index is used to filter out the events which has the bam_activity_id and will group them together.</p>

<p>At this moment we need to create the ClusterStreamSelector. Follow the below given steps to create the index.</p>
<ol>
<li>Login to the BAM management console. The link for the management console will be there in the server startup log. You can click on it and log in to the management console. Or you can  go to https://localhost:9443/ in your web browser, this will take you to the management console.</li>
<li>Go to Configure &#8594; Connection Parameters. There you can provide the connection parameter for the cassendra source. Default username, password is admin, admin. Click on Save button after filling out the connection paramters.</li>
<li>Go to Configure &#8594; BAM Database</li><br/><br/>
<p><img src="./images/cluster_monitor_step1.png" alt="Add index main page" title="Add Index main page"/></p><br/><br/>

<li>Click on the Add Index.</li><br/>
<li>Create Index named ActivityIndex, as shown below. And click Save.</li><br/><br/>
<p><img src="./images/activity_index.png" alt="Add Index" title="Add Index"/></p><br/>
</ol>
<br/>
<br/>

<h2>Step 4 - Create Analyzer</h2>
<p>In the analyzer you need to write the analytics such that it analyzes the gathered data by the BAM according to you requirement. In this sample we are interested in viewing the message trace from end-to-end, therefore we'll be writing such that the events with same bam_activity_id will be group up (Which corresponds to the one request), and sorted by the time stamp of the event.</p>

<p>The analyzer sequence for this situation,<br/>
<pre>
&lt;analyzerSequence name="MessageTracing"&gt;                                                                  
   &lt;trigger cron="1 * * * * ? *"/&gt;                                                                  
   &lt;analyzers&gt;                                                                                                                                                                                                        
      &lt;get name="BASE" batchSize="100"&gt;                                                                                                                                                         
         &lt;where index="ActivityIndex"&gt;                                                                         
            &lt;range column="bam_activity_id" start="" end=""/&gt;                                                        
         &lt;/where&gt;                                                                                                                                                        
      &lt;/get&gt;                                                 
      &lt;groupBy&gt;                                                                         
         &lt;field name="bam_activity_id"/&gt;                                                
      &lt;/groupBy&gt;                                                                           
      &lt;orderBy field="timestamp"/&gt;                                                                                                                       
   &lt;/analyzers&gt; 
&lt;/analyzerSequence&gt;  
</pre>
</p>

<p>The above given analyzer sequence is given in the WSO2BAM/Samples/end-to-end-messageTracing/MessageTracing.xml. Follow the below given steps to ad dthe analyzer sequence to the BAM server.</p>

<ol>
<li>Go to WSO2BAM/samples/end-to-end-messageTracing folder</li>
<li>Open the MessageTracing.xml and copy the content</li>
<li>Go to Configure &#8594; Analyzer Framework</li><br/><br/>
<p><img src="./images/cluster_monitor_step3.png" alt="Add analyzer main page" title="Add analyzer main page"/></p><br/><br/>
<li>Click on 'Add sequence' and go to the source view of the analyzer sequence.</li><br/><br/>
<li>Paste the content from the MessageTracing.xml in the step-2, and click on 'Save All' button.</li><br/><br/>
<p><img src="./images/messageTracingSequence.png" alt="Add analyzer" title="Add Analyzer"/></p><br/><br/>
</ol>

<p>Now you can see two index from the index table as below.</p><br/><br/>
<p><img src="./images/sequence_list_messageTracing.png" alt="All Index table" title="Table of created Indexes"/></p><br/><br/>


<h2>Step 5 - Create Gadget</h2>
<p>In this section we cna see how to design your own gadgets according to your requirement. In this section we created table to visulaize the message details of the events.</p>

<p>The below given steps will explain how to create the gadgets and visualize the data collected.</p>

<ol>
<li>Go to Configure &#8594; Gadget IDE</li>
<li>In order to obtain the unique data of bam_activity_id, there is a web service in BAM. To communicate with web service, click on the 'Web Service (WSDL)' in the Gadget IDE.That is since a message with corresponds to a unique bam_activity_id, will be having more than one events as it pass through many sequences. Therefore to obtain the unique bam_activity_id s' from pool of events we need to use the webservice</li><br/>
<p><img src="./images/cluster_monitor_step8.png" alt="Web sevice gadget" title="Web service gadget"/></p><br/><br/>

<li>You can see the WSDL of the web service mentioned above, in https://localhost:9443/services/IndexAdminService?wsdl2. Insert this WSDL file url in the gadget, as below. And click on 'load' button.</li><br/><br/>
<p><img src="./images/cluster_monitor_step9.png" alt="Web service gadget after load" title="Web service gadget after load button pressed"/></p><br/><br/>

<li>Select 'getIndexValues' for the field 'Operation' in the WSDL gadget.</li><br/><br/>
<p><img src="./images/cluster_monitor_step10.png" alt="Web service gadget after selecting getIndexvalues operation" title="Web service gadget after selecting ggetIndexValues operation"/></p><br/><br/>

<li>Click on the Text and connect as below. Note the two Text gadgets have been used. One text field here will mention the indexName, and other one will mention the indexedColum which as two parameters which is required to to the 'getIndexValues' operation.

<p>Therefore we should pass the respective Index name and indexed column name we created for the ActivityIndex. <br/>
IndexName --> AcivityIndex <br/>
IndexedColumn â€“-> bam_activity_id</p>
</li><br/><br/>
<p><img src="./images/onlyindex_wsdl.png" alt="Web service gadget with text gadget" title="Web service gadget wih text gadget"/></p><br/><br/>

<li>Now click on 'Combo box'. It'll immediately take to the design view, there you can resize and locate the combo box where ever you like. Then switch back to the 'DataFlow' view. Connect the 'return' node from the WSDL gadget to the 'text' node of the combo box as shown below.</li><br/><br/>
<p><img src="./images/wsdl_index_combo.png" alt="Web service gadget with combo box" title="Web service gadget wih combo box"/></p><br/><br/>

<li>This states the return value from the web service method is used to fill the combo box. Now go to the design view, there you can see the unique bam_activity_id (which is returned from the web service)</li><br/><br/>
<p><img src="./images/combo_box_designview.png" alt="Combo box in design view" title="Combo box in design view"/></p><br/><br/>

<li>
Click on the Cassendra sources. And fill it as the following and click on load button</li>
<ul>
<li>Tablename: BASE (Where the events are dumped in the BAM server)</li>
<li>TableIndexName: ActivityIndex</li>
<li>Index: bam_activity_id</li>
</ul><br/><br/>
<p><img src="./images/cluster_monitor_step14.png" alt="Cassendra source gadget" title="Cassendra source gadget"/></p><br/><br/>

<li>Click on the lexical string and and connect as below shown.</li>
<ul>
<li>Combo box-text &#8594; Cassendra source-from0</li>
<li>Combo box-text &#8594; lexicalString-text</li>
<li>lexicalString-text &#8594; cassendra source-to</li>
</ul>

<li>Click on the table. It'll take to the design view, locate and resize the gadget as you prefer.</li><br/><br/>

<li>Switch to the Dataflow view. Connect</li>
 <ul><li>Cassendra Source-rows &#8594; rows-Table.</li>
</ul><br/><br/>
<p><img src="./images/final_dataflow.png" alt="Final data flow" title="Final data flow"/></p><br/><br/>

<li>Switch to the design view and see the table. Here you can select the bam_activity_id from combo box which implicitly selecting each request and see the respective events published in the sequences.</li>
<ul><li>One message shows the success path. The belowfigure shows the such success path and the table data.In the below view you can notice that the message has passed thorough all the IN and OUT sequences and therefore it's a succesfull message.</li><br/><br/>
<p><img src="./images/success.png" alt="All Success sequence" title="All Success sequence"/></p><br/><br/>

<li>In the below message, you can notice the authentication has failed and therefore didn't pass to the place order sequence. You can see the message body to view the reason to the failure and it says 'Not enough creadit avaliable in the account'</li><br/><br/>
<p><img src="./images/auth_fail_message.png" alt="Authentication failure" title="Authentication failure"/></p><br/><br/>

<li>Similarly you can see the message fails in the placeOrder sequence, the reason cab be idetified via the message body. And can be notices the reasons is 'No enough product in stock'</li><br/><br/>
<p><img src="./images/place_order_faliure.png" alt="Place Order failure" title="Place Order failure"/></p><br/><br/>

</ul>

<li>Now you can see the created gadget from the main dash board.</li>
</ol>



<h2>Step 6 - Publish the gadget to dashboard</h2>
<ol>
<li>Go to the settings in gadget ide side pane and click on the publish</li><br/><br/>
<p><img src="./images/publish_gadget.png" alt="Publish gadget" title="Publish gadget"/></p><br/><br/>
<li>Type a name of the gadget and click on publish. A URL will be popped out. Copy the URL. <br/>
Eg: /registry/resource/_system/config/repository/dashboards/gadgets/ClusterSummary.xml<br/><br/>
<p><img src="./images/gedget_xml_url.png" alt="Publish gadget URL" title="Publish gadget URL"/></p>
</li>
<li>Go to BAM server home page, and click on the BAM dashboard.</li>
<li>Click on the Add Gadget, and paste the URL copied which publishing the gadget.</li>
<li>Add click on the add gadget.</li>
</ol>

<p>Now we have come to the end of the sample and now you know the way of generating the custom gadgets from BAM and tracing the messages. </p>

    </body>
</document>

