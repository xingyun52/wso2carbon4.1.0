<?xml version="1.0" encoding="ISO-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    
    <properties>
        <title>
            Data Publishers
        </title>
    </properties>
    
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <link href="css/bam-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body xml:lang="en">
        
        <h1>
            Data Publishers
        </h1>
        
        <p>
            Data publishers are software
            components, based on WSO2 Carbon component architecture, that implement
            WS-Eventing based publisher/subscriber model. Events are fired based on various
            thresholds that could be configured against various data publishers. The
            configured thresholds are evaluated in while service messages are invoked,
            hence the data publication happens real time.
        </p>
        
        <p>
            There are three types of
            data publishers.
        </p>
        
        <ol>
            <li>
                <h3>
                    Service Statistics Data publisher
                </h3>
                <p>
                    Can be deployed with WSO2 AS and is capable of
                    capturing and publishing service invocation data to BAM.
                </p>
            </li>
            <li>
                <h3>
                    Mediation Statistics Data publisher
                </h3>
                <p>
                    Can be deployed with WSO2 ESB and is capturing and
                    publishing mediation data for endpoints, proxy services and sequences
                </p>
            </li>
            <li>
                <h3>
                    Activity Data publishers
                </h3>
                <p>
                    Captures message data across a message flow in WSO2 AS and WSO2 ESB. There are two
                    activity data publishers, Activity Service Data publisher and Activity Mediation Data publisher.
                    Activity Service Data publisher is used with WSO2 AS to capture message data while Activity Mediation 
                    Data publisher is used with WSO2 ESB.
                </p>
            </li>
           </ol>
        
        <h2>
            Service Statistics Data publisher
        </h2>
        
        <p>
            Service Statistics Data publisher
            can be deployed with WSO2 AS and comes as a feature consisting of two WSO2 Carbon Components, the core component 
            and the UI component. Using the configuration user interface,
            eventing can be enabled or disabled. If eventing is disabled, no events will be fired at
            all. If eventing is enabled, events will be fired based on the System request count threshold value
            being satisfied.
        </p>

        <h3>
            System request count threshold
        </h3>

        <p>
            An event will be fired with system wide data, when
            the difference between the system request count at which the last event was
            fired and the current system request count becomes greater than this threshold
            value. The system here refers to the WSO2 AS instance with which the service
            data publisher is deployed.
        </p>

        
        <p>
            The general guideline for
            configuring the threshold value is that, if the frequency of request rate is
            high, then the threshold values should be set to have large values, otherwise
            lower. And the correct values for the thresholds should be set based on the experience
            gained after monitoring the systems for some time. Also, note that, you will
            have more requests hitting the server in peak business hours, compared to the
            off peak hours. Hence the averages between the peak and off peak request counts
            should be taking into account when deciding on the threshold values. In
            general, it would be ideal to have an event fired between every minute (60
            samples per hour) to five minutes (12 samples per hour) time range.
        </p>

        <p>
            The event fired will contain data for three level of statistics system, service and operation of the server
            at that given point.
        </p>
        
        <ul>
            <li>
                Request count
            </li>
            
            <li>
                Response count
            </li>
            
            <li>
                Fault count
            </li>
            
            <li>
                Average response time
            </li>
            
            <li>
                Maximum response time
            </li>
            
            <li>
                Minimum response time
            </li>
        </ul>
        
        <h3>
            Event Format
        </h3>
        
        <p>
            The XML schema for server data event is given below:
        </p>
        
        <pre>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://wso2.org/ns/2009/09/bam/service/statistics/data"
            tns="http://wso2.org/ns/2009/09/bam/service/statistics/data"&gt;
            
	            &lt;xsd:element name="Event"&gt;
	                &lt;xsd:complexType&gt;
	                    &lt;xsd:sequence&gt;
	                        &lt;xsd:element name="ServiceStatisticsData"&gt;
	                            &lt;xsd:complexType&gt;
	                                &lt;xsd:sequence&gt;
	                                    &lt;xsd:element name="ServerName" type="xsd:string"/&gt;
	                                    &lt;xsd:element name="AverageResponseTime" type="xsd:decimal"/&gt;
	                                    &lt;xsd:element name="MinimumResponseTime" type="xsd:long"/&gt;
	                                    &lt;xsd:element name="MaximumResponseTime" type="xsd:long"/&gt;
	                                    &lt;xsd:element name="RequestCount" type="xsd:integer"/&gt;
	                                    &lt;xsd:element name="ResponseCount" type="xsd:integer"/&gt;
	                                    &lt;xsd:element name="FaultCount" type="xsd:integer"/&gt;
	                                    &lt;xsd:element name="ServiceName" type="xsd:string" minOccurs="0"/&gt;
	                                    &lt;xsd:element name="OperationName" type="xsd:string" minOccurs="0"/&gt;
	                                &lt;/xsd:sequence&gt;
	                            &lt;/xsd:complexType&gt;
	                        &lt;/xsd:element&gt;
	                    &lt;/xsd:sequence&gt;
	                &lt;/xsd:complexType&gt;
	            &lt;/xsd:element&gt;
            &lt;/xsd:schema&gt;
        </pre>
        
        <p>
            Following is an example
            event with data that adheres to the above event format:
        </p>
        
        <pre>
            &lt;statdata:Event xmlns:statdata="http://wso2.org/ns/2009/09/bam/service/statistics/data"&gt;
	            &lt;statdata:ServiceStatisticsData&gt;
		            &lt;statdata:ServerName&gt;http://127.0.0.1:9763&lt;/statdata:ServerName&gt;
		            &lt;statdata:AverageResponseTime&gt;16.4&lt;/statdata:AveageResponseTime&gt;
		            &lt;statdata:MinimumResponseTime&gt;0&lt;/statdata:MinimumResponseTime&gt;
		            &lt;statdata:MaximumResponseTime&gt;109&lt;/statdata:MaximumResponseTime&gt;
		            &lt;statdata:RequestCount&gt;22&lt;/statdata:RequestCount&gt;
		            &lt;statdata:ResponseCount&gt;20&lt;/statdata:ResponseCount&gt;
		            &lt;statdata:FaultCount&gt;2&lt;/statdata:FaultCount&gt;
		            &lt;statdata:ServiceName&gt;HelloService&lt;/statdata:ServiceName&gt;
		            &lt;statdata:OperationName&gt;greet&lt;/statdata:OperationName&gt;
	            &lt;/statdata:ServiceStatisticsData&gt;
            &lt;/statdata:Event&gt;
        </pre>
        
        <p>
            This event format would be
            useful if you are to publish events to the service data subscriber endpoint
            form a custom data publisher on your own. For example, if you are to publish
            service data from a Microsoft .NET service into WSO2 BAM, you can use the event
            format information given here, and publish that data into the subscriber
            endpoint described below.
        </p>
        
        <h3>
            Subscriber Endpoint
        </h3>
        
        <p>
            The subscriber endpoint
            address for service event data that resides within a WSO2 BAM instance has the
            following format:
        </p>
        
        <p>
            https://[host
            name]:[port]/&lt;[Web
            context/]&gt;services/BAMServiceStatisticsSubscriberService
        </p>
        
        <p>
            for example, the subscriber
            endpoint can look like the following
        </p>
        
        <p>
            https://localhost:9444/bam/services/BAMServiceStatisticsSubscriberService
        </p>
        
        <p>
            This subscriber endpoint
            address is of significance if you are to publish data from a server other than
            WSO2 AS. You can implement your own custom data publisher to publish events, adhering
            to the event format given in the above section, to this endpoint. If your
            custom event publisher implements WS-Eventing, you can manage the subscription
            from the WSO2 BAM monitored server page. Else, you can add a custom server to
            WSO2 BAM and publish data to this endpoint on your own.
        </p>
        
        <h3>
            Installing
        </h3>
        
	<p>
		The following installation instructions apply to WSO2 AS version 3.2.0
	</p>
      <ol>
	     <li>
			Start <a href="http://wso2.com/products/application-server">WSO2 AS</a> 
			On Linux <br/>
			<i>wso2server.sh </i><br/>
			On MS Windows<br/>
            <i>wso2server.bat </i>
		</li>
		<li>
			After starting the server, go to AS management console
			<b>Configure-->Features-->Settings</b> menu.<br/>
			Give P2 repo link as,
			 <i>http://dist.wso2.org/p2/carbon/releases/3.2.0/</i><br/>
			 Then click 'Add'.
		<p>
            <img src="./images/bam-p2repo.png" alt="WSO2 p2 repo" title="WSO2 p2 repo"/>
        </p>
		</li>
	<li>
	    Go to 'Available Features' tab and select the above repository. Click 'Find Features'.<br/>
	    User can see all available features. From those,select 
	    <b><i>'WSO2 Carbon - BAM Service Statistics Data Publisher Feature'</i></b> and click <b>'Install'</b>
       <p>
            <img src="./images/bam-servicestat-feature.png" alt="Service stat feature" title="Service Stat Feture"/>
        </p> 
	</li>
	<li>
	Click 'Next' and accept the license agreement.
	</li>
	<li>
          Restart the WSO2 AS server.
	 </li>
   </ol>
        
        <h2>
            Mediation Statistics Data Publisher
        </h2>
        
        <p>
            Mediation Statistics Data Publisher can be deployed with WSO2 ESB and comes as installable feature having two WSO2 Carbon
            components, the core component and the UI component. Using the configuration
            user interface, eventing can be enabled or disabled at global level, as well as
            the three threshold values be set. If eventing is disabled, no events will be
            fired at all. If eventing is enabled, events will be fired based on the
            threshold values being satisfied. The three threshold values are:
        </p>
        
        <ol>
            <li>
                <h3>
                    Sequence request count threshold
                </h3>
                <p>
                    An event will be fired with sequence data, when the
                    difference between the sequence request count at which the last event was fired
                    and the current sequence request count becomes greater than this threshold
                    value.
                </p>
            </li>
            
            <li>
                <h3>
                    Endpoint request count threshold
                </h3>
                <p>
                    An event will be fired with endpoint data, when the
                    difference between the request count for an endpoint at which the last event
                    was fired for the endpoint and the current request count for that endpoint,
                    becomes greater than this threshold value.
                </p>
            </li>
            
            <li>
                <h3>
                    Proxy service request count threshold
                </h3>
                <p>
                    An event will be fired when the difference
                    between the request count for a proxy service at which the last event was fired
                    for that proxy service and the current request count for that proxy service
                    becomes greater than this threshold value.
                </p>
            </li>
        </ol>
        
        <p>
            The threshold value for
            sequences applies to all sequences present with the WSO2 ESB instance in
            general. This threshold cannot be configured for individual sequences to have
            different values. While this may look to be a limitation, it guards against
            potential performance hits in checking for the sequence names and sequence
            specific threshold for each sequence invocation. Hence, it is by design that
            this threshold is common for all sequences hosted with a WSO2 ESB instance.
        </p>
        
        <p>
            Like in the case of sequence
            request count threshold, endpoint request count threshold and proxy service
            request count threshold are common for all endpoints and proxy services
            respectively, and cannot be configured to have different values for individual
            endpoints or proxy services.
        </p>
        
        
        <p>
            Note that the system wide
            request counts for each monitored WSO2 ESB instance is not provided in the current
            implementation of WSO2 BAM. You can consider the total request count for a WSO2
            ESB instance to be the sum of the request counts for sequences, endpoints and
            proxy services. However, note that, for it to be possible for the mediation
            data publisher to populate data, the WSO2 ESB administrator must have enabled
            statistics on the sequence, endpoint or the proxy service to be monitored.
            Hence, if statistics are not enabled for any of the features in the ESB, then
            the assumption that sum of the individual counts to be equal the system count
            would not hold.
        </p>
        
        
        <p>
            As in the case of service
            statistics data publisher, the general guideline for configuring the threshold
            values is that, if the frequency of request rate is high, then the threshold
            values should be set to have large values, otherwise lower. And the correct
            values for the thresholds should be set based on the experience gained after
            monitoring the systems for some time. Also, note that, you will have more
            requests hitting the server in peak business hours, compared to the off peak
            hours. Hence the averages between the peak and off peak request counts should
            be taking into account when deciding on the threshold values. In general, it
            would be ideal to have an event fired between every minute (60 samples per
            hour) to five minutes (12 samples per hour) time range.
        </p>
        
        <p>
            Note that you can disable
            firing events at each level, by providing zero or a negative value as the
            threshold. For example, if you are interested in only the sequence data, you
            can set a positive value only for the sequence request count threshold and set
            endpoint and proxy service thresholds to zero. Alternatively, if you are
            interested in only the proxy service information, that request count threshold
            can be set to a positive value and sequence and endpoint threshold values set
            to zero.
        </p>
        
        <p>
            However, it should be also
            noted that, for enhanced monitoring of the system, it would be ideal to have
            data for all three categories.
        </p>
        
        <p>
            Each event for each category
            will have the following information:
        </p>
        
        <ul>
            <li>
                Request count
            </li>
            
            <li>
                Fault count
            </li>
            
            <li>
                Average response time
            </li>
            
            <li>
                Maximum response time
            </li>
            
            <li>
                Minimum response time
            </li>
        </ul>
        
        <p>
            In addition, the event will
            also have
        </p>
        
        <p>
            Server name
        </p>

        <p>
            TenantID
        </p>
        
        <p>
            Sequence, endpoint or the proxy service name
        </p>
        
        
        <h3>
            Event Format
        </h3>
        
        <p>
            Mediation data is published
            into WSO2 BAM using the user defined event format. The event format would be of
            interest, if you want to publish mediation data from your own custom publisher.
            See the section on user defined data for more information. However, if you are
            using the mediation data publisher, you do not have to worry about the event
            format, as the data publisher would handle the events for you.
        </p>
        
        <h3>
            Installing
        </h3>
        
        <p>
		The following installation instructions apply to WSO2 ESB version 3.0.0
		</p>
          <ol>
	     <li>
			Start <a href="http://wso2.com/products/enterprise-service-bus">WSO2 ESB</a> 
			On Linux <br/>
			<i>wso2server.sh </i><br/>
			On MS Windows<br/>
            <i>wso2server.bat </i>
		</li>
		<li>
			After starting the server, go to ESB management console
			<b>Configure-->Features-->Settings</b> menu.<br/>
			Give P2 repo link as,
			 <i>http://dist.wso2.org/p2/carbon/releases/3.2.0/</i><br/>
			 Then click 'Add'.
		
		</li>
	<li>
	    Go to 'Available Features' tab and select the above repository. Click 'Find Features'.<br/>
	    User can see all available features. From those,select 
	    <b><i>'WSO2 Carbon - BAM Mediation Statistics Data Publisher Feature'</i></b> and click <b>'Install'</b>
   
	</li>
	<li>
	Click 'Next' and accept the license agreement.
	</li>
	<li>
          Restart the WSO2 ESB server.
	   
    </li>

  
     </ol>	
        
        
        <h2>
            User Defined Data
        </h2>
        
        <p>
            User defined data model, supported by WSO2 BAM, provides an extension point
            for users to allow them publish any custom data into WSO2 BAM database. This
            allows users to publish custom data as key/value pairs and then later process
            them as they wish, for monitoring custom situations, outside what is supported
            by WSO2 BAM by default. This is the event format used for mediation statistics
            data publishing as well.
        </p>
        
        <h3>
            Event Format
        </h3>
        
        <p>
            Following is the XML schema for user defined data event format.
        </p>
        
        <pre>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://wso2.org/ns/2009/09/bam/server/user-defined/data"
            tns="http://wso2.org/ns/2009/09/bam/service/statistics/data"&gt;
            
	            &lt;xsd:element name="Event"&gt;
		            &lt;xsd:complexType&gt;
			            &lt;xsd:sequence&gt;
				            &lt;xsd:element name="ServerUserDefinedData"&gt;
					            &lt;xsd:complexType&gt;
						            &lt;xsd:sequence&gt;
							            &lt;xsd:element name="ServerName" type="xsd:string"/&gt;
								    &lt;xsd:element name="TenantID" type="xsd:string"/&gt;
							            &lt;xsd:element name="Data" minOccurs="0" maxOccurs="unbounded"&gt;
								            &lt;xsd:complexType&gt;
									            &lt;xsd:sequence&gt;
										            &lt;xsd:element name="Key" type="xsd:string"/&gt;
										            &lt;xsd:element name="Value" type="xsd:string"/&gt;
									            &lt;/xsd:sequence&gt;
								            &lt;/xsd:complexType&gt;
							            &lt;/xsd:element&gt;
						            &lt;/xsd:sequence&gt;
					            &lt;/xsd:complexType&gt;
				            &lt;/xsd:element&gt;
			            &lt;/xsd:sequence&gt;
		            &lt;/xsd:complexType&gt;
	            &lt;/xsd:element&gt;
            &lt;/xsd:schema&gt;
        </pre>
        
        <p>
            As you can see, the event
            has provision to provide an array of key/value pairs. The mediation data
            publisher is implemented using this model. Following is an example message,
            where the event contains information on an endpoint:
        </p>
        
        <pre>
            &lt;svrusrdata:Event xmlns:svrusrdata="http://wso2.org/ns/2009/09/bam/server/user-defined/data"&gt;
	            &lt;svrusrdata:ServerUserDefinedData&gt;
		            &lt;svrusrdata:ServerName&gt;http://127.0.0.1:8280&lt;/svrusrdata:ServerName&gt;
			    &lt;svrusrdata:TenantID&gt;0&lt;/svrusrdata:TenantID&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInMaxProcessingTime-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;15&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInAvgProcessingTime-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;15.0&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInMinProcessingTime-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;15&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInCount-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;1&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInFaultCount-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;0&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInID&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;simple&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointInCumulativeCount-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;3&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
		            &lt;svrusrdata:Data&gt;
			            &lt;svrusrdata:Key&gt;EndpointOutCumulativeCount-simple&lt;/svrusrdata:Key&gt;
			            &lt;svrusrdata:Value&gt;0&lt;/svrusrdata:Value&gt;
		            &lt;/svrusrdata:Data&gt;
	            &lt;/svrusrdata:ServerUserDefinedData&gt;
            &lt;/svrusrdata:Event&gt;
        </pre>
        
        <p>
            You can use this event format to publish data to the user defined data
            subscriber endpoint, described below.
        </p>
        
        <h3>
            Subscriber Endpoint
        </h3>
        
        <p>
            The subscriber endpoint
            address for user defined event data that resides within a WSO2 BAM instance has
            the following format:
        </p>
        
        <p>
            https://[host
            name]:[port]/&lt;[Web
            context/]&gt;services/BAMServerUserDefinedDataSubscriberService
        </p>
        
        <p>
            for example, the subscriber
            endpoint can look like the following
        </p>
        
        <p>
            https://localhost:9444/bam/services/BAMServerUserDefinedDataSubscriberService
        </p>
        
        <p>
            You can implement your own
            custom data publisher to publish events, adhering to the event format given in
            the above section, to this endpoint. If your custom event publisher implements
            WS-Eventing, you can manage the subscription from the WSO2 BAM monitored server
            page. Else, you can add a custom server to WSO2 BAM and publish data to this
            endpoint on your own.
        </p>

        <h2>
		Activity Data Publishers            
        </h2>
        
        <p>
	    Activity Data Publishers capture a message flow through monitored servers and lets 
            the user examine the message flow details at BAM side. In order to cope with high volume
            message flows BAM provides message filtering capabilities so that user can narrow 
            down to the messages of interest with certain filterings. Activity data publishers 
            are two fold.
        </p>

        <ol>
            <li>
                <p> Activity Service Data Publisher</p>
            </li>
            <li>
                <p> Activity Mediation Data Publisher</p>
            </li>
       </ol>

        <h3>
		Activity Service Data Publisher            
        </h3>

        <p>
	    This publisher can be used to capture details of messages flowing through WSO2 Application Server,
            WSO2 Enterprise Service Bus and WSO2 Data Service Server. This publisher is based on an Axis2 
            handler implmentation which captures messages as they pass through handler chain and publish 
            required details to BAM.
        </p>

        <h3>
            Installing
        </h3>
        
        <p>
		The following installation instructions apply to WSO2 ESB 4.0.0, WSO2 AS 4.1.0 and WSO2 DSS 2.6.0.
		</p>
          <ol>
	     <li>
			Start the respective carbon server 
			On Linux <br/>
			<i>wso2server.sh </i><br/>
			On MS Windows<br/>
            <i>wso2server.bat </i>
		</li>
		<li>
			After starting the server, go to management console
			<b>Configure-->Features-->Settings</b> menu.<br/>
			Give P2 repo link as,
			 <i>http://dist.wso2.org/p2/carbon/releases/3.2.0/</i><br/>
			 Then click 'Add'.
		
		</li>
	<li>
	    Go to 'Available Features' tab and select the above repository. Click 'Find Features'.<br/>
	    User can see all available features. From those,select 
	    <b><i>'WSO2 Carbon - BAM Activity Service Data Publisher Feature'</i></b> and click <b>'Install'</b>
   
	</li>
	<li>
	Click 'Next' and accept the license agreement.
	</li>
	<li>
          Restart the server.
	   
    </li>

  
     </ol>	

        <h3>
		Activity Mediation Data Publisher            
        </h3>

        <p>
	    This publisher can be used to capture details of messages flowing through WSO2 Enterprise Service Bus. 
	    This publisher is based on a Synapse mediator implmentation which captures messages as they pass through
            the mediator sequence and publish required details to BAM. Eventhough the event details published would be
            similar to that of Activity Service Data Publisher engaged to ESB, the difference of this publisher is the
            flexibility with which this publisher can be engaged inside ESB. Unlike Activity Service Publisher this publisher
            can be engaged at multiple locations inside ESB. For example if it is required to monitor a message flow within 
            a sequence of the ESB the class mediator of the publisher can be engaged at the points which message information should be
            published to BAM.
        </p>

        <h3>
            Installing
        </h3>
        
        <p>
		The following installation instructions apply to WSO2 ESB 4.0.0.
		</p>
          <ol>
	     <li>
			Start <a href="http://wso2.com/products/enterprise-service-bus">WSO2 ESB</a> 
			On Linux <br/>
			<i>wso2server.sh </i><br/>
			On MS Windows<br/>
            <i>wso2server.bat </i>
		</li>
		<li>
			After starting the server, go to ESB management console
			<b>Configure-->Features-->Settings</b> menu.<br/>
			Give P2 repo link as,
			 <i>http://dist.wso2.org/p2/carbon/releases/3.2.0/</i><br/>
			 Then click 'Add'.
		
		</li>
	<li>
	    Go to 'Available Features' tab and select the above repository. Click 'Find Features'.<br/>
	    User can see all available features. From those,select 
	    <b><i>'WSO2 Carbon - BAM Activity Mediation Data Publisher Feature'</i></b> and click <b>'Install'</b>
   
	</li>
	<li>
	Click 'Next' and accept the license agreement.
	</li>
	<li>
          Restart the ESB server.
	   
    </li>

  
     </ol>

        <h2>
		Activity Data Event          
        </h2>

        <p>
            A similar event format is used in both Activity Service and Activity Mediation Data Publishers.
        </p>
        
        <h3>
            Event Format
        </h3>
        
        <p>
            Following is the XML schema for user defined data event format.
        </p>

        <pre>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://wso2.org/ns/2009/09/bam/service/activity/data"
            tns="http://wso2.org/ns/2009/09/bam/service/activity/data"&gt;
            
	            &lt;xsd:element name="Event"&gt;
		            &lt;xsd:complexType&gt;
			            &lt;xsd:sequence&gt;
				            &lt;xsd:element name="ActivityData"&gt;
					            &lt;xsd:complexType&gt;
						            &lt;xsd:sequence&gt;
							            &lt;xsd:element name="ServerName" type="xsd:string"/&gt;
								    &lt;xsd:element name="ActivityID" type="xsd:string"/&gt;
							            &lt;xsd:element name="MessageID" type="xsd:string"/&gt;
								    &lt;xsd:element name="ServiceName" type="xsd:string"/&gt;
								    &lt;xsd:element name="OperationName" type="xsd:string"/&gt;
								    &lt;xsd:element name="ActivityName" type="xsd:string"/&gt;
								    &lt;xsd:element name="ActivityDescription" type="xsd:string"/&gt;
								    &lt;xsd:element name="RemoteIPAddress" type="xsd:string"/&gt;
								    &lt;xsd:element name="UserAgent" type="xsd:string"/&gt;
								    &lt;xsd:element name="MessageDirection" type="xsd:string"/&gt;
								    &lt;xsd:element name="MessageBody" type="xsd:string" minOccurs="0"/&gt;
								    &lt;xsd:element name="TimeStamp" type="xsd:dateTime"/&gt;
							            &lt;xsd:element name="XPathExpressions" minOccurs="0"&gt;
								            &lt;xsd:complexType&gt;
									            &lt;xsd:sequence&gt;
							            			&lt;xsd:element name="XPathExpression" minOccurs="0"  												maxOccurs="unbounded"&gt;
												&lt;xsd:complexType&gt;
									            			&lt;xsd:sequence&gt; 															&lt;xsd:element name="ExpressionKey" 														        type="xsd:string"/&gt; 	
														&lt;xsd:element name="Expression" 														        type="xsd:string"/&gt;
														&lt;xsd:element name="Alias" 														        type="xsd:string"/&gt;
														&lt;xsd:element name="XPathValue" 														        type="xsd:string"/&gt;
														&lt;xsd:element name="Namespaces" 															minOccurs="0"&gt;
															&lt;xsd:complexType&gt;
									            						&lt;xsd:sequence&gt;
																	&lt;xsd:element 																	name="Namespace" 																		type="xsd:string"
																	minOccurs="0" 																		maxOccurs="unbounded"/&gt;
																&lt;/xsd:sequence&gt;
									            					&lt;/xsd:complexType&gt;
														&lt;/xsd:element&gt;
													&lt;/xsd:sequence&gt;
									            		&lt;/xsd:complexType&gt;
											&lt;/xsd:element&gt;
									            &lt;/xsd:sequence&gt;
								            &lt;/xsd:complexType&gt;
							            &lt;/xsd:element&gt;
							            &lt;xsd:element name="ActivityProperties" minOccurs="0"&gt;
								            &lt;xsd:complexType&gt;
									            &lt;xsd:sequence&gt;
							            			&lt;xsd:element name="ActivityProperty" minOccurs="0"  												maxOccurs="unbounded"&gt;
												&lt;xsd:complexType&gt;
									            			&lt;xsd:sequence&gt; 															&lt;xsd:element name="ActivityPropertyChild" 														        type="xsd:string"/&gt; 	
														&lt;xsd:element name="PropertyValue" 														        type="xsd:string"/&gt;
													&lt;/xsd:sequence&gt;
									            		&lt;/xsd:complexType&gt;
											&lt;/xsd:element&gt;
									            &lt;/xsd:sequence&gt;
								            &lt;/xsd:complexType&gt;
							            &lt;/xsd:element&gt;
								    &lt;xsd:element name="OutMessageID" type="xsd:string minOccurs="0""/&gt;
								    &lt;xsd:element name="RequestMessageStatus" type="xsd:string" minOccurs="0"/&gt;
								    &lt;xsd:element name="ResponseMessageStatus" type="xsd:string" minOccurs="0"/&gt;
						            &lt;/xsd:sequence&gt;
					            &lt;/xsd:complexType&gt;
				            &lt;/xsd:element&gt;
			            &lt;/xsd:sequence&gt;
		            &lt;/xsd:complexType&gt;
	            &lt;/xsd:element&gt;
            &lt;/xsd:schema&gt;
        </pre>

        <p>
            Following is a sample event for this schema.
        </p>

        <pre>
		&lt;soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelo pe/"&gt;
			&lt;activitydata:Event xmlns:activitydata="http://wso2.org/ns/2009/09/bam/service/activity/data"&gt;
					&lt;activitydata:ActivityData&gt;
					&lt;activitydata:ServerName&gt;https://10.10 0.1.143:9443&lt;/activitydata:ServerName&gt;
					&lt;activitydata:ActivityID&gt;prash491-a03a-426 0-b177-c493ab7a2dbb&lt;/activitydata:ActivityID&gt;
					&lt;activitydata:MessageID /&gt;
					&lt;activity data:ServiceName&gt;SampleHelloService&lt;/activitydata:ServiceName&gt;
					&lt;activitydata:OperationName&gt;sayHello&lt;/activitydata:OperationName&gt;
					&lt;activitydata:ActivityName&gt;hello2 &lt;/activitydata:ActivityName&gt;
					&lt;activitydata:ActivityDescription&gt;say hello2&lt;/activitydata:ActivityDescription&gt;
					&lt;activitydata:RemoteIPAddress&gt;127.0.0.1&lt;/activitydata:RemoteIPAddress&gt;
					&lt;activitydata:UserAgent&gt;%%%%%&lt;/activitydata:UserAgent&gt;  // Optional
					&lt;activitydata:MessageDirection&gt;request&lt;/activitydata:MessageDirection&gt;
					&lt;activitydata:MessageBody&gt;
						&lt;soap:Body xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
					 		&lt;typ:greet xmlns:typ="http://www.wso2.org/types"&gt;
					 			&lt;name&gt;John&lt;/name&gt;
					 		&lt;/typ:greet&gt;
						&lt;/soap:Body&gt; 
					&lt;/activitydata:MessageBody&gt;  // Optional
					&lt;activitydata:TimeStamp&gt;2011-04-28 19:00:54&lt;/activitydata:TimeStamp&gt;
					&lt;activitydata:XPathExpressions&gt; // Optional
						&lt;activitydata:XPathExpression&gt; // Optional
							&lt;activitydata:ExpressionKey&gt;Name&lt;/activitydata:ExpressionKey&gt;
							&lt;activitydata:Expression&gt;/typ:greet/name&lt;/activitydata:Expression&gt;
							&lt;activitydata:Alias&gt;GreetingName&lt;/activitydata:Alias&gt;
							&lt;activitydata:Namespaces&gt; // Optional
								&lt;activitydata:Namespace&gt;typ@http://www.wso2.org/types&lt;/activitydata:Namespace&gt;
							&lt;/activitydata:Namespaces&gt;
							&lt;activitydata:XPathValue&gt;John&lt;/activitydata:XPathValue&gt;
						&lt;/activitydata:XPathExpression&gt;
					&lt;/activitydata:XPathExpressions&gt;
					&lt;activitydata:ActivityProperties&gt; // Optional
						&lt;activitydata:ActivityProperty&gt; // Optional
							&lt;activitydata:ActivityPropertyChild&gt;Name&lt;/activitydata:ActivityPropertyChild&gt;
							&lt;activitydata:PropertyValue&gt;//name&lt;/activitydata:PropertyValue&gt;
						&lt;/activitydata:ActivityProperty&gt;
					&lt;/activitydata:ActivityProperties&gt;
					&lt;activitydata:OutMessageID/&gt;   // Optional
					&lt;activitydata:RequestMessageStatus&gt;0&lt;/activitydata:MessageDirection&gt;  // Optional
					&lt;activitydata:ResponseMessageStatus/&gt;   // Optional
				&lt;/activitydata:ActivityData&gt;
 			&lt;/activitydata:Event&gt;
		&lt;/soapenv:Body&gt;
        </pre>

        
        <p>
            You can use this event format to publish data to the activity data
            subscriber endpoint, described below.
        </p>
        
        <h3>
            Subscriber Endpoint
        </h3>
        
        <p>
            The subscriber endpoint
            address for activity event data that resides within a WSO2 BAM instance has
            the following format:
        </p>
        
        <p>
            https://[host
            name]:[port]/&lt;[Web
            context/]&gt;services/BAMActivityDataStatisticsSubscriberService
        </p>
        
        <p>
            for example, the subscriber
            endpoint can look like the following
        </p>
        
        <p>
            https://localhost:9444/bam/services/BAMActivityDataStatisticsSubscriberService
        </p>

    </body>
</document>
