<?xml version="1.0" encoding="ISO-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>
            Analyzers
        </title>
    </properties>

    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <link href="css/bam-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
    </head>
    <body xml:lang="en">

        <h1>
           Analyzers
        </h1>

        <p>
            With BAM you can write your own analyzer sequence such that it analyzes the data collected by BAM.
	The analyzer provides you multiple ways to write your analyzer sequence and get your required information out of the collected bunch of data by BAM.
	You can have multiple operations according to your requirement such as get, aggregate, order, failure, alert, etc.
	And furthermore, the analyzer can be scheduled to occur in customized time instances such as once a day, once a minute, every Wednesday at 12.15, every 30th at 12 midnight.

	There are many types of analyzers provided by BAM, to cater the all user requirements.
		<ol>
			<li><a href="#Get">Get Analyzer</a></li>
			<li><a href="#Put">Put Analyzer</a></li>
			<li><a href="#GroupBy">GroupBy Analyzer</a></li>
			<li><a href="#OrderBy">OrderBy Analyzer</a></li>
			<li><a href="#Extract">Extract Analyzer</a></li>
			<li><a href="#Drop">Drop Analyzer</a></li>
			<li><a href="#Fault">Fault Detection Analyzer</a></li>
			<li><a href="#Alert">Alert Trigger</a></li>
		</ol>
        </p>
<p>
<pre>


</pre>
</p>

<a name="Get"></a>
<h2>Get Analyzer</h2>

	<p>
        This analyzer retrieves data from an index. Therefore, before using the get analyzer
        an index should be created. More information about creating an index is available at
        <a href="analyzer-framework.html#index">analyzer-framework.html</a>
    </p>
    <p>
<h3> Syntax : </h3>
<pre>
  &lt;get name='' batchSize='integer'&gt;
  [0..1]  &lt;where index=''/&gt;
   &lt;range column='' start='' end=''/&gt; [1..*]
   &lt;/where&gt;
   &lt;/get&gt;
</pre>
</p>

<p>
<h3>Syntax Explanation : </h3>
<pre>
  &lt;get name='' batchSize='integer'&gt;                       :name = the column family to
                                                                retrieve data from
                                                                batchSize = the number of
                                                                record to retrieve to memeory
                                                                at one instance
  [0..1]  &lt;where index=''/&gt;                               :index = the name of the index
                                                                to retrieve
   &lt;range column='' start='' end=''/&gt; [1..*]              :column = the column that was
                                                                indexed by the given index
                                                                :start = Starting value of a
                                                                range
                                                                :end = Ending value of a
                                                                range
                                                                NOTE: Both start and end
                                                                should be empty strings ("")
                                                                to retrieve all values for
                                                                the column family for the
                                                                index

   &lt;/where&gt;
   &lt;/get&gt;
</pre>
</p>


<p>
<h3> Example : </h3>
<ol>
    <li>Example 1</li>
<ul>
 <li> Input : There is No input for the get analyzer.</li>

 <li> Existing data in column family 'result': </li>
<pre>
    {ESB} : {{requestCount : 65}, {responseCount : 65}, {responseTime : 7.0} }
    {AS} : {{requestCount : 4}, {responseCount : 4}, {responseTime : 23.0} }
    {BAM} : {{requestCount : 56}, {responseCount : 56}, {responseTime : 35} }
    {BRS} : {{requestCount : 43}, {responseCount : 43}, {responseTime : 53.3} }
</pre>
 <li> Get specification : </li>
<pre>
  &lt;get name='result' batchSize='2'&gt;
  [0..1]  &lt;where index='resultIndex'/&gt;
   &lt;range column='requestCount' start='' end=''/&gt;
   &lt;/where&gt;
   &lt;/get&gt;

</pre>

<li> Output : Retrieved data from the column family 'result' </li>
 <pre>
    {ESB} : {{requestCount : 65}, {responseCount : 65}, {responseTime : 7.0} }
    {AS} : {{requestCount : 4}, {responseCount : 4}, {responseTime : 23.0} }


</pre>
</ul>
    <li>Example 2</li>
<ul>
 <li> Input : There is No input for the get analyzer.</li>

 <li> Existing data in column family 'result': </li>
<pre>
    {ESB} : {{requestCount : 65}, {responseCount : 65}, {responseTime : 7.0} }
    {AS} : {{requestCount : 4}, {responseCount : 4}, {responseTime : 23.0} }
    {BAM} : {{requestCount : 56}, {responseCount : 56}, {responseTime : 35} }
    {BRS} : {{requestCount : 43}, {responseCount : 43}, {responseTime : 53.3} }
</pre>
 <li> Get specification : </li>
<pre>
  &lt;get name='result' batchSize='100'&gt;
  [0..1]  &lt;where index='resultIndex'/&gt;
   &lt;range column='requestCount' start='AS' end='BRS'/&gt;
   &lt;/where&gt;
   &lt;/get&gt;

</pre>

<li> Output : Retrieved data from the column family 'result' </li>
 <pre>
    {AS} : {{requestCount : 4}, {responseCount : 4}, {responseTime : 23.0} }
    {BAM} : {{requestCount : 56}, {responseCount : 56}, {responseTime : 35} }
    {BRS} : {{requestCount : 43}, {responseCount : 43}, {responseTime : 53.3} }


</pre>
</ul>
</ol>
 </p>



<a name="Put"></a>
<h2>Put Analyzer</h2>
        <p> This analyzer stores data to the a given column family. Currently storing grouped rows is not supported. Only list of rows can be stored as of now. Additionally it can be defined what to be done in case the row with given key already exists. The behaviour is either to replace the entire row or aggregate specified fields of existing row with the new row being stored.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
  &lt;put name='' dataSource=''&gt;
     (0..1)&lt;onExist&gt;
              &lt;replace/&gt;
              &lt;aggregate&gt;
                 +&lt;measure name='' aggregationType=''/&gt;
              &lt;/aggregate&gt;
           &lt;/onExist&gt;
  &lt;/put&gt;
</pre>
	</p>

<p>
<h3>Syntax Explanation : </h3>
<pre>
 &lt;put name='' dataSource=''&gt;                              : name = the column family to store
                                                            dataSource = the data source this
                                                            table belongs to.
    (0..1)&lt;onExist&gt;                                       : specifies the behaviour if row with the
                                                            given key already exists. If not present
                                                            the default behaviour is to replace the
                                                            row.
             &lt;replace/&gt;                                   : replace the row. This is the default behaviour.
             &lt;aggregate&gt;                                  : aggregate given fields of existing and new row and store.
                +&lt;measure name='' aggregationType=''/&gt;    : the field to be aggregated along with the type of
                                                            aggregation. (SUM, MIN, MAX, AVG, CUM). (The other
                                                            fields will get replaced if existing or newly added
                                                            to the stored row.)
             &lt;/aggregate&gt;
          &lt;/onExist&gt;
 &lt;/put&gt;

</pre>
</p>


<p>
<h3> Example : </h3>
<ul>
 <li> Input : List of rows as given below </li>
<pre>
    {ESB} : {{requestCount : 32}, {responseCount : 32}, {responseTime : 3.0} }
    {AS} : {{requestCount : 23}, {responseCount : 23}, {responseTime : 23.0} }
    {BAM} : {{requestCount : 31}, {responseCount : 31}, {responseTime : 12.3} }
    {BRS} : {{requestCount : 43}, {responseCount : 43}, {responseTime : 53.3} }

</pre>

 <li> Existing data in column family 'result': </li>
<pre>
    {ESB} : {{requestCount : 65}, {responseCount : 65}, {responseTime : 7.0} }
    {AS} : {{requestCount : 4}, {responseCount : 4}, {responseTime : 23.0} }
    {BAM} : {{requestCount : 56}, {responseCount : 56}, {responseTime : 35} }
    {allKeys} : {{AS}, {BAM}, {ESB}} ==> This is the index row

</pre>
 <li> Put specification : </li>
<pre>
       &lt;put name='result' indexRow='allKeys'&gt;
           &lt;onExist&gt;
              &lt;aggregate&gt;
                 &lt;measure name='requestCount' aggregationType='SUM'/&gt;
                 &lt;measure name='responseCount' aggregationType='SUM'/&gt;
                 &lt;measure name='responseTime' aggregationType='AVG'/&gt;
              &lt;/aggregate&gt;
           &lt;/onExist&gt;
       &lt;/put&gt;

</pre>

<li> Output : Modified data in the column family 'result' </li>
 <pre>
    {ESB} : {{requestCount : 97}, {responseCount : 97}, {responseTime : 5.0} }
    {AS} : {{requestCount : 27}, {responseCount : 27}, {responseTime : 23.0} }
    {BAM} : {{requestCount :87}, {responseCount : 87}, {responseTime : 23.65} }
    {BRS} : {{requestCount : 43}, {responseCount : 43}, {responseTime : 53.3} }
    {allKeys} : {{AS}, {BAM}, {BRS}, {ESB}}  ==> This is the index row


</pre>
</ul>
 </p>


<a name="GroupBy"></a>
<h2>GroupBy Analyzer</h2>
        <p>  This analyzer groups the rows according the values of the columns specified by 'field' or 'time'. The result is a map with each unique concatenated value of 'field' columns as key and the list of rows having this unique values in their respective columns, as map value. 'time' is a special field containing a date time whose value can be rounded up to given granularity (e.g. : hour) during the grouping.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
  &lt;groupBy&gt;
              +&lt;field name=''/&gt;
              (0..1)&lt;time name='' granularity='minute,hour,day,month,year'/&gt;
           &lt;/groupBy&gt;
</pre>
	</p>

<p>
<h3> Example : </h3>
<ol>
<li> Example 1: </li>

<ul>
 <li> Input : List of rows as given below </li>
<pre>
   {employee1} : {{name : ben}, {age : 42}, {post : eng}, {dept : E1}, {joinDate : 2011-01-21} }
   {employee2} : {{name : alex}, {age : 35}, {post : admin}, {dept : A1}, {joinDate : 2011-03-24} }
   {employee3} : {{name : bob}, {age : 48}, {post : eng}, {dept : E1}, {joinDate : 2011-01-22} }
   {employee4} : {{name : sarah}, {age : 26}, {post : admin}, {dept : A2 }, {joinDate : 2008-02-28} }
   {employee5} : {{name : ben}, {age : 42}, {post : eng} , {dept : E2}, {joinDate : 2010-07-23} }

</pre>

 <li> GroupBy Specification : </li>
<pre>
         &lt;groupBy&gt;
            &lt;field name='dept'/&gt;
            &lt;field name='post'/&gt;
            &lt;time name='joinDate' granularity='month'/&gt;
         &lt;/groupBy&gt;

</pre>

<li>Output : Rows grouped by each unique concatenated value of columns 'dept', 'post' and 'joinDate'.
Values of 'joinDate' column has been rounded to months as defined by 'granularity'. </li>
 <pre>
   [E1---eng---2011-01]   : {employee1} : {{name : ben}, {age : 42}, {post : eng}, {dept : E1}, {joinDate : 2011-01-21} }
                            {employee3} : {{name : bob}, {age : 48}, {post : eng}, {dept : E1}, {joinDate : 2011-01-22} }
   [E2---eng---2010-07]   : {employee5} : {{name : ben}, {age : 42}, {post : eng} , {dept : E2}, {joinDate : 2010-07-23} }
   [A1---admin---2011-03] : {employee2} : {{name : alex}, {age : 35}, {post : admin}, {dept : A1}, {joinDate : 2011-03-24} }
   [A2---admin---2008-02] : {employee4} : {{name : sarah}, {age : 26}, {post : admin}, {dept : A2 }, {joinDate : 2008-02-28} }

</pre>
</ul>


<li> Example 2: </li>
When the input it self is grouped rows new groupings will be formed using each. unique value of the 'field' in each of rows found in the groups.

<ul>
 <li> Input : List of rows as given below </li>
<pre>
   [30-plus]      : {employee1} : {{name : ben}, {age : 42}, {post : eng}, {dept : E1}, {joinDate : 2011-01-21} }
                    {employee2} : {{name : alex}, {age : 35}, {post : admin}, {dept : A1}, {joinDate : 2011-03-24} }
                    {employee3} : {{name : bob}, {age : 48}, {post : eng}, {dept : E1}, {joinDate : 2011-01-22} }
                    {employee5} : {{name : ben}, {age : 42}, {post : eng} , {dept : E2}, {joinDate : 2010-07-23} }
   [less-than-30] : {employee4} : {{name : sarah}, {age : 26}, {post : admin}, {dept : A2 }, {joinDate : 2008-02-28} }

</pre>

 <li> GroupBy Specification : </li>
<pre>
         &lt;groupBy&gt;
            &lt;field name='dept'/&gt;
            &lt;field name='post'/&gt;
            &lt;time name='joinDate' granularity='month'/&gt;
         &lt;/groupBy&gt;

</pre>

<li>Output : Rows grouped by each unique concatenated value of columns 'dept', 'post' and 'joinDate'. Values of 'joinDate' column has been rounded to months as defined by 'granularity'. Old grouping not present.</li>

 <pre>
    [E1---eng---2011-01]   : {employee1} : {{name : ben}, {age : 42}, {post : eng}, {dept : E1}, {joinDate : 2011-01-21}
                             {employee3} : {{name : bob}, {age : 48}, {post : eng}, {dept : E1}, {joinDate : 2011-01-22} }
    [E2---eng---2010-07]   : {employee5} : {{name : ben}, {age : 42}, {post : eng} , {dept : E2}, {joinDate : 2010-07-23} }
    [A1---admin---2011-03] : {employee2} : {{name : alex}, {age : 35}, {post : admin}, {dept : A1}, {joinDate : 2011-03-24} }
    [A2---admin---2008-02] : {employee4} : {{name : sarah}, {age : 26}, {post : admin}, {dept : A2 }, {joinDate : 2008-02-28} }

</pre>
</ul>
</ol>
 </p>

<a name="OrderBy"></a>
<h2>OrderBy Analyzer</h2>
        <p> This analyzer orders the rows according the values of the column specified by 'field'. Ordering is done lexically.

        </p>

	<p>
<h3> Syntax : </h3>
<pre>
 	&lt;orderBy field=''&gt;
</pre>
	</p>

<p>
<h3> Example : </h3>
<ol>
<li> Example 1: </li>

<ul>
 <li>Input : List of rows as given below.</li>
<pre>
     {employee1} : {{name : ben}, {age : 42}, {post : eng} }
     {employee2} : {{name : alex}, {age : 35}, {post : admin} }
     {employee3} : {{name : bob}, {age : 48}, {post : eng} }
     {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>


<li>OrderBy Specification :</li>
<pre>
      &lt;orderBy field='name'/&gt;
</pre>

<li>Output : Rows ordered by each unique value of 'name'.</li>
 <pre>
    {employee2} : {{name : alex}, {age : 35}, {post : admin} }
    {employee1} : {{name : ben}, {age : 42}, {post : eng} }
    {employee3} : {{name : bob}, {age : 48}, {post : eng} }
    {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>
</ul>


<li> Example 2: </li>
When the input is grouped rows ordering will happen within groups.

<ul>
 <li>Input : List of grouped rows as given below.</li>
<pre>
    [30-plus]      : {employee1} : {{name : ben}, {age : 42}, {post : eng} }
                     {employee2} : {{name : alex}, {age : 35}, {post : admin} }
                     {employee3} : {{name : bob}, {age : 48}, {post : eng} }
    [less-than-30] : {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>


<li>OrderBy Specification :</li>
<pre>
      &lt;orderBy field='name'/&gt;
</pre>


<li>Output : Rows ordered by name within each group.</li>

 <pre>
    [30-plus]      : {employee2} : {{name : alex}, {age : 35}, {post : admin} }
                     {employee1} : {{name : ben}, {age : 42}, {post : eng} }
                     {employee3} : {{name : bob}, {age : 48}, {post : eng} }
    [less-than-30] : {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>
</ul>
</ol>
 </p>




<a name="Extract"></a>
<h2>Extract Analyzer</h2>
        <p> This analyzer creates new columns out of extracted values from xml content present in columns.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
    	&lt;extract&gt;
   		+&lt;field from='' name='' xpath=''&gt;
       		+&lt;namespace prefix='' uri=''/&gt;
     		&lt;/field&gt;
  	&lt;/extract&gt;
</pre>
	</p>

<p>
<h3>Syntax Explanation : </h3>
<pre>
  &lt;extract&gt;                        	 : Top level element for extract analyzer
  	&lt;field from='' name='' xpath=''&gt; : Specifies details about new column to extract out from xml content
                                        from = In which column xml content is present which is used
                                               to extract out content
                                        name = Name of newly formed column out of extracted value
                                        xpath = Xpath to extract content from the xml
 	&lt;namespace prefix='' uri=''&gt;     : Specifies a namespace used in xpath expression
  &lt;/extract&gt;

</pre>
</p>


<p>
<h3> Example : </h3>
<ul>
 <li>Input : List of rows as given below with each row having an xml as a value for one of its columns.</li>
<pre>
    {employee1} : {{name : ben}, {age : 42}, {post : eng},
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;24&lt;/x:apartment&gt;
                               &lt;x:lane&gt;first lane&lt;/x:lane&gt;
                               &lt;x:city&gt;Witchita&lt;/x:city&gt;
                               &lt;x:state&gt;KS&lt;/x:state&gt;
                             &lt;/address&gt;
                  }}
    {employee2} : {{name : alex}, {age : 35}, {post : admin}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;Chase Suite&lt;/x:apartment&gt;
                               &lt;x:lane&gt;lily road&lt;/x:lane&gt;
                               &lt;x:city&gt;Helena&lt;/x:city&gt;
                               &lt;x:state&gt;MT&lt;/x:state&gt;
                             &lt;/address&gt;
                  }}
    {employee3} : {{name : bob}, {age : 48}, {post : eng}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;26&lt;/x:apartment&gt;
                               &lt;x:lane&gt;first lane&lt;/x:lane&gt;
                               &lt;x:city&gt;Witchita&lt;/x:city&gt;
                               &lt;x:state&gt;KS&lt;/x:state&gt;
                             &lt;/address&gt;
                  }}
    {employee4} : {{name : sarah}, {age : 26}, {post : admin}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;22&lt;/x:apartment&gt;
                               &lt;x:lane&gt;Wolfsville Road&lt;/x:lane&gt;
                               &lt;x:city&gt;Hagerstown&lt;/x:city&gt;
                               &lt;x:state&gt;MD&lt;/x:state&gt;
                             &lt;/address&gt;
                  }}

</pre>


<li>Extract specification : </li>
<pre>
	&lt;extract&gt;
                &lt;field from='address' name='state' xpath='//address/x:state'&gt;
                &lt;namespace prefix='x' uri='http://example.org'/&gt;
                &lt;/field&gt;
        &lt;/extract&gt;

</pre>

<li> Output : List of rows each row having newly added state column whose value extracted out from xml found in address column.</li>
 <pre>
    {employee1} : {{name : ben}, {age : 42}, {post : eng},
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;24&lt;/x:apartment&gt;
                               &lt;x:lane&gt;first lane&lt;/x:lane&gt;
                               &lt;x:city&gt;Witchita&lt;/x:city&gt;
                               &lt;x:state&gt;KS&lt;/x:state&gt;
                             &lt;/address&gt;
                  }, {state : KS}}
    {employee2} : {{name : alex}, {age : 35}, {post : admin}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;Chase Suite&lt;/x:apartment&gt;
                               &lt;x:lane&gt;lily road&lt;/x:lane&gt;
                               &lt;x:city&gt;Helena&lt;/x:city&gt;
                               &lt;x:state&gt;MT&lt;/x:state&gt;
                             &lt;/address&gt;
                  }, {state : MT}}
    {employee3} : {{name : bob}, {age : 48}, {post : eng}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;26&lt;/x:apartment&gt;
                               &lt;x:lane&gt;first lane&lt;/x:lane&gt;
                               &lt;x:city&gt;Witchita&lt;/x:city&gt;
                               &lt;x:state&gt;KS&lt;/x:state&gt;
                             &lt;/address&gt;
                  }, {state : KS}}
    {employee4} : {{name : sarah}, {age : 26}, {post : admin}
                  { address : &lt;address xmlns:x='http://example.org'&gt;
                               &lt;x:apartment&gt;22&lt;/x:apartment&gt;
                               &lt;x:lane&gt;Wolfsville Road&lt;/x:lane&gt;
                               &lt;x:city&gt;Hagerstown&lt;/x:city&gt;
                               &lt;x:state&gt;MD&lt;/x:state&gt;
                             &lt;/address&gt;
                  }, {state : MD}}

</pre>

If the input is grouped rows the behaviour will be the same for each row within the groups with no changes to the grouping structure.

</ul>
 </p>


<a name="Drop"></a>
<h2>Drop Analyzer</h2>
        <p>Drops groups, rows or columns from the data flow fulling the given criteria.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
  &lt;drop type="group|row|column"&gt;
       [fieldSet] || [groupSet]
  &lt;/drop&gt;

  [fieldSet] := &lt;fieldSet matchUsing='and|or'&gt;
                   +&lt;field name="" (0..1)regex=""/&gt;
               &lt;/fieldSet&gt;

  [groupSet] := &lt;groupSet&gt;
                   +&lt;group regex=""/&gt;
               &lt;/groupSet&gt;

</pre>
	</p>

 <p>
<h3> Syntax Explanation: </h3>
<pre>
    &lt;drop type="group|row|column"&gt;              : What type of data to drop is defined by 'type'.

    &lt;fieldSet (0..1)matchUsing='and|or'&gt;        : The attribute 'matchUsing' defines the semantics which should
                                                  be used to match. e.g.: 'and' will drop a row if all the
                                                  criteria defined by the one more fields defined in the
                                                  fieldSet is satisfied. Default is 'and'. This attribute
                                                  is not applicable for 'column' type.
        &lt;field name="" (0..1)regex=""/&gt;         : Defines the criteria to drop rows or columns. Specifying
    &lt;/fieldSet&gt;                                   multiple fields will match all the fields. ('AND' semantics)
                                                     name : Drop row if this column exists or drop the column
                                                            from the row.
                                                     regex : Additionally match column value with regex. Drop
                                                             only regex is matched.

    &lt;groupSet&gt;
      &lt;group regex=''/&gt;                         : Defines the criteria to drop groups. Multiple groups to be
    &lt;/groupSet&gt;                                   dropped can be specified.
                                                  regex : Match group name with regex. Drop group if group
                                                          name matches regex.

</pre>
For 'group' type groupSet specification should be used and for 'row' or 'column' types fieldSet specification should be used.
<pre>

</pre>
	</p>


<p>
<h3> Example : </h3>
<ol>
<li> Example 1: Dropping rows.</li>

<ul>
 <li>Input : List of rows as given below.</li>
<pre>
       {employee1} : {{name : ben}, {age : 42}, {post : eng} }
       {employee2} : {{name : alex}, {age : 35}, {post : admin}, {id : EB233}} }
       {employee3} : {{name : bob}, {age : 48}, {post : eng} }
       {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>


<li>Drop Specification :</li>
<pre>
	      &lt;drop type='row'&gt;
                    &lt;fieldSet matchUsing='or'&gt;
	                    &lt;field name='id'/&gt;
	                    &lt;field name='post' regex='eng'/&gt;
                   &lt;/fieldSet&gt;
              &lt;/drop&gt;

</pre>

<li>Output : List of filtered rows as below with row matching filtering criteria dropped</li>
 <pre>
      {employee4} : {{name : sarah}, {age : 26}, {post : admin} }

</pre>
</ul>


<li> Example 2: Dropping columns.</li>

<ul>
 <li>Input : List of rows as given below.</li>
<pre>
       {employee1} : {{name : ben}, {age : 42}, {post : eng} }
       {employee2} : {{name : alex}, {age : 35}, {post : admin}, {id : EB233}} }
       {employee3} : {{name : bob}, {age : 48}, {post : eng} }
       {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>


<li>Drop Specification :</li>
<pre>
	&lt;drop type='column'&gt;
               &lt;fieldSet&gt;
                   &lt;field name='id'/&gt;
                   &lt;field name='post' regex='eng*'/&gt;
                &lt;/fieldSet&gt;
	&lt;/drop&gt;
</pre>


<li>Output : List of rows with filtered columns.</li>

 <pre>
       {employee1} : {{name : ben}, {age : 42} }
       {employee2} : {{name : alex}, {age : 35}, {post : admin} }
       {employee3} : {{name : bob}, {age : 48} }
       {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>
</ul>

<li> Example 3: Dropping groups</li>

<ul>
 <li>Input : List of grouped rows.</li>
<pre>
       [30-plus]      : {employee1} : {{name : ben}, {age : 42}, {post : eng} }
                        {employee2} : {{name : alex}, {age : 35}, {post : admin} }
                        {employee3} : {{name : bob}, {age : 48}, {post : eng} }
       [less-than-30] : {employee4} : {{name : sarah}, {age : 26}, {post : admin} }


</pre>


<li>Drop Specification :</li>
<pre>
		&lt;drop type='group'&gt;
                   &lt;groupSet&gt;
                            &lt;group regex='30-plus'/&gt;
                   &lt;/groupSet&gt;
               &lt;/drop&gt;

</pre>


<li>Output : List of filtered groups</li>

 <pre>
     [less-than-30] : {employee4} : {{name : sarah}, {age : 26}, {post : admin} }

</pre>
</ul>
</ol>
</p>


<a name="Fault"></a>
<h2>Error Detection Analyzer</h2>
        <p>
            This analyzer detects SOAP faults present on a specific message pay load. It is
            specific to the WSO2 ESB.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
    &lt;detectFault&gt;
        &lt;errorFields="" currentSequenceIdentifier=""/&gt;
    &lt;/detectFault&gt;
</pre>
	</p>

 <p>
<h3> Syntax Explanation: </h3>
<pre>
    &lt;detectFault&gt;
        &lt;errorFields=""                  : errorFields = The error fields that should be passed
                                              down to an alert analyzer
        currentSequenceIdentifier=""/&gt;   : currentSequenceIdentifier = The field of the ESB sequence

    &lt;/detectFault&gt;
    errorFields
</pre>
</p>
<p>
<h3> Example : </h3>
<ol>

<ul>
 <li>Input : List of rows as given below.</li>
<pre>
    {event1} : {{bam_error_code : 101000}, {bam_error_message : Sender IO error sending},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : in} }
    {event2} : {{bam_error_code : 101501}, {bam_error_message : Sender IO error receiving},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : out } }
     {event3} : {{name : alex}, {age : 35}, {post : admin} }
     {event4} : {{name : bob}, {age : 48} }

</pre>


<li>Detect Error Specification :</li>
<pre>
    &lt;detectFault&gt;
        &lt;errorFields="bam_error_code, bam_error_message" currentSequenceIdentifier="bam_current_sequence"/&gt;
    &lt;/detectFault&gt;

</pre>

<li>Output : List of rows which has errors, and drop other events that doesn't have errors</li>
 <pre>
     {event1} : {{bam_message_path : in -> out }, {bam_error_code : 101000}, {bam_error_message : Sender IO error sending},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : in} }
    {event2} : {{bam_message_path : in -> out }, {bam_error_code : 101501}, {bam_error_message : Sender IO error receiving},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : out } }

</pre>
</ul>


</ol>
</p>

<a name="Alert"></a>
<h2>Alert Trigger</h2>
        <p>
            The alert trigger can be used to fire emails from a desired mail account. It will
            use the records present obtained from the previous analyzer and include it in a
            tabular format and fire the email.
        </p>

	<p>
<h3> Syntax : </h3>
<pre>
    &lt;alert to="TO_MAIL_ADDRESS" transport="smtps"
        subject="Fault notification" from="no-reply@wso2.org"
        mailhost="smtp.gmail.com" username="synapse.demo.0@gmail.com"
        password="mailpassword"&gt;
           &lt;fields&gt;bam_activity_id,operation_name,service_name,timestamp,faultCode,faultReason,bam_message_path&lt;/fields&gt;
        &lt;/alert&gt;
</pre>
	</p>

 <p>
<h3> Syntax Explanation: </h3>
<pre>
    &lt;alert to="" transport=""                                    : to = address to send the mail to
                                                                  : transport = transport to use, ex: smtps
        subject="" from=""                                        : subject = subject of the mail address
                                                                  : from = mail address to set as the from address
        mailhost="" username=""                                   : mailhost = the mail host
                                                                  : username = the username of the mail account
        password=""&gt;                                             : password = password of mail account
    &lt;/alert&gt;

</pre>
</p>
<p>
<h3> Example : </h3>
<ol>

<ul>
 <li>Input : List of rows as given below.</li>
<pre>
     {event1} : {{bam_message_path : in -> out }, {bam_error_code : 101000}, {bam_error_message : Sender IO error sending},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : in} }
    {event2} : {{bam_message_path : in -> out }, {bam_error_code : 101501}, {bam_error_message : Sender IO error receiving},
                 {message_body :
                 "&lt;soapenv:Body xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"&gt;
                  &lt;soapenv:Fault xmlns:axis2ns1="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soapenv:Code&gt;
                  &lt;soapenv:Value&gt;axis2ns1:Sender&lt;soapenv:Value&gt;&lt;soapenv:Code&gt;&lt;soapenv:Reason&gt;
                  &lt;soapenv:Text xml:lang="en-US"&gt;Invalid value \"?\" for element in&lt;soapenv:Text&gt;
                  , {bam_current_sequence : out } }
</pre>


<li>Detect Error Specification :</li>
<pre>
    &lt;alert to="TO_MAIL_ADDRESS" transport="smtps"
        subject="Fault notification" from="no-reply@wso2.org"
        mailhost="smtp.gmail.com" username="synapse.demo.0@gmail.com"
        password="mailpassword"&gt;
           &lt;fields&gt;bam_activity_id,operation_name,service_name,timestamp,faultCode,faultReason,bam_message_path&lt;/fields&gt;
        &lt;/alert&gt;

</pre>

<li>Output : Mail sent according similar to the screenshot below: </li>
        <img src="images/fault-detection-eMail.png" alt="sample email" />
</ul>


</ol>
</p>
    </body>
</document>

