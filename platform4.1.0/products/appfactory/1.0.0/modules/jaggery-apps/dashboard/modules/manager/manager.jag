<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log();

var getAdminCookie = function () {
    if(session.get("authenticatedCookie") == null) {
        var xhr = new XMLHttpRequest();
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "AuthenticationAdmin";
        xhr.open("POST", endPoint);
        var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' + getProperty(ADMIN_USERNAME) + '</aut:username><aut:password>' + getProperty(ADMIN_PASSWORD) + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
        xhr.send(payload);
        var cookie = (xhr.getAllResponseHeaders());
        var authenticatedCookie = cookie.split(";")[0].split(":")[1];
        session.put("authenticatedCookie" , authenticatedCookie ) ;
    }
    return session.get("authenticatedCookie");
};

var getAdminCookieBySAMLToken = function () {
    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(getProperty(SSO_NAME));
   	var token = ssoRelyingParty.getSAMLToken(session.getId());

   	var xhr = new XMLHttpRequest();
   	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "SAML2SSOAuthenticationService";
   	xhr.open("POST", endPoint);

   	var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+token+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

   	xhr.send(payload);
   	var cookie = (xhr.getAllResponseHeaders());
   	return cookie.split(";")[0].split(":")[1];
};

var encodeString = function(stringValue){
   	var security =require("sso");
   	var ssoRelyingParty = new security.SSORelyingParty(getProperty(SSO_NAME));

   	return ssoRelyingParty.encode(stringValue);
};

function buildResponse(result){
   	var databaseObject=[];
   
   	if(result != undefined){    
   		var response=result.*::["return"].text();
   		var entry=response[0];
   		return entry;
 	}
}

%>
