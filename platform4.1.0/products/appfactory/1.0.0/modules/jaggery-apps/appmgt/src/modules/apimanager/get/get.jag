<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log();
var modManager = jagg.module("manager");

var getApplicationAPI = function (applicationKey){
 //   jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION.CONFIGURATION.API.MANAGER);
    var ws = require('ws');
    var apiManagerIntegration = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAPIsOfApplication";
    options["HTTPHeaders"] = [
            { name : "Cookie", value :modManager.getAdminCookie() },
            { name : "username", value :session.get("LOGGED_IN_USER") },
            { name : "SAMLToken" , value : session.get("SAML_TOKEN") }
        ];

    var namespace = getProperty(API_MANAGER_SERVICE_NAMESPACE);
    var payload = '<int:getAPIsOfApplication xmlns:int="' + namespace+ '"><int:applicationId>'
        + applicationKey +'</int:applicationId></int:getAPIsOfApplication>';
    var result;

    try {
        var serviceName =getProperty(API_MANAGER_SERVICE_NAME);
        var serverUrl = getProperty(APPFACTORY_SERVER_URL);

        var endPoint = serverUrl + serviceName;

        apiManagerIntegration.open(options,endPoint, false);
        apiManagerIntegration.send(payload);
        result = apiManagerIntegration.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }

        var elements = result.*::["return"];
        var elementsArray = [];
        for(var i = 0; i < elements.length(); i++){
            var entry = elements[i];

            var apiInfo = {};
          	var apiName = entry.*::apiName.text();
          	var apiVersion = entry.*::apiVersion.text();
          	var apiProvider = entry.*::apiProvider.text();

            apiInfo.name = apiName;
            apiInfo.version = apiVersion;
            apiInfo.provider = apiProvider;

            var keys = entry.*::["keys"];
            var keysArray = [];

            if(keys != null){
                for(var j = 0; j < keys.length(); j++){
                    var key = keys[j];
                    var keyJson = {};

                    keyJson.name = key.*::type.text();
                    keyJson.value = key.*::value.text();
                    keyJson.reference = key.*::reference.text();
                    keysArray.push(keyJson);
                }
            }

            apiInfo.keys = keysArray;

           	elementsArray.push(apiInfo);
        }
        var finalValue = {};
        finalValue.apiInfo = elementsArray;
        return finalValue;

    } catch (e) {
        log.error("Error while getting APIs of application "+ applicationKey + "\n"+e.message);
        throw "Error while getting APIs of application "+ applicationKey;
    }
};

var getAPICount = function (applicationKey){
 //   jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION.CONFIGURATION.API.MANAGER);
    var ws = require('ws');
    var apiManagerIntegration = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAPIsOfApplication";
    options["HTTPHeaders"] = [
            { name : "Cookie", value :modManager.getAdminCookie() },
            { name : "username", value :session.get("LOGGED_IN_USER") },
            { name : "SAMLToken" , value : session.get("SAML_TOKEN") }
        ];

    var namespace = getProperty(API_MANAGER_SERVICE_NAMESPACE);
    var payload = '<int:getAPIsOfApplication xmlns:int="' + namespace+ '"><int:applicationId>'
        + applicationKey +'</int:applicationId></int:getAPIsOfApplication>';
    var result;

    try {
        var serviceName =getProperty(API_MANAGER_SERVICE_NAME);
        var serverUrl = getProperty(APPFACTORY_SERVER_URL);

        var endPoint = serverUrl + serviceName;

        apiManagerIntegration.open(options,endPoint, false);
        apiManagerIntegration.send(payload);
        result = apiManagerIntegration.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }

        var elements = result.*::["return"];
        
		return elements.length();
    } catch (e) {
    	return 0;
    }
};

var getAPIInformation = function(name, version, provider){
    var ws = require('ws');
    var apiManagerIntegration = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAPIInformation";
    options["HTTPHeaders"] = [
            { name : "Cookie", value :modManager.getAdminCookie() },
            { name : "username", value :session.get("LOGGED_IN_USER") },
            { name : "SAMLToken" , value : session.get("SAML_TOKEN") }
        ];

    var namespace = getProperty(API_MANAGER_SERVICE_NAMESPACE);
    var payload = '<int:getAPIInformation xmlns:int="' + namespace+ '"><int:apiName>' + name + '</int:apiName><int:apiVersion>' + version + '</int:apiVersion><int:apiProvider>' + provider + '</int:apiProvider></int:getAPIInformation>';
    var result;

    try {
        var serviceName =getProperty(API_MANAGER_SERVICE_NAME);
        var serverUrl = getProperty(APPFACTORY_SERVER_URL);

        var endPoint = serverUrl + serviceName;

        apiManagerIntegration.open(options,endPoint, false);
        apiManagerIntegration.send(payload);
        result = apiManagerIntegration.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }

        var elements = result.*::["return"];
        var elementsArray = [];
        for(var i = 0; i < elements.length(); i++){
            var entry = elements[i];

            var apiInfo = {};
          	var apiName = entry.*::apiName.text();
          	var apiVersion = entry.*::apiVersion.text();
          	var apiProvider = entry.*::apiProvider.text();

//  Adding all the basic information like the name,version and the provider
            apiInfo.name = apiName;
            apiInfo.version = apiVersion;
            apiInfo.provider = apiProvider;

//  Adding the endpoint related information. These are calculated as a 2d array.
            var endpoints = entry.*::["endpointUrls"];
            var endpointArray = [];

            if(endpoints != null){
                for(var j = 0; j < endpoints.length(); j++){
                    var endpoint = endpoints[j];
                    var endpointJson = {};

                    endpointJson.name = endpoint.*::type.text();
                    endpointJson.value = endpoint.*::value.text();
                    endpointJson.reference = endpoint.*::reference.text();

                    endpointArray.push(stringify(endpointJson));
                }
            }

            apiInfo.endpoints = endpointArray;

//  Adding the meta information like wsdl, wadl and the description of the API
            var wadl = entry.*::wadlUrl.text();
            var wsdl = entry.*::wsdlUrl.text();
            var owner = entry.*::owner.text();
            var context = entry.*::context.text();
            var description = entry.*::description.text();

            apiInfo.wadl = wadl;
            apiInfo.wsdl = wsdl;
            apiInfo.owner = owner;
            apiInfo.context = context;
            apiInfo.description = description;

           	elementsArray.push(stringify(apiInfo));
        }
        var finalValue = {};
        finalValue.apiInfo = elementsArray;
        return stringify(finalValue);

    } catch (e) {
        log.error("Error while getting APIs of application "+ applicationKey + "\n"+e.message);
        throw "Error while getting APIs of application "+ applicationKey;
    }
}

%>
