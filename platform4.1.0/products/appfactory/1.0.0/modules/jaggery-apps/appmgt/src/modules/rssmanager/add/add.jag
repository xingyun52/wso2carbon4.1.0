

<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log();
var modManager = jagg.module("manager");
var wso2_rss_instanceName = 'WSO2_RSS';

var createDatabase = function (applicationKey,databaseName,databaseServerInstanceName) {
    var stage = getStageFromRssInstanceName(databaseServerInstanceName);
    var permissionModule = jagg.module("permission");
    permissionModule.checkUserActionPermission(applicationKey,PERMISSION_CONFIGURATION_DB_FOR_STAGE +stage);
    var ws = require('ws');
    var createDatabaseService = new ws.WSRequest();
    var options =new Array();
    options.useSOAP = 1.2;
    options.action = "urn:createDatabase";
    options.mep = "in-only";
     options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
        var payload ='<ser:createDatabase xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
               'xmlns:xsd="http://entity.core.rssmanager.carbon.wso2.org/xsd">'+
               '<ser:database>'+
               '<xsd:name>'+ databaseName +'</xsd:name>'+
               '<xsd:rssInstanceName>'+ wso2_rss_instanceName +'</xsd:rssInstanceName>'+
               '</ser:database>'+
               '</ser:createDatabase>';
         var result;
    try {
        var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
        createDatabaseService.open(options, storageServerURL+"RSSAdmin", false,
                getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD) );
        createDatabaseService.send(payload);
    } catch (e) {
        log.error("Error while creating database "+ "\n" + e.message);
        throw "Error while creating database  ";
    }
};

var getRSSinstances = function (applicationKey){
    var result;
    var permissionModule = jagg.module("permission");
    var deploymentStages = getProperties(DEPLOYMENT_STAGES);
    var rssInstancesArray=[];
    for(var i=0;i<deploymentStages.length;i++){
        //if user has access to stage
        var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_CONFIGURATION_DB_FOR_STAGE +deploymentStages[i]);
        if(hasDBConfigurePermissionToStage){
            var task={};
            task.name=getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
            rssInstancesArray.push(task);
        }
    }
     return rssInstancesArray;

};

var getStageFromRssInstanceName=function(rssInstanceName){
    var deploymentStages = getProperties(DEPLOYMENT_STAGES);
        for(var i=0;i<deploymentStages.length;i++){
               var rssName= getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
                if(rssInstanceName==rssName){
                    return deploymentStages[i];
                }
            }

};

var getAttachedUsers = function (applicationKey, dbname, rssInstance){
    var ws = require('ws');

    var getAttachedUsersService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getUsersAttachedToDatabase";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
    var payload ='<ser:getUsersAttachedToDatabase  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
                 '<ser:rssInstanceName>'+wso2_rss_instanceName+'</ser:rssInstanceName>'+
                 '<ser:databaseName>'+dbname+'</ser:databaseName>'+
                 '</ser:getUsersAttachedToDatabase>';

    var result;
    var stage = getStageFromRssInstanceName(rssInstance);
    var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
    try {

        getAttachedUsersService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
        getAttachedUsersService.send(payload);
        result = getAttachedUsersService.responseE4X;

       } catch (e) {
        log.error(e.toString());
        }
 return getUserList(result);
};

var attachNewUser = function (applicationKey,rssInstance, dbname, users, templates){
 
    var ws = require('ws');

    var attachUserService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:attachUserToDatabase";
    options.mep = "in-only";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
    var payload ='<ser:attachUserToDatabase  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
                 '<ser:rssInstanceName>'+wso2_rss_instanceName+'</ser:rssInstanceName>'+
                 '<ser:databaseName>'+dbname+'</ser:databaseName>'+
                 '<ser:username>'+users+'</ser:username>'+
                 '<ser:templateName>'+templates+'</ser:templateName></ser:attachUserToDatabase>';

    var result;
    var stage = getStageFromRssInstanceName(rssInstance);
       var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
    try {

        attachUserService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
        attachUserService.send(payload);

       } catch (e) {
        log.error(e.toString());
        }

 
};


var detachUser = function (applicationKey,rssInstance, dbname, username){

    var ws = require('ws');
  
    var detachUserService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:detachUserFromDatabase";
    options.mep = "in-only";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
    var payload ='<ser:detachUserFromDatabase xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
                 '<ser:rssInstanceName>'+wso2_rss_instanceName+'</ser:rssInstanceName>'+
                 '<ser:databaseName>'+dbname+'</ser:databaseName>'+
                 '<ser:username>'+username+'</ser:username>'+
                 '</ser:detachUserFromDatabase>';

    var result;
    var stage = getStageFromRssInstanceName(rssInstance);
          var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
    try {

        detachUserService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
        detachUserService.send(payload);

       } catch (e) {
        log.error(e.toString());
        }


};

var getUserPrivileges = function (applicationKey,rssInstance, dbname, username){

    var ws = require('ws');

    var getUserPrivilegesService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getUserDatabasePermissions";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
    var payload ='<ser:getUserDatabasePermissions xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
                 '<ser:rssInstanceName>'+wso2_rss_instanceName+'</ser:rssInstanceName>'+
                 '<ser:databaseName>'+dbname+'</ser:databaseName>'+
                 '<ser:username>'+username+'</ser:username>'+
                 '</ser:getUserDatabasePermissions>';

    var result;
    var stage = getStageFromRssInstanceName(rssInstance);
             var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
    try {

        getUserPrivilegesService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
        getUserPrivilegesService.send(payload);
        result = getUserPrivilegesService.responseE4X;
       } catch (e) {
        log.error(e.toString());
        }

    return buildUserPrivilege(result);
};


var editUserPermissions = function (applicationKey,dbname,rssInstance,username,password,alterPriv,alterRoutinePriv, createPriv,createRoutinePriv, createTmpTablePriv, createViewPriv,deletePriv,dropPriv,eventPriv,executePriv,grantPriv,indexPriv,insertPriv,lockTablesPriv,referencesPriv,selectPriv,showViewPriv,triggerPriv,updatePriv){

    var ws = require('ws');

    var editTemplateService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
      options.mep = "in-only";
    options.action = "urn:editDatabaseUserPrivileges";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];

 //   var tenantId= getProperty(ADMIN_USERNAME)+'@'+applicationKey;    TODO: changed for app factory
    var tenantId="-1234";
	var payload ='<ser:editDatabaseUserPrivileges  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" xmlns:xsd="http://entity.core.rssmanager.carbon.wso2.org/xsd">'+
                 '<xsd:privileges>'+
                 '<xsd:alterPriv>'+alterPriv+'</xsd:alterPriv>'+
                 '<xsd:alterRoutinePriv>'+alterRoutinePriv+'</xsd:alterRoutinePriv>'+
                 '<xsd:createPriv>'+createPriv+'</xsd:createPriv>'+
                 '<xsd:createRoutinePriv>'+createRoutinePriv+'</xsd:createRoutinePriv>'+
                 '<xsd:createTmpTablePriv>'+createTmpTablePriv+'</xsd:createTmpTablePriv>'+
                 '<xsd:createViewPriv>'+createViewPriv+'</xsd:createViewPriv>'+
                 '<xsd:deletePriv>'+deletePriv+'</xsd:deletePriv>'+
                 '<xsd:dropPriv>'+dropPriv+'</xsd:dropPriv>'+
                 '<xsd:eventPriv>'+eventPriv+'</xsd:eventPriv>'+
                 '<xsd:executePriv>'+executePriv+'</xsd:executePriv>'+
                 '<xsd:grantPriv>'+grantPriv+'</xsd:grantPriv>'+
                 '<xsd:indexPriv>'+indexPriv+'</xsd:indexPriv>'+
                 '<xsd:insertPriv>'+insertPriv+'</xsd:insertPriv>'+
                 '<xsd:lockTablesPriv>'+lockTablesPriv+'</xsd:lockTablesPriv>'+
                 '<xsd:referencesPriv>'+referencesPriv+'</xsd:referencesPriv>'+
                 '<xsd:selectPriv>'+selectPriv+'</xsd:selectPriv>'+
                 '<xsd:showViewPriv>'+showViewPriv+'</xsd:showViewPriv>'+
                 '<xsd:triggerPriv>'+triggerPriv+'</xsd:triggerPriv>'+
                 '<xsd:updatePriv>'+updatePriv+'</xsd:updatePriv>'+
              '</xsd:privileges>'+
             '<ser:user>'+
            	'<xsd:password>'+password+'</xsd:password>'+
            	'<xsd:rssInstanceName>'+wso2_rss_instanceName+'</xsd:rssInstanceName>'+
            	'<xsd:tenantId>'+tenantId+'</xsd:tenantId>'+
            	'<xsd:type></xsd:type>'+
            	'<xsd:username>'+username+'</xsd:username>'+
         	'</ser:user>'+
         	'<ser:databaseName>'+dbname+'</ser:databaseName>'+
          '</ser:editDatabaseUserPrivileges>';

  
    var stage = getStageFromRssInstanceName(rssInstance);
    var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
  
    try {

        editTemplateService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
        editTemplateService.send(payload);


       } catch (e) {
        log.error(e.toString());
        }

};


var getDatabases = function (applicationKey){
    var ws = require('ws');

    var getDatabaseService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getDatabases";
    options["HTTPHeaders"] = [
       { name : "Cookie", value :modManager.getAdminCookie() }
     ];
    var payload ='<ser:getDatabases  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org"/>';

    var result;
    var databasesObjectArray=[];
    var permissionModule = jagg.module("permission");
    var deploymentStages = getProperties(DEPLOYMENT_STAGES);
    var rssInstancesArray=[];
    for(var i=0;i<deploymentStages.length;i++){
        //if user has access to stage
        var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_CONFIGURATION_DB_FOR_STAGE +deploymentStages[i]);
        if(hasDBConfigurePermissionToStage){
            var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+STORAGE_SERVER_URL);
            getDatabaseService.open(options, storageServerURL+'RSSAdmin', false,getProperty(ADMIN_USERNAME)+'@'+applicationKey , getProperty(ADMIN_PASSWORD) );
            getDatabaseService.send(payload);
            result = getDatabaseService.responseE4X;
            var databaseObjects = buildResponse(result, deploymentStages[i]);
            for(var index in  databaseObjects){
                var databaseObject = databaseObjects[index];
                databasesObjectArray.push(databaseObject);

            }
        }
    }
       return  databasesObjectArray;
};

function buildResponse(result,stage){
   var databaseObject=[];
   
   if(result != undefined){    
   var response=result.*::["return"]
  
   for(var index=0; index < response.length();index++){
          
       var task={};
       var entry=response[index];
              

       var name=entry.*::name.text();
       var rssInstanceName=entry.*::rssInstanceName.text();
       var url=entry.*::url.text();

       task.name=name;
      // log.info("Inside Build response "+name)
       task.rssInstanceName=getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
       task.url=url;

       databaseObject.push(task);
      // log.info(databaseObject);
	}
   }
    return databaseObject;
}

function buildRssInstances(result){
  var databaseObject=[];

   if(result != undefined){
   var response=result.*::["return"]

   for(var index=0; index < response.length();index++){

       var task={};
       var entry=response[index];


       var name=entry.*::name.text();

       task.name=name;
       databaseObject.push(task);
      }
   }
    return databaseObject;

}


function getUserList(result){
 
   var databaseObject=[];

   if(result != undefined){
   var response=result.*::["return"]

   for(var index=0; index < response.length();index++){

       var task={};
       var entry=response[index];


       var name=entry.text();

       task.name=name;
       databaseObject.push(task);
      }
   }
    return databaseObject;


}

function buildUserPrivilege(result){

     var databaseObject=[];

   if(result != undefined){
   var response=result.*::["return"]

   for(var index=0; index < response.length();index++){

       var task={};

       var privilages=response[index];

       var alterPriv=privilages.*::alterPriv.text();
       var alterRoutinePriv=privilages.*::alterRoutinePriv.text();
       var createPriv=privilages.*::createPriv.text();
       var createRoutinePriv=privilages.*::createRoutinePriv.text();
       var createTmpTablePriv=privilages.*::createTmpTablePriv.text();
       var createViewPriv=privilages.*::createViewPriv.text();
       var deletePriv=privilages.*::deletePriv.text();
       var dropPriv=privilages.*::dropPriv.text();
       var eventPriv=privilages.*:: eventPriv.text();
       var executePriv=privilages.*::executePriv.text();
       var grantPriv=privilages.*::grantPriv.text();
       var indexPriv=privilages.*::indexPriv.text();
       var insertPriv=privilages.*::insertPriv.text();
       var lockTablesPriv=privilages.*::lockTablesPriv.text();
       var referencesPriv=privilages.*::referencesPriv.text();
       var selectPriv=privilages.*::selectPriv.text();
       var showViewPriv=privilages.*::showViewPriv.text();
       var triggerPriv=privilages.*::triggerPriv.text();
       var updatePriv=privilages.*::updatePriv.text();

       task.alterPriv=alterPriv;
       task.alterRoutinePriv=alterRoutinePriv;
       task.createPriv=createPriv;
       task.createRoutinePriv=createRoutinePriv;
       task.createTmpTablePriv=createTmpTablePriv;
       task.createViewPriv=createViewPriv;
       task.deletePriv=deletePriv;
       task.dropPriv=dropPriv;
       task.eventPriv=eventPriv;
       task.executePriv=executePriv;
       task.grantPriv=grantPriv;
       task.indexPriv=indexPriv;
       task.insertPriv=insertPriv;
       task.lockTablesPriv=lockTablesPriv;
       task.referencesPriv=referencesPriv;
       task.selectPriv=selectPriv;
       task.showViewPriv=showViewPriv;
       task.triggerPriv=triggerPriv;
       task.updatePriv=updatePriv;

       databaseObject.push(task);
        }
   }
    return databaseObject;


}
%>
