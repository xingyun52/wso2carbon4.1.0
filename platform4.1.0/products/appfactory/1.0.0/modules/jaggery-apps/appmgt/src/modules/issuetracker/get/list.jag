<%
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log();

var getAllIssuesOfApplication = function(applicationKey){
    var ws = require('ws');
    var getUrlForReportIssueRequest = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAllIssuesOfApplication";
    var payload ='<p:getAllIssuesOfApplication xmlns:p="http://service.issuetracking.appfactory.carbon.wso2.org"><xs:appId xmlns:xs="http://service.issuetracking.appfactory.carbon.wso2.org">'+applicationKey+'</xs:appId></p:getAllIssuesOfApplication>';

    var result;
    
    try {

    	var endPoint =getProperty(APPFACTORY_SERVER_URL)+'IssueTrackerService';
    	getUrlForReportIssueRequest.open(options,endPoint, false,  getProperty(ADMIN_USERNAME), getProperty(ADMIN_PASSWORD));
    	getUrlForReportIssueRequest.send(payload);
    	result = getUrlForReportIssueRequest.responseE4X;
    } catch (e) {
    	log.error("Error while getting issues of "+applicationKey + "\n"+e.message);
    }
    
    return result;
};

var getOpenIssues = function(applicationKey){
    var result;
    var issues = new Array();
   
    try {
        result = getAllIssuesOfApplication(applicationKey);
        
        var ns = new Namespace("http://service.issuetracking.appfactory.carbon.wso2.org");
        var ax239 = new Namespace("http://beans.issuetracking.appfactory.carbon.wso2.org/xsd");

        var i = 0;
        
        var resultElems = result.ns::["return"];   
        
        for (var resultElem in resultElems) {
            var obj = resultElems[resultElem];
            var summary = obj.ax239::["summary"].text();
            var type = obj.ax239::["type"].text();
            var issueKey = obj.ax239::["issueKey"].text();
            var status = obj.ax239::["status"].text();
            var url = obj.ax239::["url"].text();
            
            if(!(status=="New" || status=="In Progress")){
                continue;
            }
            
            var issue = {};
            issue.title = summary;
            issue.type = type;
            issue.id = issueKey;
            issue.status = status;
            issue.url = url;
            
            issues[i] = issue;
            
            i++;
        }

    } catch (e) {
       log.error("Error while getting issues of "+applicationKey + "\n"+e.message);
    }
        
    return issues;

};

var getIssueTrackerInfo = function(applicationKey){
    var result;
    var returnObject={};
    var bugInProgress=0;
    var bugOpen=0;
    var featureInProgress=0;
    var featureOpen=0;
    var supportInProgress=0;
    var supportOpen=0;
   
    try {
    	result = getAllIssuesOfApplication(applicationKey);
    	
        var ns = new Namespace("http://service.issuetracking.appfactory.carbon.wso2.org");
        var ax239 = new Namespace("http://beans.issuetracking.appfactory.carbon.wso2.org/xsd");

        var resultElems = result.ns::["return"];        
        for (var resultElem in resultElems) {
            var obj = resultElems[resultElem];
            var type=obj.ax239::["type"];
            var status=obj.ax239::["status"];
            
            if(type=="Bug"){
                if(status=="New"){
                    bugOpen+=1;
                }else if(status=="In Progress"){
                    bugInProgress+=1;
                }
            }else if(type=="Feature"){
                if(status=="New"){
                    featureOpen+=1;
                }else if(status=="In Progress"){
                    featureInProgress+=1;
                }
            }else if(type=="Support"){
                if(status=="New"){
                    supportOpen+=1;
                }else if(status=="In Progress"){
                    supportInProgress+=1;
                }
            }
        }

    } catch (e) {
       log.error("Error while getting issues of "+applicationKey + "\n"+e.message);
    }
    
    var bug={};
    bug.open=bugOpen;
    bug.inProgress=bugInProgress;
    bug.total=bugOpen+bugInProgress;
    returnObject.bug=bug;

    var feature={};
    feature.open=featureOpen;
    feature.inProgress=featureInProgress;
    feature.total=featureOpen+featureInProgress;
    returnObject.feature=feature;
    
    var support={};
    support.open=supportOpen;
    support.inProgress=supportInProgress;
    support.total=supportOpen+supportInProgress;
    returnObject.support=support;
    
    return returnObject;

};

var getIssuesWithParameters = function(queryString) {
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAllIssuesWithParameters";
    var payload = '<p:getAllIssuesWithParameters xmlns:p="http://service.issuetracking.appfactory.carbon.wso2.org">\
                <xs:queryString xmlns:xs="http://service.issuetracking.appfactory.carbon.wso2.org">' + queryString + '</xs:queryString>\
                </p:getAllIssuesWithParameters>';

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + 'IssueTrackerService';
        request.open(options, endPoint, false, getProperty(ADMIN_USERNAME), getProperty(ADMIN_PASSWORD));
        request.send(payload);
        result = request.responseE4X;

        var ns = new Namespace("http://service.issuetracking.appfactory.carbon.wso2.org");
        var ax239 = new Namespace("http://beans.issuetracking.appfactory.carbon.wso2.org/xsd");

        var resultElems = result.ns::["return"];

        log.info(resultElems);

        return resultElems;
    } catch (e) {
        log.error("Error while getting issues");
    }
}

var getCountForIssuesWithParameters = function(queryString) { 
    try {
        var resultElems =getIssuesWithParameters(queryString);
        return resultElems.length();
    } catch (e) {
        log.error("Error while getting issues count");
    }
}

var getIssueCountsByStatus = function() {
    var issues = [];
    var newIssueCount = getCountForIssuesWithParameters("status_id=1");
    var inProgressIssueCount = getCountForIssuesWithParameters("status_id=2");
    var resolvedIssueCount = getCountForIssuesWithParameters("status_id=3");
    var feedbackIssueCount = getCountForIssuesWithParameters("status_id=4");
    var closedIssueCount = getCountForIssuesWithParameters("status_id=5");
    var rejectedIssueCount = getCountForIssuesWithParameters("status_id=6");
    issues.push(['New', newIssueCount]);
    issues.push(['In-progress', inProgressIssueCount]);
    issues.push(['Resolved', resolvedIssueCount]);
    issues.push(['Feedback', feedbackIssueCount]);
    issues.push(['Closed', closedIssueCount]);
    issues.push(['Rejected', rejectedIssueCount]);
    log.info("issues : "+issues);
    return issues;
}

var getIssueCountsByPriority = function() {
    var issues = [];
    issues.push(['Low', getCountForIssuesWithParameters("priority_id=1")]);
    issues.push(['Normal', getCountForIssuesWithParameters("priority_id=2")]);
    issues.push(['High ', getCountForIssuesWithParameters("priority_id=3")]);
    issues.push(['Urgent ', getCountForIssuesWithParameters("priority_id=4")]);
    issues.push(['Immediate ', getCountForIssuesWithParameters("priority_id=5")]);
    log.info(issues);
    return issues;
}

%>
