<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log();
var modManager = jagg.module("manager");

var deployTaggedArtifact = function (applicationId, stage, version, tagName) {
    var ws = require("ws");
    var deployArtifact = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:deployArtifact";
    options["HTTPHeaders"] = [
    { name : "Cookie", value :modManager.getAdminCookie() }
    ];
    var payload = '<p:deployArtifact xmlns:p="http://deploy.core.appfactory.carbon.wso2.org"><p:applicationId>' + applicationId + '</p:applicationId><p:stage>' + stage + '</p:stage><p:version>' + version + '</p:version><p:tagName>' + tagName + '</p:tagName></p:deployArtifact>';
    var result;
    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationDeployer";
        deployArtifact.open(options, endPoint, false);
        deployArtifact.send(payload);
        result = deployArtifact.responseE4X;
        var ns = new Namespace("http://deploy.core.appfactory.carbon.wso2.org");
        result = result.ns::["return"].text();
        return result;
    } catch (e) {
        log.error("Error while deploying the artifact with tag " + tagName + " : " + e.message);
        throw "Error while deploying the artifact with tag " + tagName;
    }
};

var deployArtifact = function(applicationId, stage, version, tagName, deployAction) {
    var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;
jagg.module("permission").checkUserActionPermission(applicationId,deployToStagePermission);
    var ws = require('ws');
    var deployArtifactRequest = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.mep = "in-only";
    options.action = "http://wso2.org/process";    

	   var payload;
    if(tagName == '' | tagName == null){
        payload =  '<p:DeployArtifactRequest xmlns:p="http://wso2.org">'+
	      '<p:applicationId>'+applicationId+'</p:applicationId>'+
	      '<p:revision></p:revision>'+
	      '<p:version>' + version + '</p:version>'+
	      '<p:stage>'+ stage +'</p:stage>'+
	      '<p:build>true</p:build>'+
          '<p:tagName></p:tagName>'+
          '<p:deployAction>' + deployAction + '</p:deployAction>'+
	    '</p:DeployArtifactRequest>';
    } else {
        payload = '<p:DeployArtifactRequest xmlns:p="http://wso2.org">'+
	      '<p:applicationId>'+applicationId+'</p:applicationId>'+
	      '<p:revision></p:revision>'+
	      '<p:version>' + version + '</p:version>'+
	      '<p:stage>'+ stage +'</p:stage>'+
	      '<p:build>true</p:build>'+
          '<p:tagName>'+ tagName +'</p:tagName>'+
          '<p:deployAction>' + deployAction + '</p:deployAction>'+
                '</p:DeployArtifactRequest>';
    }

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "DeployArtifact";
        deployArtifactRequest.open(options,endPoint, true,  getProperty(ADMIN_USERNAME), getProperty(ADMIN_PASSWORD));
        deployArtifactRequest.send(payload);

        if(log.isDebugEnabled()){
            log.debug("Invoked service endpoint:" + endPoint);
        }

    } catch (e) {
        log.error("Error while creating artifact for application key :"+ applicationId +
        		  "version : " + version + "\n"+ e.message);

        throw "Error while deploying to " + stage;
    }


}

%>