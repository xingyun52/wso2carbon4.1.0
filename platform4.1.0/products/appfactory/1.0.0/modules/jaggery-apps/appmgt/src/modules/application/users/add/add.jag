<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log();
var modManager = jagg.module("manager");

// add the user to the application in LDAP
var addUserToApplication = function addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {
 //   jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION.USER.INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "http://wso2.org/process";
    options["rampart"] = { user : getProperty(ADMIN_USERNAME), userPassword : getProperty(ADMIN_PASSWORD) };
    options["policy"] = <wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
			xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
			wsu:Id="UTOverTransport">
			<wsp:ExactlyOne>
				<wsp:All>
					<sp:TransportBinding
						xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
						<wsp:Policy>
							<sp:TransportToken>
								<wsp:Policy>
									<sp:HttpsToken RequireClientCertificate="false" />
								</wsp:Policy>
							</sp:TransportToken>
							<sp:AlgorithmSuite>
								<wsp:Policy>
									<sp:Basic256 />
								</wsp:Policy>
							</sp:AlgorithmSuite>
							<sp:Layout>
								<wsp:Policy>
									<sp:Lax />
								</wsp:Policy>
							</sp:Layout>
							<sp:IncludeTimestamp />
						</wsp:Policy>
					</sp:TransportBinding>
					<sp:SignedSupportingTokens
						xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
						<wsp:Policy>
							<sp:UsernameToken
								sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient" />
						</wsp:Policy>
					</sp:SignedSupportingTokens>
					<rampart:RampartConfig xmlns:rampart="http://ws.apache.org/rampart/policy">
						<rampart:encryptionUser>useReqSigCert</rampart:encryptionUser>
						<rampart:timestampPrecisionInMilliseconds>true</rampart:timestampPrecisionInMilliseconds>
						<rampart:timestampTTL>300</rampart:timestampTTL>
						<rampart:timestampMaxSkew>300</rampart:timestampMaxSkew>
						<rampart:timestampStrict>false</rampart:timestampStrict>
						<rampart:passwordCallbackClass>org.wso2.carbon.appfactory.utilities.security.PWCBHandler</rampart:passwordCallbackClass>
						<rampart:tokenStoreClass>org.wso2.carbon.security.util.SecurityTokenStore</rampart:tokenStoreClass>
						<rampart:nonceLifeTime>300</rampart:nonceLifeTime>
					</rampart:RampartConfig>
				</wsp:All>
			</wsp:ExactlyOne>
		</wsp:Policy>;

    var payload = '<p:AddUserToApplicationRequest xmlns:p="http://wso2.org"><applicationId xmlns="http://wso2.org">' + applicationKey + '</applicationId><userName xmlns="http://wso2.org">' + newUsername + '</userName><roles xmlns="http://wso2.org">' + newUserRole + '</roles></p:AddUserToApplicationRequest>';
    var result;

    try {
        var endPoint = getProperty(BPS_SERVER_URL) + "AddUserToApplication/process";
        request.open(options, endPoint, false);
        request.send(payload);
        result = request.responseE4X;
        result=result.*::["result"].text();
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
    } catch (e) {
        log.error("Error while adding user to application \n"+e.message);
        throw "Error while adding user to application";
    }
    return result;
};

var addUserToApplicationWS = function addUserToApplicationWS(applicationKey, requestersUsername, newUsername, newUserRole) {
 //   jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION.USER.INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:addUserToApplication";
    options["HTTPHeaders"] = [ { name : "Cookie", value :modManager.getAdminCookie() }];

    var payload = '<p:addUserToApplication xmlns:p="http://service.mgt.application.appfactory.carbon.wso2.org"><applicationId xmlns="http://service.mgt.application.appfactory.carbon.wso2.org">' + applicationKey + '</applicationId><userName xmlns="http://service.mgt.application.appfactory.carbon.wso2.org">' + newUsername + '</userName>';
    for(var i=0; i< newUserRole.length ; i++ ) {
        payload = payload + '<roles xmlns="http://service.mgt.application.appfactory.carbon.wso2.org">' + newUserRole[i] + '</roles>';
    }
    payload = payload + '</p:addUserToApplication>';

    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService/AddUserToApplication";
        request.open(options, endPoint, false);
        request.send(payload);
        result = request.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
    } catch (e) {
        log.error("Error while adding user to application \n"+e.message);
        throw "Error while adding user to application";
    }
    return result;
};
%>
