<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log();

var devEndpoint = getProperty(DEV_SERVER_URL);
var testEndpoint = getProperty(TEST_SERVER_URL);
var prodEndpoint = getProperty(PROD_SERVER_URL);

var modManager = jagg.module("manager");

var reloadAllDataSources = function reloadAllDataSources(applicationKey, epr){
    var ws = require('ws');
    var reloadAllDS = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:reloadAllDataSources";
    var payload = '<ns:reloadAllDataSources xmlns:ns="http://org.apache.axis2/xsd"/>';
    var result;

    try {
		reloadAllDS.open(options, epr + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		reloadAllDS.send(payload);
	   	result = reloadAllDS.responseE4X;

        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
        
 		return parseResponse(result);
    } catch (e) {
        log.error("Error while reloading datasources " + "\n"+e.message);
        throw "Error while relading datasources " + "\n"+e.message;
    }
};

var invokeNDataSource=function (applicationKey, stage){
	var ws = require('ws');
	var ds = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.useWSA = 1.0;
	options.action = "urn:getAllDataSources";
	var payload = '<xsd:getAllDataSources xmlns:xsd="http://org.apache.axis2/xsd"/>';
	var result;

    var endpoint = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.DeploymentServerURL');
    log.info(endpoint);
	try {	
		//if(stage=="dev"){
			reloadAllDataSources(applicationKey, endpoint);
			ds.open(options, endpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
	/*	}else if(stage=="test"){
			reloadAllDataSources(applicationKey, testEndpoint);
			ds.open(options, testEndpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		}else if(stage=="prod"){
			reloadAllDataSources(applicationKey, prodEndpoint);
			ds.open(options, prodEndpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		} */
		ds.send(payload);
	   	result = ds.responseE4X;
	
	   	return parseResponse(result);
    } catch (e) {
    	log.error(e.toString());
    	return e.toString();
    }
};

var datasourceCount = function (applicationKey, stage){
	var ws = require('ws');
	var ds = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.useWSA = 1.0;
	options.action = "urn:getAllDataSources";
	var payload = '<xsd:getAllDataSources xmlns:xsd="http://org.apache.axis2/xsd"/>';
	var result;
	
	try {	
		if(stage=="dev"){
			ds.open(options, devEndpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		}else if(stage=="test"){
			ds.open(options, testEndpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		}else if(stage=="prod"){
			ds.open(options, prodEndpoint + "NDataSourceAdmin", false, getProperty(ADMIN_USERNAME)+'@'+applicationKey, getProperty(ADMIN_PASSWORD));
		}
		ds.send(payload);
	   	result = ds.responseE4X;
		var dataSources = result.*::["return"].*::dsMetaInfo;
		
	   	return dataSources.length();
    } catch (e) {
    	return 0;
    }
};


var parseResponse=function (response){
	var dataSources=response.*::["return"].*::dsMetaInfo;
	var dataSourcesObject=[];
	
	for(var i=0; i<dataSources.length(); i++){
		var task={};
		var entry=dataSources[i];
		var configToXml = new XML(entry.*::definition.*::dsXMLConfiguration.toString());
		
		var name = entry.*::name.text();
		var description=entry.*::description.text();
		var dataSourceType=entry.*::definition.*::type.text(); 
		var driverClassName=configToXml.*::driverClassName.text();
		var url=configToXml.*::url.text();
		var username=configToXml.*::username.text();
		var password=configToXml.*::password.text();
		
		task.name=name;
		task.description=description;
		task.type=dataSourceType;
		task.driverClassName=driverClassName;
		task.url=url;
		task.username=username;
		task.password=password;
		
		dataSourcesObject.push(task);
	}
	
	return dataSourcesObject;
};
%>
