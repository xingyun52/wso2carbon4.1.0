<APIManager>
    <!--
        JNDI name of the data source to be used by the API publisher, API store and API
        key manager. This data source should be defined in the master-datasources.xml file
        in conf/datasources directory.
    -->
    <DataSourceName>jdbc/WSO2AM_DB</DataSourceName>

    <!--
        Database configuration used by API publisher, API store and API key manager.
        When these components are deployed separately, each of them should have
        separate database configurations pointing to the same physical database.
    -->
    <!--Database-->
        <!--
            JDBC connection string for the database.
        -->
        <!--<URL>jdbc:h2:repository/database/WSO2AM_DB</URL> -->

        <!--
            JDBC username for the database.
        -->
        <!--<Username>wso2carbon</Username>-->

        <!--
            JDBC password for the database.
        -->
        <!--<Password>wso2carbon</Password>


            JDBC driver for the database.
        -->
        <!--<Driver>org.h2.Driver</Driver>
    </Database>-->

    <!--
        Authentication manager configuration for API publisher and API store. This is
        a required configuration for both web applications as their user authentication
        logic relies on this.
    -->
    <AuthManager>
        <!--
            Server URL of the Authentication service
        -->
        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>
        <!--
            Admin username for the Authentication manager.
        -->
        <Username>admin</Username>
        <!--
            Admin password for the Authentication manager.
        -->
        <Password>admin</Password>
    </AuthManager>

    <!--
        Configuration parameters for the API authentication handler. This is an optional
        configuration for the API Gateway component.
    -->
    <APIConsumerAuthentication>
        <!--
            Name of the security context header to be added to the validated requests.
        -->
        <SecurityContextHeader>X-JWT-Assertion</SecurityContextHeader>

	<!-- 
		Fully qualified name of the class that will retrieve additional user claims
		to be appended to the JWT. If not specified no claims will be appended.
		The DefaultClaimsRetriever class adds user claims from the default carbon user store.
	-->
	<!--ClaimsRetrieverImplClass>org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever</ClaimsRetrieverImplClass-->

	<!--
		The dialectURI under which the claimURIs that need to be appended to the
		JWT are defined. Not used with custom ClaimsRetriever implementations. The
		same value is used in the keys for appending the default properties to the
		JWT.
	-->
    	<!--ConsumerDialectURI>http://wso2.org/claims</ConsumerDialectURI-->
    	
    	<!-- 
		Signature algorithm. Accepts "SHA256withRSA" or "NONE". To disable signing explicitly specify "NONE".
	-->
	<!--SignatureAlgorithm>SHA256withRSA</SignatureAlgorithm-->

    <!--
		Enable/Disable JWT generation. Default is false.
	-->
	<!--EnableTokenGeneration>false</EnableTokenGeneration-->
	
	<!-- 
		Remove OAuth headers from outgoing message or keep with it.
	-->
	<!--RemoveOAuthHeadersFromOutMessage>true</RemoveOAuthHeadersFromOutMessage-->
    </APIConsumerAuthentication>

    <!--
        Credentials for the API gateway admin server. This configuration
        is mainly used by the API publisher and store to connect to the API gateway and
        create/update published API configurations.
    -->
    <APIGateway>
        <!--
            Server URL of the API gateway.
        -->
        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>

        <!--
            Admin username for the API gateway.
        -->
        <Username>admin</Username>

        <!--
            Admin password for the API gateway.
        -->
        <Password>admin</Password>

        <!--
            Endpoint URLs for the APIs hosted in this API gateway.
        -->
        <APIEndpointURL>http://${carbon.local.ip}:${http.passthrough.port},https://${carbon.local.ip}:${https.passthrough.port}</APIEndpointURL>
        <!--
            Enable/Disable caching at gateway node.
        -->
        <EnableGatewayKeyCache>false</EnableGatewayKeyCache>

	<!-- Header name can be configurable, as you preferred. When API invocation is restricted to access only for authorized domains, 
		client request should send his domain, as the value of this header. 
	-->
	<ClientDomainHeader>referer</ClientDomainHeader>

    </APIGateway>

     <!--
	    Enable/Disable Usage metering and billing for api usage
     -->
     <EnableBillingAndUsage>false</EnableBillingAndUsage>

    <!--
        API usage tracker configuration used by the BAM data publisher and 
        Google Analytics publisher in API gateway.
    -->
    <APIUsageTracking>
	
        <!--
            Enable/Disable the API usage tracker.
        -->
        <Enabled>false</Enabled>

        <!--
            API Usage Data Publisher.
        -->
        <PublisherClass>org.wso2.carbon.apimgt.usage.publisher.APIMgtUsageDataBridgeDataPublisher</PublisherClass>

        <!--
            Thrift port of the remote BAM server.
        -->
        <ThriftPort>7612</ThriftPort>

        <!--
            Server URL of the remote BAM server used to collect statistics. Must
            be specified in protocol://hostname:port/ format.
        -->
        <BAMServerURL>tcp://localhost:7612/</BAMServerURL>

        <!--
            Administrator username to login to the remote BAM server.
        -->
        <BAMUsername>admin</BAMUsername>

        <!--
            Administrator password to login to the remote BAM server.
        -->
        <BAMPassword>admin</BAMPassword>

        <!--
            JNDI name of the data source to be used for getting BAM statistics.This data source should
            be defined in the master-datasources.xml file in conf/datasources directory.
        -->
        <!--DataSourceName>jdbc/WSO2AM_STATS_DB</DataSourceName-->

	<!--
            Google Analytics publisher configuration. Create Google Analytics account and obtain a
            Tracking ID. 
	    Reffer http://support.google.com/analytics/bin/answer.py?hl=en&answer=1009694
        -->
        <GoogleAnalyticsTracking>
             <!--
                 Enable/Disable Google Analytics Tracking
             -->
             <Enabled>false</Enabled>

             <!--
                Google Analytics Tracking ID    
             -->
             <TrackingID>UA-XXXXXXXX-X</TrackingID>

       </GoogleAnalyticsTracking>

    </APIUsageTracking>

    <!--
        API key manager configuration used by API key manager (IS), API store and API gateway.
        This is used by API store to generate and manage API keys. API gateway uses it to
        validate and authenticate users against the provided API keys.
    -->
    <APIKeyManager>
        <!--
            Server URL of the API key manager
        -->
        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>

        <!--
            Admin username for API key manager.
        -->
        <Username>admin</Username>

        <!--
            Admin password for API key manager.
        -->
        <Password>admin</Password>
        <!--
            Default validity period for Application Access Token in seconds
        -->
        <ApplicationTokenDefaultValidityPeriod>3600</ApplicationTokenDefaultValidityPeriod>
        <!--
            Enable/Disable JWT caching.
        -->
        <EnableJWTCache>false</EnableJWTCache>

        <!--
            Enable/Disable API key validation information caching at key-management server
        -->

        <EnableKeyMgtValidationInfoCache>false</EnableKeyMgtValidationInfoCache>

        <!--
        Configurations related to enable thrift support for key-management related communication.
        If you want to switch back to Web Service Client, change the value of "KeyValidatorClientType" to "WSClient".
        In a distributed environment;
        -If you are at the Gateway node, you need to point "ThriftClientPort" value to the "ThriftServerPort" value given at KeyManager node.
        -If you need to start two API Manager instances in the same machine, you need to give different ports to "ThriftServerPort" value in two nodes.
        -ThriftServerHost - Allows to configure a hostname for the thrift server. It uses the carbon hostname by default.
        -->

        <KeyValidatorClientType>ThriftClient</KeyValidatorClientType>
        <ThriftClientPort>10397</ThriftClientPort>
        <ThriftClientConnectionTimeOut>10000</ThriftClientConnectionTimeOut>
        <ThriftServerPort>10397</ThriftServerPort>
	<!--ThriftServerHost>localhost</ThriftServerHost-->
	<EnableThriftServer>true</EnableThriftServer>
	<!--
	   This parameter is used to specify Thrift server host name. In a distributed deployment we must set this parameter
	   if keymanager running on separate machine. Gateway use this parameter to connect key validation thrift service
	-->
	<!--ThriftServerHost>127.0.0.1</ThriftServerHost-->

        <!--
            Remove UserName from JWT Token
        -->
       <!-- <RemoveUserNameToJWTForApplicationToken>true</RemoveUserNameToJWTForApplicationToken>-->

	<!-- Assertions can be used to embedd parameters into access token.-->
	<EnableAssertions>
		<UserName>false</UserName>
	</EnableAssertions>

	<!-- This should be set to true when using multiple user stores and keys should saved 
			into different tables according to the user store. By default all the application keys are saved in to the same table.
			UserName Assertion should be 'true' to use this.-->
	<AccessTokenPartitioning>
		<EnableAccessTokenPartitioning>false</EnableAccessTokenPartitioning>
		<!-- user store domain names and mappings to new table names.
				eg: if you provide 'A:foo.com', foo.com should be the user store domain name and 'A' represent the relavant mapping of 
				token storing table, i.e. tokens relevant to the users comming from foo.com user store will be added to a table called
				IDN_OAUTH2_ACCESS_TOKEN_A. --> 
		<AccessTokenPartitioningDomains><!-- A:foo.com, B:bar.com --></AccessTokenPartitioningDomains>
	</AccessTokenPartitioning>

    </APIKeyManager>

    <!--
        Settings related to managing API access tiers.
    -->
    <TierManagement>
        <!--
            Enable the providers to expose their APIs over the special 'Unlimited' tier which
            basically disables tier based throttling for the specified APIs.
        -->
        <EnableUnlimitedTier>true</EnableUnlimitedTier>
    </TierManagement>

    <!--
        Use this configuration to control the self-sign-up capability in API store.
    -->
    <SelfSignUp>
        <!--
            Enable or disable the self-sign-up feature.
        -->
        <Enabled>true</Enabled>

        <!--
            Self signed up users should be associated with a suitable subscriber
            role for them to be able to access the API store portal. This required
            parameter specifies which role should be used for that purpose. The role
            specified here must have the '/permission/admin/manage/api/subscribe'
            permission.
        -->
        <SubscriberRoleName>subscriber</SubscriberRoleName>

        <!--
            This parameter specifies whether the subscriber role specified above
            should be created in the local user store or not. This only makes sense
            when the API subscribers are authenticated against the local user store.
            That is the local Carbon server is acting as the AuthManager. If a remote
            Carbon server is acting as the AuthManager, this parameter should be turned
            off for the local server.
        -->
        <CreateSubscriberRole>true</CreateSubscriberRole>
    </SelfSignUp>

    <!--
        Use this configuration to control the number of APIs shown in API store.
    -->
    <APIStore>
        <!--
            This parameter specifies whether to display multiple versions of same
            API or only showing the latest version of an API.

        -->
        <DisplayMultipleVersions>false</DisplayMultipleVersions>
        <!--
            This parameter specifies whether to display all the APIs
            [which are having DEPRECATED/PUBLISHED status] or only display the APIs
            with having their status is as 'PUBLISHED'

        -->
        <DisplayAllAPIs>false</DisplayAllAPIs>
		
		 <!--
            This parameter specifies whether to display the comment editing facility or not.
           Default is "true". If user wants to disable, he must set this param as "false"

        -->
		<DisplayComments>true</DisplayComments>
		
		 <!--
            This parameter specifies whether to display the ratings  or not.
           Default is "true". If user wants to disable, he must set this param as "false"

        -->
		<DisplayRatings>true</DisplayRatings>

    </APIStore>

    <!--
        Status observers can be registered against the API Publisher to listen for
        API status update events. Each observer must implement the APIStatusObserver
        interface. Multiple observers can be engaged if necessary and in such situations
        they will be notified in the order they are defined here.
    -->
    <!--StatusObservers>
        <Observer>org.wso2.carbon.apimgt.impl.observers.SimpleLoggingObserver</Observer>
    </StatusObservers-->

    <!--
        There are set of plugguble extensions for some operations related to API MAnager
	operations such as self sign in, subscriptions and etc. For those operatios we can
	trigger external work flow of business process server. Here are the configurations
	related to those operations
    -->
    <WorkFlowExtensions>
      <SelfSignIn>
         <ProcessEnabled>false</ProcessEnabled>
         <ServerURL>http://test.com/service</ServerURL>
         <UserName>admin</UserName>
         <Password>admin</Password>
      </SelfSignIn>
    </WorkFlowExtensions>

</APIManager>

