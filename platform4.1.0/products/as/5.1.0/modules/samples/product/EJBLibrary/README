WSO2 Application Server
==========================

Sample : EJBLibrary
=======================

Introduction
===============

EJB Services feature in WSO2 Application Server to expose an externally deployed j2ee compliant
 Enterprise Java eBeans (EJB) application as a web service. So an existing EJB service can be
 exposed as a SOA web service and this service will also be eligible for the fill advantages of
 WSO2 carbon features such as security, throttling, caching, etc.

 In the sample EJB library system is demonstrated. Its build as a java enterprise archive (ear)
 ans needs to be deployed in an external j2ee compliant application server. Then the library
 system can be exposed as a WebService via WSO2 Application Server.  The sample is based on EJB 3.x.

Prerequisites
===============

This sample is tested with 'jboss-6.1.0.Final'.

Building the Sample
====================

Sample contains the following items.
|-- build.xml            ant build file
|-- ejb/                 module for creating the EJB jar archive and java sources bundle
`-- ear/                 module for creating the enterprise application archive

If you are using windows get a command line shell,
go to [carbon_home]\samples\EJBLibrary\
then run, \EJBLibrary\> ant

If in linux from console,
go to [carbon_home]/samples/EJBLibrary/
and run, /EJBLibrary$ ant

Now all the resources for the sample are built. Required resources for the sample are following,
- ejb/target/library.jar - jar archive containing ejb sources
- ear/target/library.ear - enterprise application archive


Running the sample
====================

1) Deploy the ear archive (library.ear) in a J2EE compliant application server.
eg: jboss, glassfish, weblogic, apache gerenimo

Note: Make sure to note down the JNDI name for the remote EJB interface
(org.wso2.appserver.samples.ejb.LibraryManager). this should be "LibraryManager"
by default, but may change in some application servers.

2) Exposing the deployed EJB application as a web service

This needs to be configured via the WSO2 Application Server's ejb-services UI.

    Phase 1
    -------
    Adding the clients jars of the external application server into WSO2 Application Server.
    Client jar(s) should be copied into [carbon_home]/repository/components/lib

    eg: If the EJB is deployed in,
     * jboss application server -> copy jbossall-client.jar into,
     [carbon_home]/repository/components/lib
     * glassfish application server -> copy the gf-client.jar into,
     [carbon_home]/repository/components/lib

     Also add ejb/target/library.jar into [carbon_home]/lib/endorsed

    Phase 2
    --------

    Now it is time to create the ejb-service via WSO2 Application Server console.
     * go to Manage > WebServices > EJB Service
     * Add a new application server type or use an existing if you have already defined.
     * Click next
     * Upload the library.jar and click next
     * Provide the EJB details.
       - Select EJB remote interface from the drop down list of classes,
            Remote Interface : org.wso2.appserver.samples.ejb.LibraryManager
       - Enter bean JNDI name for sample,
            Bean JNDI Name : LibraryManager 
            (Please use the correct JNDI name is its different from above)
     * Click "Finish"

     Now the ejb-service would be created and deployed. For more information on the steps above
     please refer to context sensitive help page in WSO2 Application Server ejb-services UI or
     "ejb-services sample guide" in the documentation distribution.


Testing the created ejb-service.
================================

   If the created ejb-service is successfully deployed it will be shown under web services
   listing in the WSO2 Application Server.

   go to Manage > Web Services > List and you will be able to see the deployed ejb-service
   (library). Click on the service and it will show the service dashboard. Now click
   try-it and the try-it page for the service open. This can be used to invoke the ejb-service and
   hence EJB service deployed in the external application server.


Important
---------
* For some application servers their client jar is a empty jar wchich is referring to a collection
of jars through manifest references. Since these references are relative and we need to copy the
client jars in to WSO2 Application Server, just copying these empty client jars wouldn't work.
[1] describes a way how you can bundle all these referred jars into one bundle.

* Some of the packages in external application server's client jar(s) may clash with the existing
 packages in WSO2 Application Server's classpath. This might lead to class loading issues. So users
 may need to remove those conflicting packages from client jars for the ejb-service to function
 properly.

[1] http://devgrok.blogspot.com/2010/02/building-your-own-jbossall-clientjar.html
