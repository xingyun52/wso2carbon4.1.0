import org.wso2.carbon.throttling.manager.dataobjects.*;
import org.wso2.carbon.billing.mgt.dataobjects.*;
import org.wso2.carbon.stratos.common.constants.*;

// free users restrictions

rule unsetRestrictFreeUsers
when
 $package: MultitenancyPackage(name == "Demo")
 $dataContext : ThrottlingDataContext()

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_ADD_USER_ACTION, false, null);

end


rule restrictFreeDataVolume
when
 $package: MultitenancyPackage(name == "Demo")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) > (20 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, true, 
            "You have exceeded the maximum allowed disk storage of 20Mb. Please upgrade the subscription.");
end


rule unsetRestrictFreeDataVolume
when
 $package: MultitenancyPackage(name == "Demo")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) <= (20 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, false, null);
end


rule restrictFreeBandwidth
when
 $package: MultitenancyPackage(name == "Demo")
 $dataContext : ThrottlingDataContext()
 eval(($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_INCOMING_BANDWIDTH) + 
 		$dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_OUTGOING_BANDWIDTH)) > (50 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_SERVICE_IN_BANDWIDTH_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 50Mb. Please upgrade the subscription.");
 validation.setTenantBlocked(StratosConstants.THROTTLING_WEBAPP_IN_BANDWIDTH_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 50Mb. Please upgrade the subscription.");
 validation.setTenantBlocked(StratosConstants.THROTTLING_OUT_DATA_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 50Mb. Please upgrade the subscription.");                      
end


rule unsetRestrictFreeBandwidth
when
 $package: MultitenancyPackage(name == "Demo")
 $dataContext : ThrottlingDataContext()
 eval(($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_INCOMING_BANDWIDTH) + 
 		$dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_OUTGOING_BANDWIDTH)) < (50 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_SERVICE_IN_BANDWIDTH_ACTION,false,null);
 validation.setTenantBlocked(StratosConstants.THROTTLING_WEBAPP_IN_BANDWIDTH_ACTION,false,null);
 validation.setTenantBlocked(StratosConstants.THROTTLING_OUT_DATA_ACTION,false,null);
end


//---------------------------------------------------------------------------------
// small users restrictions



rule restrictSmallDataVolume
when
 $package: MultitenancyPackage(name == "SMB")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) > (50 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, true, 
            "You have exceeded the maximum allowed disk storage of 50Mb. Please upgrade the subscription.");
end


rule unsetRestrictSmallDataVolume
when
 $package: MultitenancyPackage(name == "SMB")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) <= (50 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, false, null);
end


rule restrictSmallBandwidth
when
 $package: MultitenancyPackage(name == "SMB")
 $dataContext : ThrottlingDataContext()
 eval(($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_INCOMING_BANDWIDTH) + 
 		$dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_OUTGOING_BANDWIDTH)) > (150 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_SERVICE_IN_BANDWIDTH_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 150Mb. Please upgrade the subscription.");
 validation.setTenantBlocked(StratosConstants.THROTTLING_WEBAPP_IN_BANDWIDTH_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 150Mb. Please upgrade the subscription.");
 validation.setTenantBlocked(StratosConstants.THROTTLING_OUT_DATA_ACTION, true, 
            "You have exceeded the maximum allowed bandwidth of 150Mb. Please upgrade the subscription."); 
end


rule unsetRestrictSmallBandwidth
when
 $package: MultitenancyPackage(name == "SMB")
 $dataContext : ThrottlingDataContext()
 eval(($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_INCOMING_BANDWIDTH) + 
 		$dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_OUTGOING_BANDWIDTH)) < (150 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_SERVICE_IN_BANDWIDTH_ACTION,false,null);
 validation.setTenantBlocked(StratosConstants.THROTTLING_WEBAPP_IN_BANDWIDTH_ACTION,false,null);
 validation.setTenantBlocked(StratosConstants.THROTTLING_OUT_DATA_ACTION,false,null);
end


rule unsetRestrictSmallUsers
when
 $package: MultitenancyPackage(name == "SMB")
 $dataContext : ThrottlingDataContext()
then

 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_ADD_USER_ACTION, false, null);

end




//-------------------------------------------------------------------------------
// medium users restrictions



rule restrictMediumDataVolume
when
 $package: MultitenancyPackage(name == "Professional")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) > (500 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, true, 
            "You have exceeded the maximum allowed disk storage of 500Mb. Please upgrade the subscription.");
end


rule unsetRestrictMediumDataVolume
when
 $package: MultitenancyPackage(name == "Professional")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) <= (500 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, false, null);
end


rule unsetRestrictMediumUsers
when
 $package: MultitenancyPackage(name == "Professional")
 $dataContext : ThrottlingDataContext()
then

 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_ADD_USER_ACTION, false, null);

end



//-----------------------------------------------------------------------------------------------
// large users restrictions


rule restrictLargeDataVolume
when
 $package: MultitenancyPackage(name == "Enterprise")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) > (1500 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, true, 
            "You have exceeded the maximum allowed disk storage of 1500Mb.");
end


rule unsetRestrictLargeDataVolume
when
 $package: MultitenancyPackage(name == "Enterprise")
 $dataContext : ThrottlingDataContext()
 eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) <= (1500 * 1024 * 1024) && 
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then
 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION, false, null);
end


rule unsetRestrictLargeUsers
when
 $package: MultitenancyPackage(name == "Enterprise")
 $dataContext : ThrottlingDataContext()
then

 ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
 validation.setTenantBlocked(StratosConstants.THROTTLING_ADD_USER_ACTION, false, null);

end




