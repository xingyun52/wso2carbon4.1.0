#!/bin/bash

ROOTFS=$1
TEMPLATE=$2

#
# Locale settings (en_GB for Redcoats, en_US for Yanks):
#
LANG="en_US.UTF-8" 
LANGUAGE="en_US.UTF-8" 
LC_ALL="en_US.UTF-8" 
LC_CTYPE="C"

#
# Ubuntu mirror to use:
#
###DEBMIRROR="http://archive.ubuntu.com/ubuntu/"
#DEBMIRROR="http://us.archive.ubuntu.com/ubuntu/"
DEBMIRROR="http://lk.archive.ubuntu.com/ubuntu/"


lamp() {

    cp -f ./init_scripts/lamp/wso2-openstack-init.sh $ROOTFS/opt/
    cp -f ./init_scripts/lamp/get-launch-params.rb $ROOTFS/opt/
    cp -f ./init_scripts/lamp/server $ROOTFS/opt/
    cp -f ./init_scripts/lamp/svn_client.sh $ROOTFS/opt/
    cp -f ./init_scripts/lamp/svn_client_y.sh $ROOTFS/opt/
    cp -f ./init_scripts/lamp/deployer.sh $ROOTFS/opt/

    # Copy software
    arr=$(echo $SOFTWARE | tr ":" "\n")
    for x in $arr
    do
       cp -rf $x $ROOTFS/opt/
    done


	# MySQL still prompts.  Bug.
	#DEBCONF_FRONTEND='noninteractive' 
	
	chroot $ROOTFS apt-get update
	# Next, all the LAMP packages.  We must first pre-save the password
	# for MySQL to use:
	chroot $ROOTFS echo "mysql-server mysql-server/root_password select ubuntu" | chroot $ROOTFS debconf-set-selections
	chroot $ROOTFS echo "mysql-server mysql-server/root_password_again select ubuntu" | chroot $ROOTFS debconf-set-selections
	
	chroot $ROOTFS apt-get install -y \
	 nano zip mysql-server mysql-client \
	 apache2 php5 php5-cli libapache2-mod-php5 php5-gd php5-mysql php-db php-pear php5-curl curl wget php5-ldap php5-adodb mailutils \
	 php5-imap php5-ldap \
	 openssl ssl-cert ldap-utils \
	 php5-mcrypt mcrypt ufw fail2ban ruby subversion

	# Be sure to have a new SSL cert for this new LXC host:
	#rm -f $ROOTFS/etc/ssl/private/ssl-cert-snakeoil.key
	#chroot $ROOTFS dpkg-reconfigure ssl-cert

	# Enable HTTPS:
	#chroot $ROOTFS a2enmod ssl
	#chroot $ROOTFS a2ensite default-ssl	

	# Turn on MySQL replication logs by default.  (Necessary for 
	# incremental backups, even if you're not doing replication.)
	pushd $ROOTFS/etc/mysql/conf.d
	echo "[mysqld]
log-bin=mysqld-bin
server-id = 1

# For an SSH Tunneled slave:
# See also: /etc/rc.local for the SSH Tunnel that makes this work.
#[mysqld]
#master-host     = 127.0.0.1
#master-user     = root
#master-password = ubuntu
#master-port     = 13306
#server-id       = 2
	" >> replication.cnf
	popd

pushd $ROOTFS/etc
    echo "#!/bin/bash -e
/opt/wso2-openstack-init.sh > /var/log/wso2-openstack-init.log
exit 0
    " > rc.local
    popd

	# Next, fix a couple of Debian gotchas:

	# Comment out these two lines.  (Don't expire,
	# and use the 1G default file size.
	pushd $ROOTFS/etc/mysql
	cp -a my.cnf my.cnf-dist
	sed '
s/expire_logs_days/#expire_logs_days/
s/max_binlog_size/#max_binlog_size/
' < my.cnf-dist > my.cnf
	popd
	
	# See http://blog.bodhizazen.net/linux/lxc-configure-ubuntu-lucid-containers/
	# This requirement is confirmed on 10.04.1 LTS.  Within LXC, the
	# upstart "startup" signal is sent, but not "network-interface", etc.
	pushd $ROOTFS/etc/init/
	cp -a ufw.conf ufw.conf-dist
	sed '
s/start on (starting network-interface/start on startup\n#start on (starting network-interface/
s/          or starting network-manager/#          or starting network-manager/
s/          or starting networking)/#          or starting network-manager/
' < ufw.conf-dist > ufw.conf
	
	cp -a mysql.conf mysql.conf-dist
	sed --posix -e '
s/start on (net-device-up/start on startup\n#start on (net-device-up/
s/          and local-filesystems/#          and local-filesystems/
s/\t  and runlevel \[2345\])/#\t  and runlevel \[2345\])/
' < mysql.conf-dist > mysql.conf
	popd
	
}

wso2_carbon_server() {

    cp -f ./init_scripts/carbon/wso2-openstack-init.sh $ROOTFS/opt/
    cp -f ./init_scripts/carbon/get-launch-params.rb $ROOTFS/opt/
    # Copy software
    arr=$(echo $SOFTWARE | tr ":" "\n")
    for x in $arr
    do
       cp -rf $x $ROOTFS/opt/
    done

	#chroot $ROOTFS apt-get update
	
	chroot $ROOTFS apt-get install -y \
	 nano zip \
	 wget \
	 openssl ssl-cert ldap-utils ruby
   
	# Be sure to have a new SSL cert for this new LXC host:
	#rm -f $ROOTFS/etc/ssl/private/ssl-cert-snakeoil.key
	#chroot $ROOTFS dpkg-reconfigure ssl-cert

pushd $ROOTFS/etc
    echo "#!/bin/bash -e
/opt/wso2-openstack-init.sh > /var/log/wso2-openstack-init.log
exit 0
    " > rc.local
    popd

}

jetty() {

    cp -f ./init_scripts/jetty/wso2-openstack-init.sh $ROOTFS/opt/
    cp -f ./init_scripts/jetty/get-launch-params.rb $ROOTFS/opt/
    cp -f ./init_scripts/jetty/server $ROOTFS/opt/
    cp -f ./init_scripts/jetty/svn_client.sh $ROOTFS/opt/
    cp -f ./init_scripts/jetty/svn_client_y.sh $ROOTFS/opt/
    cp -f ./init_scripts/jetty/deployer.sh $ROOTFS/opt/
    # Copy software
    arr=$(echo $SOFTWARE | tr ":" "\n")
    for x in $arr
    do
       cp -rf $x $ROOTFS/opt/
    done

	#chroot $ROOTFS apt-get update
	
	chroot $ROOTFS apt-get install -y \
	 nano zip \
	 wget \
	 openssl ssl-cert ldap-utils ruby subversion
   
pushd $ROOTFS/etc
    echo "#!/bin/bash -e
/opt/wso2-openstack-init.sh > /var/log/wso2-openstack-init.log
exit 0
    " > rc.local
    popd

}


# Don't prompt when running apt-get:
export DEBCONF_FRONTEND='noninteractive' 

# Run the config function with given $TEMPLATE name (if it exists):
$TEMPLATE 

